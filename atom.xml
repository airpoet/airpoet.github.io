<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.P的文艺杂谈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://airpoet.github.io/"/>
  <updated>2018-07-25T08:29:14.468Z</updated>
  <id>https://airpoet.github.io/</id>
  
  <author>
    <name>airpoet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark重点解析(一)</title>
    <link href="https://airpoet.github.io/2018/07/25/Spark/Spark%E9%87%8D%E7%82%B9%E8%A7%A3%E6%9E%90(%E4%B8%80)/"/>
    <id>https://airpoet.github.io/2018/07/25/Spark/Spark重点解析(一)/</id>
    <published>2018-07-25T06:58:04.056Z</published>
    <updated>2018-07-25T08:29:14.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Spark-与-MapReduce-区别"><a href="#一-Spark-与-MapReduce-区别" class="headerlink" title="一. Spark 与 MapReduce 区别"></a>一. Spark 与 MapReduce 区别</h1><p><strong>Apache Spark™</strong> is a fast and general engine for large-scale data processing.</p><p><strong>与mapreduce比较 </strong>：</p><ul><li><p>Spark大多数执行过程是基于内存的迭代</p></li><li><p>MapReduce 的 优点, SparkCore 都有</p></li><li><p>Hive 能做的操作, SparkSQL 都能做, 可以写 SQL 语句转换为 SparkCore 代码</p></li><li><p>Spark Streaming 提供近实时流</p></li><li><p>超过80个类似于 map, reduce 这样的操作</p></li><li><p>可以在<a href="http://www.alluxio.org/" target="_blank" rel="noopener">Tachyon</a>（基于内存的分布式的文件系统 (HDFS 是基于磁盘)) 上运行Spark, 会更快</p></li></ul><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-25-070107.png" alt="image-20180725150106695"></p><h1 id="二-什么是RDD"><a href="#二-什么是RDD" class="headerlink" title="二. 什么是RDD"></a>二. 什么是RDD</h1><p>1、RDD是Spark提供的核心<strong>抽象</strong>，全称为Resillient Distributed Dataset，即<strong>弹性</strong>分布式数据集。</p><p>2、RDD在抽象上来说是一种元素集合，包含了数据。它是<strong>被分区的</strong>，分为多个分区，每个分区分布在集群中的不同节点上，从而让RDD中的数据可以被并行操作。（分布式数据集）</p><ul><li>如果读取的文件本来就存在于3个分区, 这些操作会并行操作, 如何并行操作?  :TODO</li><li>如果存在于3个分区, 手动规定了2个分区, 那么是如何工作的 ? :TODO</li></ul><p>3、RDD通常<strong>通过Hadoop上的文件</strong>，即HDFS文件或者Hive表，来进行<strong>创建</strong>；有时也可以<strong>通过应用程序中的集合来创建</strong>。</p><ul><li><strong>从文件系统读取</strong>: local 或 HDFS <code>sc.textFile(&quot;/Users/shixuanji/Documents/a.txt&quot;,2);</code></li><li>Hive 表: : TODO</li><li>并行化的方式创建(多用于测试): <code>val rdd = sc.makeRDD(1 to 10)</code>  或者 <code>val rdd = sc.parallelize(arr);</code></li></ul><p>4、RDD最重要的特性就是，提供了<strong>容错性</strong>，可以自动从节点失败中恢复过来。即如果某个节点上的RDD partition，因为节点故障，导致数据丢了，那么<strong>RDD会自动通过自己的数据来源重新计算该partition</strong>。这一切对使用者是透明的。</p><p>5、RDD的数据<strong>默认</strong>情况下存<strong>放在内存</strong>中的，但是在<strong>内存资源不足时</strong>，Spark<strong>会自动将RDD数据写入磁盘</strong>。（弹性 == 灵活）</p><blockquote><p><strong>下图中画橙色框的都是 RDD </strong></p></blockquote><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-25-070716.png" alt="image-20180725150715950"></p><h1 id="三-Spark-的架构-standalone"><a href="#三-Spark-的架构-standalone" class="headerlink" title="三. Spark 的架构(standalone)"></a>三. Spark 的架构(standalone)</h1><p>涉及到的名词: <strong>Driver</strong>, <strong>Master</strong>, <strong>Worker</strong>, <strong>Executor</strong> , <strong>Task</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-25-075654.png" alt="image-20180725155654170"></p><h1 id="四-Spark-任务提交"><a href="#四-Spark-任务提交" class="headerlink" title="四. Spark 任务提交"></a>四. Spark 任务提交</h1><p>参考官网 <a href="http://spark.apache.org/docs/latest/submitting-applications.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/submitting-applications.html</a></p><p><strong>Client</strong>模式</p><p>不指定<code>deploy-mode</code> ,默认就是<strong>client</strong>模式，也就是<strong>哪一台服务器提交</strong>spark代码，那么<strong>哪一台就是driver服务器</strong>。</p><p><strong>Cluster</strong>模式</p><p>需要指定<code>deploy-mode</code>，driver服务器并不是提交代码的那一台服务器，而是在提交代码的时候，在<strong>worker</strong>主机上，<strong>随机挑选一台作为driver服务器</strong>，那么<u>如果提交10个应用，那么就有可能10台driver服务器</u>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Run application locally on 8 cores</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master <span class="built_in">local</span>[8] \</span><br><span class="line">  /path/to/examples.jar \</span><br><span class="line">  100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run on a Spark standalone cluster in client deploy mode</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master spark://207.184.161.138:7077 \</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --total-executor-cores 100 \</span><br><span class="line">  /path/to/examples.jar \</span><br><span class="line">  1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run on a Spark standalone cluster in cluster deploy mode with supervise</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master spark://207.184.161.138:7077 \</span><br><span class="line">  --deploy-mode cluster \</span><br><span class="line">  --supervise \</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --total-executor-cores 100 \</span><br><span class="line">  /path/to/examples.jar \</span><br><span class="line">  1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run on a YARN cluster</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=XXX</span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master yarn \</span><br><span class="line">  --deploy-mode cluster \  <span class="comment"># can be client for client mode</span></span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --num-executors 50 \</span><br><span class="line">  /path/to/examples.jar \</span><br><span class="line">  1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run a Python application on a Spark standalone cluster</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --master spark://207.184.161.138:7077 \</span><br><span class="line">  examples/src/main/python/pi.py \</span><br><span class="line">  1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run on a Mesos cluster in cluster deploy mode with supervise</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master mesos://207.184.161.138:7077 \</span><br><span class="line">  --deploy-mode cluster \</span><br><span class="line">  --supervise \</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --total-executor-cores 100 \</span><br><span class="line">  http://path/to/examples.jar \</span><br><span class="line">  1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run on a Kubernetes cluster in cluster deploy mode</span></span><br><span class="line">./bin/spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master k8s://xx.yy.zz.ww:443 \</span><br><span class="line">  --deploy-mode cluster \</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --num-executors 50 \</span><br><span class="line">  http://path/to/examples.jar \</span><br><span class="line">  1000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Spark-与-MapReduce-区别&quot;&gt;&lt;a href=&quot;#一-Spark-与-MapReduce-区别&quot; class=&quot;headerlink&quot; title=&quot;一. Spark 与 MapReduce 区别&quot;&gt;&lt;/a&gt;一. Spark 与 MapReduc
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="图示" scheme="https://airpoet.github.io/categories/Spark/%E5%9B%BE%E7%A4%BA/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>i-Spark-5</title>
    <link href="https://airpoet.github.io/2018/07/25/Spark/i-Spark-5/"/>
    <id>https://airpoet.github.io/2018/07/25/Spark/i-Spark-5/</id>
    <published>2018-07-25T03:36:06.050Z</published>
    <updated>2018-07-25T06:59:41.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Spark-的闭包处理"><a href="#一-Spark-的闭包处理" class="headerlink" title="一. Spark 的闭包处理"></a>一. Spark 的闭包处理</h1><p><strong>RDD</strong>, <code>resilient distributed dataset</code>,弹性(容错)分布式数据集。</p><p>分区列表, function,dep Option(分区类, Pair[Key,Value]),首选位置。</p><p><strong>运行job时，spark将rdd打碎变换成task</strong>,<strong>每个task由一个executor执行</strong>。</p><p>执行之前，<strong>spark会进行task的闭包(closure)计算。</strong></p><p>闭包是指针对executor可见的变量和方法,以备在rdd的foreach中进行计算。</p><p><strong>闭包就是串行化后并发送给每个executor.</strong></p><p><strong>local模式下</strong>，所有spark程序运行在同一JVM中，共享对象，<strong>counter是可以累加的</strong>。</p><p>原因是所有executor指向的是同一个引用。</p><p><strong>cluster模式下，不可以，counter是闭包处理的。</strong></p><p>每个节点对driver上的counter是不可见的。</p><p>只能看到自己内部串行化的counter副本。</p><h1 id="二-Spark的应用的-部署模式"><a href="#二-Spark的应用的-部署模式" class="headerlink" title="二. Spark的应用的 部署模式"></a>二. Spark的应用的 部署模式</h1><h2 id="1-部署模式概述"><a href="#1-部署模式概述" class="headerlink" title="1. 部署模式概述"></a>1. 部署模式概述</h2><p><code>spark-submit --class xxx xx.jar --deploy-mode (client | cluster)</code></p><p>  <strong><code>--deploy-mode</code>指定部署driver程序在client主机上还是在worker节点上。</strong> </p><p><strong>[client]</strong></p><ul><li>driver运行在client主机上。</li><li>client可以不在cluster(集群)中。 </li></ul><p><strong>[cluster]</strong></p><ul><li><code>driver</code>程序提交给<code>spark cluster</code>的某个<code>worker</code>节点来执行。</li><li>worker是cluster中的一员。</li><li>导出的jar需要放置到所有worker节点都可见的位置(如<code>hdfs</code>)才可以。</li></ul><p><strong>不论哪种方式，rdd的运算都在worker执行</strong></p><h2 id="2-deploy-mode部署模式验证"><a href="#2-deploy-mode部署模式验证" class="headerlink" title="2. deploy mode部署模式验证"></a>2. deploy mode部署模式验证</h2><h4 id="部署模式划分"><a href="#部署模式划分" class="headerlink" title="部署模式划分"></a>部署模式划分</h4><ul><li><strong>Client(客户端模式)</strong><ul><li><code>spark-submit --class com.rox.spark.scala.DeployModeTest --master [spark://cs1:7077](spark://s201:7077) --deploy-mode client SparkDemo-1-deploymode.jar</code></li><li>driver就是自己, 如果在cs1上, driver 就是cs1</li></ul></li><li><strong>Cluster(集群模式)</strong><ul><li><code>spark-submit --class com.it18zhang.spark.scala.DeployModeTest --master [spark://cs1:7077](spark://s201:7077) --deploy-mode cluster [hdfs://cs1:8020/user/centos/SparkDemo-1-deploymode.jar](hdfs://s201:8020/user/centos/SparkDemo1-1.0-SNAPSHOT.jar)</code></li><li>driver是由 spark 挑选的,如果是 cs1上提交的,因为 cs1也不是 worker(slave), 所以 driver和 worker 都跟cs1无关, 注意, cluster 模式,只要一提交完就结束了, 因为接下来跟他自己没关系了 , 所以此时在 cs1上执行的非常快</li><li>必须要将jar放置到所有worker都能够看到的地方才可以，例如hdfs。</li></ul></li></ul><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a><strong>代码解释</strong></h4><ul><li>通过Socket把打印的数据, 发送到指定机器<code>cs5</code>上</li><li>在<code>cs5</code>上, 开启 <code>nc</code>端口, 监听消息</li><li><code>standalone</code> 和 <code>yarn</code>模式分别打成 <code>jar包</code>,  在spark 环境中执行</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rox.spark.scala</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.&#123;<span class="type">InetAddress</span>, <span class="type">Socket</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DeployModeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * write写出去</span></span><br><span class="line"><span class="comment">    * 从运行 此程序的节点, 写到 cs5 上</span></span><br><span class="line"><span class="comment">    * @param str</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span></span>(str:<span class="type">String</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ip = <span class="type">InetAddress</span>.getLocalHost.getHostAddress</span><br><span class="line">    <span class="keyword">val</span> sock = <span class="keyword">new</span> <span class="type">Socket</span>(<span class="string">"cs5"</span>,<span class="number">8888</span>)</span><br><span class="line">    <span class="keyword">val</span> out = sock.getOutputStream</span><br><span class="line">    out.write((ip + <span class="string">""</span> + str + <span class="string">"\r\n"</span>).getBytes())</span><br><span class="line">    out.flush()</span><br><span class="line">    sock.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">    conf.setAppName(<span class="string">"DeployModeTest"</span>)</span><br><span class="line">    <span class="comment">// standalone 模式</span></span><br><span class="line">    <span class="comment">//conf.setMaster("spark://cs1:7077")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Yarn模式</span></span><br><span class="line">    conf.setMaster(<span class="string">"yarn"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// local 模式</span></span><br><span class="line">    <span class="comment">// conf.setMaster("local[4]")</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    printInfo(<span class="string">"hello guys---我就是Driver"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Distribute a local Scala collection to form an RDD.</span></span><br><span class="line"><span class="comment">      * numSlices: the partition number of the new RDD.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>,  <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印第一次map</span></span><br><span class="line">    <span class="keyword">val</span> rdd2 = rdd1.map(e =&gt; &#123;</span><br><span class="line">      printInfo(<span class="string">"直接定义3个分区, map1: "</span>+e)</span><br><span class="line">      e * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新分区为 2</span></span><br><span class="line">    <span class="keyword">val</span> rdd3 = rdd2.repartition(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">val</span> rdd4 = rdd3.map(e =&gt; &#123;</span><br><span class="line">      printInfo(<span class="string">"重分区为2后, map2: "</span> + e)</span><br><span class="line">      e</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> res = rdd4.reduce((a,b)=&gt;&#123;</span><br><span class="line">      printInfo(<span class="string">"求和, reduce: "</span> + a + <span class="string">","</span> + b)</span><br><span class="line">      a + b</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    println(res)</span><br><span class="line">    printInfo(<span class="string">"最后发给driver: "</span> + res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-Spark-集群的运行方式"><a href="#三-Spark-集群的运行方式" class="headerlink" title="三. Spark 集群的运行方式"></a>三. Spark 集群的运行方式</h1><p><strong>主要是<code>cluster manager</code>的区别。</strong> </p><p><strong>[local]</strong> </p><ul><li>…</li></ul><p><strong>[standalone]</strong> </p><ul><li>使用SparkMaster进程作为管理节点, 需要开启Spark 集群</li></ul><p><strong>[mesos]</strong> </p><ul><li>使用mesos的master作为管理节点。 </li></ul><p><strong>[yarn]</strong> </p><ul><li><p>使用hadoop的ResourceManager作为master节点。</p></li><li><p>不用开启 spark 集群。因为是依托<code>yarn 集群</code>来执行<code>spark</code> application,  高可用也是依托于 yarn 的高可用, 程序在执行时, 会拷贝 一些spark 依赖环境到 hdfs 上, 事后会删除</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Spark-的闭包处理&quot;&gt;&lt;a href=&quot;#一-Spark-的闭包处理&quot; class=&quot;headerlink&quot; title=&quot;一. Spark 的闭包处理&quot;&gt;&lt;/a&gt;一. Spark 的闭包处理&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;RDD&lt;/strong&gt;, &lt;c
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="部署模式" scheme="https://airpoet.github.io/categories/Spark/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Python &amp; Hadoop | Spark 生态</title>
    <link href="https://airpoet.github.io/2018/07/23/Spark/Python%20&amp;%20Hadoop%7CSpark%E7%94%9F%E6%80%81/"/>
    <id>https://airpoet.github.io/2018/07/23/Spark/Python &amp; Hadoop|Spark生态/</id>
    <published>2018-07-23T06:27:10.923Z</published>
    <updated>2018-07-23T08:06:55.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Python-访问-MySQL"><a href="#一-Python-访问-MySQL" class="headerlink" title="一. Python 访问 MySQL"></a>一. Python 访问 MySQL</h1><h2 id="1-安装-pymysql-模块"><a href="#1-安装-pymysql-模块" class="headerlink" title="1.安装 pymysql 模块"></a>1.安装 pymysql 模块</h2><p>1) <code>idea</code>中,  <code>import pymysql</code>, 没有安装的话, <code>option + return</code> 安装</p><h2 id="2-访问-mysql-测试"><a href="#2-访问-mysql-测试" class="headerlink" title="2. 访问 mysql 测试"></a>2. 访问 mysql 测试</h2><p>看看能否打印 <code>mysql</code> 的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 开启链接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'123'</span>,</span><br><span class="line">                           db=<span class="string">'python'</span>,port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 打开游标</span></span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 sql</span></span><br><span class="line">    cur.execute(<span class="string">'select version()'</span>)</span><br><span class="line"></span><br><span class="line">    version = cur.fetchone()</span><br><span class="line"></span><br><span class="line">    print(version)</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"发生异常"</span>)</span><br></pre></td></tr></table></figure><h2 id="3-查询-mysql"><a href="#3-查询-mysql" class="headerlink" title="3. 查询 mysql"></a>3. 查询 mysql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 开启链接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'123'</span>,</span><br><span class="line">                           db=<span class="string">'python'</span>,port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 打开游标</span></span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">"select id, name,age from t1 where name like 'tom8%'"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 sql</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取结果</span></span><br><span class="line">    all = cur.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> rec <span class="keyword">in</span> all:</span><br><span class="line">        print(rec)</span><br><span class="line">        <span class="comment"># print(str(rec[0]))</span></span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"发生异常"</span>)</span><br></pre></td></tr></table></figure><h2 id="4-大批量插入-mysql"><a href="#4-大批量插入-mysql" class="headerlink" title="4. 大批量插入 mysql"></a>4. 大批量插入 mysql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 开启链接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'123'</span>,</span><br><span class="line">                           db=<span class="string">'python'</span>,port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 打开游标</span></span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">10000</span>:</span><br><span class="line">        sql = <span class="string">"insert into t1(name,age) VALUES ('%s','%d')"</span> % (<span class="string">'tom'</span> + str(i), i % <span class="number">100</span>)</span><br><span class="line">        print(sql)</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"发生异常"</span>)</span><br></pre></td></tr></table></figure><h2 id="5-执行事务"><a href="#5-执行事务" class="headerlink" title="5. 执行事务"></a>5. 执行事务</h2><p>关闭 autocommit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 开启连接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'123'</span>,db=<span class="string">'python'</span>,port=<span class="number">3306</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭自动提交</span></span><br><span class="line">    conn.autocommit(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启事务</span></span><br><span class="line">    conn.begin()</span><br><span class="line">    <span class="comment"># 打开游标</span></span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    sql = <span class="string">"delete from t1 WHERE id &gt; 20000"</span></span><br><span class="line">    <span class="comment"># 改</span></span><br><span class="line">    sql = <span class="string">"update t1 set age = age -1 where age &gt;=50 "</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 聚合</span></span><br><span class="line">    sql = <span class="string">"select count(*) from t1 where age &lt; 20"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 sql</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 有结果的, 执行完后需要fetch结果</span></span><br><span class="line">    res = cur.fetchone()</span><br><span class="line">    print(res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交连接</span></span><br><span class="line">    conn.commit()</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"发生异常"</span>)</span><br><span class="line">    conn.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h1 id="二-Spark-环境使用-Python-操作-HBase"><a href="#二-Spark-环境使用-Python-操作-HBase" class="headerlink" title="二. Spark 环境使用 Python 操作 HBase"></a>二. Spark 环境使用 Python 操作 HBase</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">0.启动hbase集群</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">如果时钟不同步。</span><br><span class="line">$&gt;su root</span><br><span class="line">$&gt;xcall.sh <span class="string">"ntpdate asia.pool.ntp.org"</span></span><br><span class="line">当然, 也可以设置脚本自动同步, 详细见我的 hadoopHA 环境搭建</span><br><span class="line"></span><br><span class="line">1.在 HBase 目录下,启动hbase的thriftserver，满足和第三方应用通信。</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">$&gt;hbase-daemon.sh start thrift2</span><br><span class="line"></span><br><span class="line">2.查看WebUI</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">/<span class="comment"># webui端口 , 9090 rpc端口</span></span><br><span class="line">http://cs1:9095/        </span><br><span class="line"></span><br><span class="line">3.安装mac下thrift的编译器</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">brew install thrift</span><br><span class="line"></span><br><span class="line">4.下载并安装thrift的python模块.</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">import thrift  ==&gt;没有的话, option + <span class="built_in">return</span> 安装</span><br><span class="line"></span><br><span class="line">5.找到hbase.thrift文件进行编译，产生python文件。</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">使用以下命令进行编译</span><br><span class="line">cmd&gt; thrift  -o ./out -gen py hbase.thrift</span><br><span class="line">生成后的路径在这里: /Users/shixuanji/Documents/资源/Jar包/HBase/out/gen-py</span><br><span class="line"></span><br><span class="line">6.创建idea的下的新模块</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">7.创建python文件Demo1.py</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">8.复制生成python文件到idea下。</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">mythrift/hbase/..</span><br><span class="line"></span><br><span class="line">9.控制台环境测试</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">    移除spark/conf/core-site.xml | hdfs-site.xml | hive-site.xml文件</span><br><span class="line">    [scala] ~/apps/spark/bin</span><br><span class="line">    &lt;spark-shell&gt;</span><br><span class="line">    val rdd = sc.makeRDD(1 to 10)</span><br><span class="line">    rdd.map(e=&gt;(e,1))</span><br><span class="line"></span><br><span class="line">    [python] ~/apps/spark/bin</span><br><span class="line">    &lt;pyspark&gt;</span><br><span class="line">    arr = [1,2,3,4]</span><br><span class="line">    rdd = sc.parallelize(arr);</span><br><span class="line">    rdd.map(lambda e : (e,1))</span><br></pre></td></tr></table></figure><h2 id="2-具体代码"><a href="#2-具体代码" class="headerlink" title="2.具体代码"></a>2.具体代码</h2><h4 id="2-1-对-hbase-的增删改查"><a href="#2-1-对-hbase-的增删改查" class="headerlink" title="2.1 对 hbase 的增删改查"></a>2.1 对 hbase 的增删改查</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/HBasePythonDemo/BasicPyHbase.py" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/blob/master/Spark_Project/HBasePythonDemo/BasicPyHbase.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入thrift的python模块</span></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入自已编译生成的hbase python模块</span></span><br><span class="line"><span class="keyword">from</span> mythrift.hbase <span class="keyword">import</span> THBaseService</span><br><span class="line"><span class="keyword">from</span> mythrift.hbase.ttypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> mythrift.hbase.ttypes <span class="keyword">import</span> TResult</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Socket连接，到s201:9090</span></span><br><span class="line">transport = TSocket.TSocket(<span class="string">'cs1'</span>, <span class="number">9090</span>)</span><br><span class="line">transport = TTransport.TBufferedTransport(transport)</span><br><span class="line">protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">client = THBaseService.Client(protocol)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开传输端口!!!</span></span><br><span class="line">transport.open()</span><br><span class="line"></span><br><span class="line"><span class="comment"># put操作</span></span><br><span class="line">table = <span class="string">b'ns1:t1'</span></span><br><span class="line">row = <span class="string">b'row1'</span></span><br><span class="line">v1 = TColumnValue(<span class="string">b'f1'</span>, <span class="string">b'id'</span>, <span class="string">b'101'</span>)</span><br><span class="line">v2 = TColumnValue(<span class="string">b'f1'</span>, <span class="string">b'name'</span>, <span class="string">b'tomas'</span>)</span><br><span class="line">v3 = TColumnValue(<span class="string">b'f1'</span>, <span class="string">b'age'</span>, <span class="string">b'12'</span>)</span><br><span class="line">vals = [v1, v2, v3]</span><br><span class="line">put = TPut(row, vals)</span><br><span class="line">client.put(table, put)</span><br><span class="line">print(<span class="string">"okkkk!!"</span>)</span><br><span class="line">transport.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#get</span></span><br><span class="line">table = <span class="string">b'ns1:t1'</span></span><br><span class="line">rowkey=<span class="string">b"row1"</span></span><br><span class="line">col_id = TColumn(<span class="string">b"f1"</span>,<span class="string">b"id"</span>)</span><br><span class="line">col_name = TColumn(<span class="string">b"f1"</span>,<span class="string">b"name"</span>)</span><br><span class="line">col_age = TColumn(<span class="string">b"f1"</span>,<span class="string">b"age"</span>)</span><br><span class="line"></span><br><span class="line">cols = [col_id,col_name,col_age]</span><br><span class="line">get = TGet(rowkey,cols)</span><br><span class="line">res = client.get(table,get)</span><br><span class="line">print(bytes.decode(res.columnValues[<span class="number">0</span>].qualifier))</span><br><span class="line">print(bytes.decode(res.columnValues[<span class="number">0</span>].family))</span><br><span class="line">print(res.columnValues[<span class="number">0</span>].timestamp)</span><br><span class="line">print(bytes.decode(res.columnValues[<span class="number">0</span>].value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete</span></span><br><span class="line">table = <span class="string">b'ns1:t1'</span></span><br><span class="line">rowkey = <span class="string">b"row1"</span></span><br><span class="line">col_id = TColumn(<span class="string">b"f1"</span>, <span class="string">b"id"</span>)</span><br><span class="line">col_name = TColumn(<span class="string">b"f1"</span>, <span class="string">b"name"</span>)</span><br><span class="line">col_age = TColumn(<span class="string">b"f1"</span>, <span class="string">b"age"</span>)</span><br><span class="line">cols = [col_id, col_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造删除对象</span></span><br><span class="line">delete = TDelete(rowkey,cols)</span><br><span class="line">res = client.deleteSingle(table, delete)</span><br><span class="line">transport.close()</span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scan</span></span><br><span class="line">table = <span class="string">b'ns1:t12'</span></span><br><span class="line">startRow = <span class="string">b'1530357094900-43dwMLjxI5-0'</span></span><br><span class="line">stopRow = <span class="string">b'1530357183537-43dwMLjxI5-6'</span></span><br><span class="line">payload = TColumn(<span class="string">b"f1"</span>, <span class="string">b"payload"</span>)</span><br><span class="line"></span><br><span class="line">cols = [payload]</span><br><span class="line"></span><br><span class="line">scan = TScan(startRow=startRow,stopRow=stopRow,columns=cols)</span><br><span class="line"><span class="comment"># 这里如果不传 stopRow 就是扫描到结尾</span></span><br><span class="line">scan = TScan(startRow=startRow, columns=cols)</span><br><span class="line">r = client.getScannerResults(table,scan,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> r:</span><br><span class="line">    print(<span class="string">"============"</span>)</span><br><span class="line">    print(bytes.decode(x.columnValues[<span class="number">0</span>].qualifier))</span><br><span class="line">    print(bytes.decode(x.columnValues[<span class="number">0</span>].family))</span><br><span class="line">    print(x.columnValues[<span class="number">0</span>].timestamp)</span><br><span class="line">    print(bytes.decode(x.columnValues[<span class="number">0</span>].value))</span><br></pre></td></tr></table></figure><h4 id="2-2-将爬虫爬取的网页存入-hbase"><a href="#2-2-将爬虫爬取的网页存入-hbase" class="headerlink" title="2.2 将爬虫爬取的网页存入 hbase"></a>2.2 将爬虫爬取的网页存入 hbase</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/HBasePythonDemo/Crawler2HBase.py" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/blob/master/Spark_Project/HBasePythonDemo/Crawler2HBase.py</a></p><blockquote><p>   CrawerPageDao.py  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入thrift的python模块</span></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入自已编译生成的hbase python模块</span></span><br><span class="line"><span class="keyword">from</span> mythrift.hbase <span class="keyword">import</span> THBaseService</span><br><span class="line"><span class="keyword">from</span> mythrift.hbase.ttypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> mythrift.hbase.ttypes <span class="keyword">import</span> TResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">创建Socket连接，到s201:9090</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">transport = TSocket.TSocket(<span class="string">'cs1'</span>, <span class="number">9090</span>)</span><br><span class="line">transport = TTransport.TBufferedTransport(transport)</span><br><span class="line">protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">client = THBaseService.Client(protocol)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定义函数，保存网页</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savePage</span><span class="params">(url,page)</span>:</span></span><br><span class="line">    <span class="comment">#开启连接</span></span><br><span class="line">    transport.open()</span><br><span class="line">    <span class="comment">#对url进行base64编码，形成bytes,作为rowkey</span></span><br><span class="line">    urlBase64Bytes = base64.encodebytes(url.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># put操作</span></span><br><span class="line">    table = <span class="string">b'ns1:pages'</span></span><br><span class="line">    rowkey = urlBase64Bytes</span><br><span class="line">    v1 = TColumnValue(<span class="string">b'f1'</span>, <span class="string">b'page'</span>, page)</span><br><span class="line">    vals = [v1]</span><br><span class="line">    put = TPut(rowkey, vals)</span><br><span class="line">    client.put(table, put)</span><br><span class="line">    transport.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">判断网页是否存在</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span><span class="params">(url)</span>:</span></span><br><span class="line">    transport.open()</span><br><span class="line">    <span class="comment"># 对url进行base64编码，形成bytes,作为rowkey</span></span><br><span class="line">    urlBase64Bytes = base64.encodebytes(url.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    print(urlBase64Bytes)</span><br><span class="line"></span><br><span class="line">    table = <span class="string">b'ns1:pages'</span></span><br><span class="line">    rowkey = urlBase64Bytes</span><br><span class="line">    col_page = TColumn(<span class="string">b"f1"</span>,<span class="string">b"page"</span>)</span><br><span class="line"></span><br><span class="line">    cols = [col_page]</span><br><span class="line">    get = TGet(rowkey,cols)</span><br><span class="line">    res = client.get(table, get)</span><br><span class="line">    transport.close()</span><br><span class="line">    <span class="keyword">return</span> res.row <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p>  Crawler2HBase.py  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先创建 hbase 表: pages</span></span><br><span class="line"><span class="comment"># $hbase&gt; create 'ns1:pages','f1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> CrawerPageDao</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载网页方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#判断当前的网页是否已经下载</span></span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    pageBytes = resp.read()</span><br><span class="line">    resp.close</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CrawerPageDao.exists(url):</span><br><span class="line">        CrawerPageDao.savePage(url, pageBytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#解析网页的内容</span></span><br><span class="line">        pageStr = pageBytes.decode(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">#解析href地址</span></span><br><span class="line">        pattern = <span class="string">u'&lt;a[\u0000-\uffff&amp;&amp;&lt;sup&gt;[href]]*href="([\u0000-\uffff&amp;&amp;&lt;/sup&gt;"]*?)"'</span></span><br><span class="line">        res = re.finditer(pattern, pageStr)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">            addr = r.group(<span class="number">1</span>);</span><br><span class="line">            print(addr)</span><br><span class="line">            <span class="keyword">if</span> addr.startswith(<span class="string">"//"</span>):</span><br><span class="line">                addr = addr.replace(<span class="string">"//"</span>,<span class="string">"http://"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">#判断网页中是否包含自己的地址</span></span><br><span class="line">            <span class="keyword">if</span> addr.startswith(<span class="string">"http://"</span>) <span class="keyword">and</span> url != addr <span class="keyword">and</span> (<span class="keyword">not</span> CrawerPageDao.exists(addr)):</span><br><span class="line">                download(addr) ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        print(pageBytes.decode(<span class="string">"gbk"</span>, errors=<span class="string">'ignore'</span>));</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">download(<span class="string">"http://jd.com"</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="三-使用python实现spark的数据分析"><a href="#三-使用python实现spark的数据分析" class="headerlink" title="三. 使用python实现spark的数据分析"></a>三. 使用python实现spark的数据分析</h1><p><strong>参考这本书, data 等都有下载地址</strong> </p><blockquote><p>Apache Spark 2 for Beginners</p></blockquote><h2 id="1-环境准备-1"><a href="#1-环境准备-1" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p><strong>首先当前python环境必须安装了这些组件, 由于我的mac上已经装了, 这里就不再装了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.numpy</span><br><span class="line">    cmd&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy</span><br><span class="line"></span><br><span class="line">2.scipy</span><br><span class="line">    pip install -i https://pypi.tuna.tsinghua.edu.cn/simple scipy</span><br><span class="line"></span><br><span class="line">3.matplotpy</span><br><span class="line">    pip install -i https://pypi.tuna.tsinghua.edu.cn/simple matplotlib</span><br><span class="line">    python -m pip install -U pip setuptools</span><br><span class="line">    python -m pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="2-在-mac-环境的-Spark-下"><a href="#2-在-mac-环境的-Spark-下" class="headerlink" title="2.在 mac 环境的 Spark 下"></a>2.在 mac 环境的 Spark 下</h2><p>也可以在 Linux 下的图形界面中通过 terminal 操作.</p><p><strong>目录建议不要有中文,  否则会有一些警告甚至错误</strong></p><p><strong>我的目录在这里:</strong> <code>/Users/shixuanji/Documents/资源/Jar包/Spark/spark-2.1.3-bin-hadoop2.7/bin/pyspark</code></p><p>进入我的 <code>iTerm2</code>, 进入<code>pyspark</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#导入sql</span></span><br><span class="line">    <span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> Row</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    <span class="keyword">import</span> pylab <span class="keyword">as</span> P</span><br><span class="line">    plt.rcdefaults()        <span class="comment"># Restore the rc params from Matplotlib's internal defaults</span></span><br><span class="line">    dataDir =<span class="string">"file:///home/centos/ml-data/ml-1m/users.dat"</span></span><br><span class="line">    lines = sc.textFile(dataDir)</span><br><span class="line">    splitLines = lines.map(<span class="keyword">lambda</span> l: l.split(<span class="string">"::"</span>))</span><br><span class="line">    usersRDD = splitLines.map(<span class="keyword">lambda</span> p: Row(id=p[<span class="number">0</span>],gender=p[<span class="number">1</span>],age=int(p[<span class="number">2</span>]), occupation=p[<span class="number">3</span>], zipcode=p[<span class="number">4</span>]))</span><br><span class="line">    usersDF = spark.createDataFrame(usersRDD)</span><br><span class="line">    usersDF.createOrReplaceTempView(<span class="string">"users"</span>)</span><br><span class="line">    usersDF.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成直方图</span></span><br><span class="line">    ageDF = spark.sql(<span class="string">"SELECT age FROM users"</span>)</span><br><span class="line">    ageList = ageDF.rdd.map(<span class="keyword">lambda</span> p: p.age).collect()</span><br><span class="line">    ageDF.describe().show()</span><br><span class="line"></span><br><span class="line">    plt.hist(ageList)</span><br><span class="line">    plt.title(<span class="string">"Age distribution of the users\n"</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"Age"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Number of users"</span>)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#密度图</span></span><br><span class="line">    <span class="keyword">from</span> scipy.stats <span class="keyword">import</span> gaussian_kde</span><br><span class="line">    density = gaussian_kde(ageList)</span><br><span class="line">    xAxisValues = np.linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line">    density.covariance_factor = <span class="keyword">lambda</span> : <span class="number">.5</span></span><br><span class="line">    density._compute_covariance()</span><br><span class="line">    plt.title(<span class="string">"Age density plot of the users\n"</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"Age"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Density"</span>)</span><br><span class="line">    plt.plot(xAxisValues, density(xAxisValues))</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成嵌套子图</span></span><br><span class="line">    plt.subplot(<span class="number">121</span>)</span><br><span class="line">    plt.hist(ageList)</span><br><span class="line">    plt.title(<span class="string">"Age distribution of the users\n"</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"Age"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Number of users"</span>)</span><br><span class="line">    plt.subplot(<span class="number">122</span>)</span><br><span class="line">    plt.title(<span class="string">"Summary of distribution\n"</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"Age"</span>)</span><br><span class="line">    plt.boxplot(ageList, vert=<span class="keyword">False</span>)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#柱状图</span></span><br><span class="line">    occ10 = spark.sql(<span class="string">"SELECT occupation, count(occupation) as usercount FROM users GROUP BY occupation ORDER BY usercount DESC LIMIT 10"</span>)</span><br><span class="line">    occ10.show()</span><br><span class="line"></span><br><span class="line">    occTuple = occ10.rdd.map(<span class="keyword">lambda</span> p:(p.occupation,p.usercount)).collect()</span><br><span class="line">    occList, countList = zip(*occTuple)</span><br><span class="line">    occList</span><br><span class="line"></span><br><span class="line">    y_pos = np.arange(len(occList))</span><br><span class="line">    plt.barh(y_pos, countList, align=<span class="string">'center'</span>, alpha=<span class="number">0.4</span>)</span><br><span class="line">    plt.yticks(y_pos, occList)</span><br><span class="line">    plt.xlabel(<span class="string">'Number of users'</span>)</span><br><span class="line">    plt.title(<span class="string">'Top 10 user types\n'</span>)</span><br><span class="line">    plt.gcf().subplots_adjust(left=<span class="number">0.15</span>)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#堆栈条形图</span></span><br><span class="line">    occGender = spark.sql(<span class="string">"SELECT occupation, gender FROM users"</span>)</span><br><span class="line">    occGender.show()</span><br><span class="line"></span><br><span class="line">    occCrossTab = occGender.stat.crosstab(<span class="string">"occupation"</span>,<span class="string">"gender"</span>)</span><br><span class="line">    occupationsCrossTuple = occCrossTab.rdd.map(<span class="keyword">lambda</span> p:(p.occupation_gender,p.M, p.F)).collect()</span><br><span class="line">    occList, mList, fList = zip(*occupationsCrossTuple)</span><br><span class="line">    N = len(occList)</span><br><span class="line">    ind = np.arange(N)</span><br><span class="line">    width = <span class="number">0.75</span></span><br><span class="line">    p1 = plt.bar(ind, mList, width, color=<span class="string">'r'</span>)</span><br><span class="line">    p2 = plt.bar(ind, fList, width, color=<span class="string">'y'</span>, bottom=mList)</span><br><span class="line">    plt.ylabel(<span class="string">'Count'</span>)</span><br><span class="line">    plt.title(<span class="string">'Gender distribution by occupation\n'</span>)</span><br><span class="line">    plt.xticks(ind + width/<span class="number">2.</span>, occList, rotation=<span class="number">90</span>)</span><br><span class="line">    plt.legend((p1[<span class="number">0</span>], p2[<span class="number">0</span>]), (<span class="string">'Male'</span>, <span class="string">'Female'</span>))</span><br><span class="line">    plt.gcf().subplots_adjust(bottom=<span class="number">0.25</span>)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#饼图</span></span><br><span class="line">    occupationsBottom10 = spark.sql(<span class="string">"SELECT occupation,count(occupation) as usercount FROM users GROUP BY occupation ORDER BY usercount LIMIT 10"</span>)</span><br><span class="line">    occupationsBottom10Tuple = occupationsBottom10.rdd.map(<span class="keyword">lambda</span> p:(p.occupation,p.usercount)).collect()</span><br><span class="line">    occupationsBottom10List, countBottom10List =zip(*occupationsBottom10Tuple)</span><br><span class="line">    explode = (<span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0.15</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>)</span><br><span class="line">    plt.pie(countBottom10List, explode=explode,labels=occupationsBottom10List, autopct=<span class="string">'%1.1f%%'</span>, shadow=<span class="keyword">True</span>,startangle=<span class="number">90</span>)</span><br><span class="line">    plt.title(<span class="string">'Bottom 10 user types\n'</span>)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Python-访问-MySQL&quot;&gt;&lt;a href=&quot;#一-Python-访问-MySQL&quot; class=&quot;headerlink&quot; title=&quot;一. Python 访问 MySQL&quot;&gt;&lt;/a&gt;一. Python 访问 MySQL&lt;/h1&gt;&lt;h2 id=&quot;1-安
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>i-Spark-4</title>
    <link href="https://airpoet.github.io/2018/07/20/Spark/i-Spark-4/"/>
    <id>https://airpoet.github.io/2018/07/20/Spark/i-Spark-4/</id>
    <published>2018-07-20T14:11:10.340Z</published>
    <updated>2018-07-23T06:20:44.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-机器学习分类"><a href="#一-机器学习分类" class="headerlink" title="一. 机器学习分类"></a>一. 机器学习分类</h1><h2 id="1-监督学习"><a href="#1-监督学习" class="headerlink" title="1.监督学习"></a>1.监督学习</h2><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-20-141755.png" alt="image-20180720221754476"></p><ul><li>有训练数据集。规范数据。合规数据。产生推断函数.然后对新数据应用函数。 </li><li>director actor edit         Label </li></ul><h2 id="2-非监督学习"><a href="#2-非监督学习" class="headerlink" title="2.非监督学习"></a>2.非监督学习</h2><ul><li>没有训练数据。 </li><li>分组。 </li></ul><h2 id="3-推荐"><a href="#3-推荐" class="headerlink" title="3.推荐"></a>3.推荐</h2><ul><li>协同过滤. </li><li>猜测你喜欢. </li><li>电商。 </li></ul><hr><h1 id="二-Spark机器学习库"><a href="#二-Spark机器学习库" class="headerlink" title="二. Spark机器学习库"></a>二. Spark机器学习库</h1><p><strong>[Estimator]</strong></p><ul><li><p>运行在包含了feature和label(结果)的dataFrame之上，对数据进行训练创建model。</p></li><li><p>该模型用于以后的预测。</p></li></ul><p><strong>[Transformer]</strong></p><ul><li>将包含feature的Dataframe变换成了包含了预测的dataframe.</li><li>由Estimator创建的model就是Transformer。</li></ul><p><strong>[Parameter]</strong></p><ul><li>Estimator和Transformer使用的数据，通常和机器学习的算法相关。</li><li>Spark API给出了一致性API针对算法。</li></ul><p><strong>[Pipeline]</strong></p><ul><li>将Estimators和Transformers组合在一起，形成机器学习工作流.</li></ul><h4 id="机器学习应用步骤"><a href="#机器学习应用步骤" class="headerlink" title="机器学习应用步骤"></a>机器学习应用步骤</h4><ol><li>读取数据文件形成训练数据框 </li><li>创建LinearRegression并设置参数 </li><li>对训练数据进行模型拟合，完成评估管线. </li><li>创建包含测试数据的DataFrame，典型包含feature和label，可以通过比较预测标签和测试标签确认model是ok， </li><li>使用模型，对测试数据进行变换(应用模型),抽取feature ，label，predication. </li></ol><h1 id="三-代码实例"><a href="#三-代码实例" class="headerlink" title="三. 代码实例"></a>三. 代码实例</h1><h2 id="1-线性回归"><a href="#1-线性回归" class="headerlink" title="1. 线性回归"></a>1. 线性回归</h2><blockquote><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala/SparkMLDemo1.scala" target="_blank" rel="noopener">测试案例</a></p></blockquote><h2 id="2-逻辑回归"><a href="#2-逻辑回归" class="headerlink" title="2. 逻辑回归"></a>2. 逻辑回归</h2><blockquote><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala/LogicRegressWineClassifyDemo.scala" target="_blank" rel="noopener">酒质量预测</a></p></blockquote><blockquote><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala/SpamFilterDemo1.scala" target="_blank" rel="noopener">垃圾邮件过滤</a></p></blockquote><h2 id="3-ALS-最小二乘法"><a href="#3-ALS-最小二乘法" class="headerlink" title="3. ALS (最小二乘法)"></a>3. ALS (最小二乘法)</h2><blockquote><p>商品推荐: <a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala/RecommDemo.scala" target="_blank" rel="noopener">添加向指定用户推荐n款商品; 将指定的商品推荐给n个用户; 向所有用户推荐n种商品</a></p></blockquote><blockquote><p>电影推荐: <a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala/MovieRecommDemo.scala" target="_blank" rel="noopener">ALS算法电影推荐</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-机器学习分类&quot;&gt;&lt;a href=&quot;#一-机器学习分类&quot; class=&quot;headerlink&quot; title=&quot;一. 机器学习分类&quot;&gt;&lt;/a&gt;一. 机器学习分类&lt;/h1&gt;&lt;h2 id=&quot;1-监督学习&quot;&gt;&lt;a href=&quot;#1-监督学习&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="MLLib" scheme="https://airpoet.github.io/categories/Spark/MLLib/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="MLLib" scheme="https://airpoet.github.io/tags/MLLib/"/>
    
      <category term="机器学习" scheme="https://airpoet.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>i-Spark-3</title>
    <link href="https://airpoet.github.io/2018/07/20/Spark/i-Spark-3/"/>
    <id>https://airpoet.github.io/2018/07/20/Spark/i-Spark-3/</id>
    <published>2018-07-20T12:06:12.974Z</published>
    <updated>2018-07-20T14:11:21.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Spark-Streaming-简介"><a href="#一-Spark-Streaming-简介" class="headerlink" title="一. Spark Streaming 简介"></a>一. Spark Streaming 简介</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><ul><li>是 <code>spark core</code> 的扩展，针对实时数据流处理,具有可扩展、高吞吐量、容错.</li><li>数据可以是来自于<code>kafka, flume, tcpsocket</code>,使用高级函数(map reduce filter ,join , window)</li><li>处理的数据可以推送到 <code>database</code>, <code>hdfs</code>, 针对数据流处理可以应用到机器学习和图计算中。</li></ul><h2 id="2-DStream-Discretized-Stream-离散流"><a href="#2-DStream-Discretized-Stream-离散流" class="headerlink" title="2. DStream (Discretized Stream ) 离散流"></a>2. DStream (Discretized Stream ) 离散流</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念:"></a><strong>概念:</strong></h4><ul><li>离散流,表示的是连续的数据流。连续的RDD序列。准实时计算。</li><li>通过kafka、flume等输入数据流产生，也可以通过对其他DStream进行高阶变换产生。</li><li>在内部，DStream表现为RDD序列。</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a><strong>注意事项:</strong></h4><ul><li>启动上下文之后，不能启动新的离散流</li><li>上下文停止后不能restart</li><li>同一 JVM只有一个 active 的 StreamingContext</li><li>停止StreamingContext会一同stop掉SparkContext，如若只停止StreamingContext. <code>ssc.stop(false|true);</code> :TODO</li><li>SparkContext可以创建多个StreamingContext, 创建新的之前停掉旧的。</li></ul><h4 id="DStream和Receiver"><a href="#DStream和Receiver" class="headerlink" title="DStream和Receiver:"></a>DStream和Receiver:</h4><ul><li><strong>介绍</strong><ul><li>Receiver是接受者，从source接受数据，存储在内存中共spark处理。</li></ul></li><li><strong>源</strong><ul><li>基本源:fileSystem | socket,内置API支持。</li><li>高级源:kafka | flume | …，需要引入pom.xml依赖.</li></ul></li><li><strong>注意</strong><ul><li>使用local模式时，不能使用一个线程.使用的local[n]，n需要大于receiver的个数。 </li></ul></li></ul><hr><h1 id="二-体验Spark-Streaming"><a href="#二-体验Spark-Streaming" class="headerlink" title="二. 体验Spark Streaming"></a>二. 体验Spark Streaming</h1><h2 id="1-引入-pom-依赖"><a href="#1-引入-pom-依赖" class="headerlink" title="1.引入 pom 依赖"></a>1.引入 pom 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Scala-操作代码-in-IDEA"><a href="#2-Scala-操作代码-in-IDEA" class="headerlink" title="2. Scala 操作代码 in IDEA"></a>2. Scala 操作代码 in IDEA</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//local[n] n &gt; 1</span></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"NetworkWordCount"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Spark流上下文,批次时长是1s</span></span><br><span class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建socket文本流</span></span><br><span class="line"><span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压扁</span></span><br><span class="line"><span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//变换成对偶</span></span><br><span class="line"><span class="keyword">val</span> pairs = words.map((_,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 化简</span></span><br><span class="line"><span class="keyword">val</span> count = pairs.reduceByKey(_+_) ;</span><br><span class="line">count.print()</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">ssc.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待结束</span></span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></table></figure><h2 id="3-通过-nc-与-Spark-交互"><a href="#3-通过-nc-与-Spark-交互" class="headerlink" title="3. 通过 nc 与 Spark 交互"></a>3. 通过 nc 与 Spark 交互</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1&gt; 启动 nc</span><br><span class="line">nc -lk 9999</span><br><span class="line"></span><br><span class="line">2&gt; 运行 Spark Streaming 代码, 开启监听 localhost:9999 </span><br><span class="line"></span><br><span class="line">3&gt; 在 nc 命令行输入单词 </span><br><span class="line">$&gt; hello world </span><br><span class="line">$&gt; ....</span><br><span class="line"></span><br><span class="line">$&gt; 观察 spark 控制台打印</span><br><span class="line"></span><br><span class="line">PS: 把 log4j 文件放到项目的 resources 下, 设置log4j 的打印级别为 WARN, 否则很难观察清楚</span><br></pre></td></tr></table></figure><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/resources/log4j.properties" target="_blank" rel="noopener">log4j 文件请参考</a></p><h2 id="4-导出-Spark-Streaming-为-jar-包-放到-Linux-下运行"><a href="#4-导出-Spark-Streaming-为-jar-包-放到-Linux-下运行" class="headerlink" title="4.导出 Spark Streaming 为 jar 包, 放到 Linux 下运行"></a>4.导出 Spark Streaming 为 jar 包, 放到 Linux 下运行</h2><p><strong>注意: 直接spark-submit   或者 spark-submit –help , 会弹出帮助</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; spark-submit --name wcstreaming </span><br><span class="line">                --<span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">rox</span>.<span class="title">spark</span>.<span class="title">scala</span>.<span class="title">SparkStreamingDemo</span></span></span><br><span class="line"><span class="class">                <span class="title">--master</span> <span class="title">spark</span></span>:<span class="comment">//cs1:7077</span></span><br><span class="line">                <span class="type">SparkDemo1</span><span class="number">-1.0</span>-<span class="type">SNAPSHOT</span>.jar</span><br></pre></td></tr></table></figure><hr><h1 id="三-Kafka-与-Spark-Streaming-整合"><a href="#三-Kafka-与-Spark-Streaming-整合" class="headerlink" title="三. Kafka 与 Spark Streaming 整合"></a>三. Kafka 与 Spark Streaming 整合</h1><h2 id="1-回忆Kafka"><a href="#1-回忆Kafka" class="headerlink" title="1. 回忆Kafka"></a>1. <strong>回忆Kafka</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1&gt; 启动 kafka,cs2~cs4  前提先启动 zk</span><br><span class="line">$&gt; kafka-server-start.sh /home/ap/apps/kafka/config/server.properties</span><br><span class="line"></span><br><span class="line">2&gt; 查看主题: </span><br><span class="line">$&gt; kafka-topics.sh --zookeeper cs1:2181 --list</span><br><span class="line"></span><br><span class="line">3&gt; 开启消费者</span><br><span class="line">[ap@cs4]~%&gt;  kafka-console-consumer.sh --zookeeper cs3:2181 --topic kafka-test</span><br><span class="line"></span><br><span class="line">4&gt; 开启生产者</span><br><span class="line">[ap@cs2]~%&gt;  kafka-console-producer.sh --broker-list cs4:9092 --topic kafka-test </span><br><span class="line"></span><br><span class="line">&gt;&gt; 在生产者发送消息, 查看消费者</span><br></pre></td></tr></table></figure><h2 id="2-使用-Java编写-Kafka-SparkStreaming-代码"><a href="#2-使用-Java编写-Kafka-SparkStreaming-代码" class="headerlink" title="2. 使用 Java编写 Kafka-SparkStreaming 代码"></a>2. 使用 Java编写 Kafka-SparkStreaming 代码</h2><p><a href="https://github.com/airpoet/bigdata/blob/068fbf3e23f6514fadcef10cef5b6ce8d87318d8/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/KafkaSparkstreamingDemo.java" target="_blank" rel="noopener">具体见 github</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rox.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.TaskContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.TopicPartition;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaSparkstreamingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">        conf.setAppName(<span class="string">"KafkaSparkstreamingDemo"</span>);</span><br><span class="line">        conf.setMaster(<span class="string">"local[4]"</span>);</span><br><span class="line">        <span class="comment">//创建Spark流应用上下文</span></span><br><span class="line">        JavaStreamingContext streamingContext = <span class="keyword">new</span> JavaStreamingContext(conf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; kafkaParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        kafkaParams.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"cs2:9092,cs3:9092"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"key.deserializer"</span>, StringDeserializer.class);</span><br><span class="line">        kafkaParams.put(<span class="string">"value.deserializer"</span>, StringDeserializer.class);</span><br><span class="line">        kafkaParams.put(<span class="string">"group.id"</span>, <span class="string">"g6"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"latest"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"enable.auto.commit"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; topics = Arrays.asList(<span class="string">"kafka-test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出 kafka stream</span></span><br><span class="line">        <span class="keyword">final</span> JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; stream =</span><br><span class="line">                KafkaUtils.createDirectStream(</span><br><span class="line">                        streamingContext,</span><br><span class="line">                        LocationStrategies.PreferConsistent(),</span><br><span class="line">                        ConsumerStrategies.&lt;String, String&gt;Subscribe(topics, kafkaParams)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 压扁</span></span><br><span class="line">        JavaDStream&lt;String&gt; wordDS = stream.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;ConsumerRecord&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(ConsumerRecord&lt;String, String&gt; r)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String value = r.value();</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                String[] arr = value.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">                    list.add(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> list.iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 映射成元祖 (拼1)</span></span><br><span class="line">        JavaPairDStream&lt;String,Integer&gt; pairDS = wordDS.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(s,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">              </span><br><span class="line">        <span class="comment">// 聚合</span></span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; countDS = pairDS.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer v1, Integer v2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> v1 + v2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印计算结果</span></span><br><span class="line">        countDS.print();</span><br><span class="line"></span><br><span class="line">        streamingContext.start();</span><br><span class="line"></span><br><span class="line">        streamingContext.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-跨单位时间-单位距离-Window-跨批次-updateStateByKey"><a href="#四-跨单位时间-单位距离-Window-跨批次-updateStateByKey" class="headerlink" title="四.  跨单位时间,单位距离 (Window) ,  跨批次(updateStateByKey)"></a>四.  跨单位时间,单位距离 (Window) ,  跨批次(updateStateByKey)</h1><h2 id="1-Window"><a href="#1-Window" class="headerlink" title="1. Window"></a>1. Window</h2><h4 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数:"></a><strong>关键参数</strong>:</h4><p><strong>batch interval</strong> </p><ul><li>批次的间隔. </li></ul><p><strong>windows length</strong></p><ul><li>窗口长度,跨批次。是批次的整数倍。 </li></ul><p><strong>slide interval</strong> </p><ul><li>滑动间隔,窗口计算的间隔时间，有时批次interval的整倍数。 </li></ul><p><br></p><h4 id="关键代码示例"><a href="#关键代码示例" class="headerlink" title="关键代码示例:"></a>关键代码示例:</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/WCSparkStreamWindowApp.java" target="_blank" rel="noopener">具体查看 github</a></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//聚合</span></span><br><span class="line"><span class="comment">/** 统计同一 window 下的 key 的聚合 (用的比较多...)</span></span><br><span class="line"><span class="comment">     def reduceByKeyAndWindow(reduceFunc: Function2[V, V, V],</span></span><br><span class="line"><span class="comment">             windowDuration: Duration,</span></span><br><span class="line"><span class="comment">             slideDuration: Duration): JavaPairDStream[K, V]</span></span><br><span class="line"><span class="comment">    &gt;&gt;&gt; Return a new DStream by applying `reduceByKey` over a sliding window</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">JavaPairDStream</span>&lt;<span class="type">String</span>,<span class="type">Integer</span>&gt; countDS = pairDS.reduceByKeyAndWindow(<span class="keyword">new</span> <span class="type">Function2</span>&lt;<span class="type">Integer</span>, <span class="type">Integer</span>, <span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">    public <span class="type">Integer</span> call(<span class="type">Integer</span> v1, <span class="type">Integer</span> v2) &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="type">Seconds</span>.apply(<span class="number">6</span>),<span class="type">Seconds</span>.apply(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="2-updateStateByKey"><a href="#2-updateStateByKey" class="headerlink" title="2. updateStateByKey"></a>2. updateStateByKey</h2><p><strong><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/WordCountSparkStreamingJava.java" target="_blank" rel="noopener">跨批次统计, 会一直累加, 具体查看 github</a></strong></p><h4 id="关键代码示例-1"><a href="#关键代码示例-1" class="headerlink" title="关键代码示例"></a>关键代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可用于跨批次统计 updateStateByKeya</span></span><br><span class="line">JavaPairDStream&lt;String,Integer&gt; jps = pairDS.updateStateByKey(<span class="keyword">new</span> Function2&lt;List&lt;Integer&gt;, Optional&lt;Integer&gt;, Optional&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Integer&gt; <span class="title">call</span><span class="params">(List&lt;Integer&gt; v1, Optional&lt;Integer&gt; v2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Integer newCount = v2.isPresent() ? v2.get() : <span class="number">0</span>  ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"old value : "</span> + newCount);</span><br><span class="line">        <span class="keyword">for</span>(Integer i : v1)&#123;</span><br><span class="line">            System.out.println(<span class="string">"new value : "</span> + i);</span><br><span class="line">            newCount = newCount +  i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(newCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="五-spark-streaming中的容错实现-※"><a href="#五-spark-streaming中的容错实现-※" class="headerlink" title="五. spark streaming中的容错实现 ※"></a>五. spark streaming中的容错实现 ※</h1><h2 id="1-生产环境中spark-streaming的job的注意事项"><a href="#1-生产环境中spark-streaming的job的注意事项" class="headerlink" title="1.生产环境中spark streaming的job的注意事项"></a>1.生产环境中spark streaming的job的注意事项</h2><p><strong>避免单点故障。</strong></p><p><strong>Driver</strong>               </p><ul><li>驱动,运行用户编写的程序代码的主机。 </li></ul><p><strong>Executors</strong>        </p><ul><li>执行的spark driver提交的job,内部含有附加组件比如receiver</li><li>receiver接受数据并以block方式保存在memory中，同时，将数据块复制到其他executor中，以备容错。</li><li>每个批次末端会形成新的DStream，交给 下游处理。</li><li>如果receiver故障，其他执行器中的receiver会启动进行数据的接收。 </li></ul><p><strong>checkpoint</strong></p><ul><li>检查点</li><li>用于容错处理, 设置后, 会把数据存储到检查点目录,   当出问题后,  从检查点恢复.</li></ul><h2 id="2-通过checkpoint-实现-Spark-Streaming-的容错"><a href="#2-通过checkpoint-实现-Spark-Streaming-的容错" class="headerlink" title="2. 通过checkpoint 实现 Spark Streaming 的容错"></a>2. 通过<strong>checkpoint</strong> 实现 Spark Streaming 的容错</h2><p>如果<strong>executor故障</strong>，所有未被处理的数据都会丢失，解决办法可以通过wal (hbase,hdfs/WALs)方式将数据预先写入到hdfs或者s3.</p><p>如果<strong>Driver故障</strong>，driver程序就会停止，所有executor都是丢失连接，停止计算过程。</p><p><strong>解决办法需要配置和编程。</strong></p><ul><li>配置Driver程序自动重启，使用特定的clustermanager实现。 :TODO   how?</li><li><strong>重启时，从宕机的地方进行重启，通过检查点机制可以实现该功能。</strong><ul><li>检查点目录可以是本地，可以是hdfs, <strong>生产中一般都是 hdfs</strong></li><li><strong>不再使用new方式</strong>创建<code>SparkStreamContext</code>对象，而是通过工厂方式<code>JavaStreamingContext.getOrCreate()</code>方法创建</li><li>上下文对象,首先会检查检查点目录，看是否有job运行，没有就new新的。</li></ul></li><li>编写容错测试代码,计算过程编写到 <code>Function0</code> 的<code>call</code>方法中。 </li></ul><p><strong>知识点</strong>: Function0, 1, 2, 3, 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为何要使用 Function0?</span><br><span class="line">    因为 JavaStreamingContext.getOrCreate(path,function0) 的第二个参数就是 Function0</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A zero-argument function that returns an R.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function0</span>&lt;<span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="function">R <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/SparkStreamingCheckpointDemo.java" target="_blank" rel="noopener">Java 代码, 具体见 github</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.rox.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function0;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingCheckpointDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create a factory object that can create and setup a new JavaStreamingContext</span></span><br><span class="line"><span class="comment">         * 可以使用 Function0</span></span><br><span class="line"><span class="comment">         * A zero-argument function that returns an R.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Function0&lt;JavaStreamingContext&gt; contextFactory = <span class="keyword">new</span> Function0&lt;JavaStreamingContext&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 首次创建 context 时, 调用此方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> JavaStreamingContext <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">                conf.setMaster(<span class="string">"local[4]"</span>);</span><br><span class="line">                conf.setAppName(<span class="string">"SparkStreamingCheckpointDemo"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建流上下文对象</span></span><br><span class="line">                JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(conf, <span class="keyword">new</span> Duration(<span class="number">2</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Create an input stream from network source hostname:port.</span></span><br><span class="line">                JavaDStream&lt;String&gt; lines = jsc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// =============== 变换代码 ===============</span></span><br><span class="line">                <span class="comment">// 设置一个窗口时长为1天, 滚动间隔为 2s</span></span><br><span class="line">                JavaDStream&lt;Long&gt; longJavaDStream = lines.countByWindow(<span class="keyword">new</span> Duration(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>), <span class="keyword">new</span> Duration(<span class="number">2</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">                longJavaDStream.print();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置检查点 目录</span></span><br><span class="line">                jsc.checkpoint(<span class="string">"file:///Users/shixuanji/Documents/Code/temp/check"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回流上下文对象</span></span><br><span class="line">                <span class="keyword">return</span> jsc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *   def getOrCreate(</span></span><br><span class="line"><span class="comment">         checkpointPath: String,</span></span><br><span class="line"><span class="comment">         creatingFunc: JFunction0[JavaStreamingContext]</span></span><br><span class="line"><span class="comment">         ): JavaStreamingContext</span></span><br><span class="line"><span class="comment">         注意: 第2个参数是一个 Function0对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 失败后, 重新创建时, 会经过检查点</span></span><br><span class="line">        JavaStreamingContext context = JavaStreamingContext.getOrCreate(<span class="string">"file:///Users/shixuanji/Documents/Code/temp/check"</span>, contextFactory);</span><br><span class="line"></span><br><span class="line">        context.start();</span><br><span class="line">        context.awaitTermination();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Spark-Streaming-简介&quot;&gt;&lt;a href=&quot;#一-Spark-Streaming-简介&quot; class=&quot;headerlink&quot; title=&quot;一. Spark Streaming 简介&quot;&gt;&lt;/a&gt;一. Spark Streaming 简介&lt;/h1
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://airpoet.github.io/categories/Spark/SparkStreaming/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://airpoet.github.io/tags/SparkStreaming/"/>
    
  </entry>
  
  <entry>
    <title>i-Spark-2</title>
    <link href="https://airpoet.github.io/2018/07/20/Spark/i-Spark-2/"/>
    <id>https://airpoet.github.io/2018/07/20/Spark/i-Spark-2/</id>
    <published>2018-07-20T09:03:11.064Z</published>
    <updated>2018-07-23T02:59:09.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Spark-核心-API"><a href="#一-Spark-核心-API" class="headerlink" title="一. Spark 核心 API"></a>一. Spark 核心 API</h1><p><strong>[SparkContext]</strong></p><ul><li>连接到spark集群,入口点.</li></ul><p><strong>[HadoopRDD]</strong></p><ul><li>读取hadoop上的数据，</li></ul><p><strong>[MapPartitionsRDD]</strong></p><ul><li>针对父RDD的每个分区提供了函数构成的新类型RDD.</li></ul><p><strong>[PairRDDFunctions]</strong></p><ul><li>对偶RDD函数类。</li><li>可用于KV类型RDD的附加函数。可以通过隐式转化得到.</li></ul><p><strong>[ShuffleRDD]</strong></p><ul><li>从Shuffle中计算结果的RDD.</li></ul><p><strong>[RDD]</strong></p><ul><li>是分区的集合, 弹性分布式数据集, 不可变的数据分区集合.</li><li>基本操作(map filter , persist)</li><li><strong>特点:</strong> <ul><li>分区列表                    //数据</li><li>应用给每个切片的计算函数    //行为</li><li>到其他RDD的依赖列表            //依赖关系</li><li>(可选)针对kv类型RDD的分区类</li><li>(可选)首选位置列表</li></ul></li></ul><p><strong>[DAGScheduler]</strong></p><ul><li>高级调度器层面，实现按照阶段(stage) 进行 shuffle</li><li>对每个JOB的各阶段(stage)计算有向无环图(DAG)，并且跟踪RDD和每个阶段的输出。</li><li>找出最小调度运行作业, 将Stage对象以TaskSet方式提交给底层的调度器。</li><li>底层调度器实现TaskScheduler, 进而在cluster上运行job.</li><li>TaskSet已经包含了全部的单独的task，这些Task都能够基于cluster的数据进行正确运行。</li><li>Stage通过在需要shuffle的边界处将RDD打碎来创建Stage对象。</li><li>具有<code>窄依赖</code>的RDD操作(比如map /filter)被管道化至一个taskset中.</li><li>而具有shuffle依赖的操作则包含多个Stage(一个进行输出，另一个进行输入)</li><li>最后，每个stage都有一个针对其他stage的shuffle依赖，可以计算多个操作。</li><li>DAG调度器检测首选位置来运行task，通过基于当前的缓存状态，并传递给底层的task调度器来实现。根据shuffle的输出是否丢失处理故障问题。</li><li>不是因为随机文件丢失造成的故障会由任务调度程序处理，它在取消整个stage前花一小段时间重试每个任务</li><li>为了容错，同一stage可能会运行多次，称之为”attempts”,如果task调度器报告了一个故障(该故障是由于上一个stage丢失输出文件而导致的)DAG调度就会重新提交丢失的stage。这个通过具有 FetchFailed的CompletionEvent对象或者ExecutorLost进行检测的。</li><li>DAG调度器会等待一段时间看其他节点或task是否失败，然后对丢失的stage重新提交taskset，计算丢失的task。</li></ul><p><br></p><h4 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a><strong>术语介绍</strong></h4><p><strong>[ job ]</strong></p><ul><li>提交给调度的顶层的工作项目，由 <strong>ActiveJob</strong> 表示。</li><li>是Stage集合。</li></ul><p><u><strong>[Stage]</strong></u></p><ul><li>是task的集合，计算job中的中间结果。同一RDD的每个分区都会应用相同的计算函数。</li><li>在shuffle的边界处进行隔离(因此引入了隔断，需要上一个stage完成后，才能得到output结果)</li><li><strong>Stage有两个子类:</strong><ul><li>1) ResultStage，用于执行action动作的最终stage。</li><li>2) ShuffleMapStage,  对shuffle进行输出文件的写操作的。如果job重用了同一个rdd的话，stage通常可以跨越多个job实现共享。</li></ul></li><li>并行任务的集合，都会计算同一函数。所有task有着同样的shuffle依赖，调度器运行的task DAG 在shuffle边界处划分成不同阶段。调度器以拓扑顺序执行.</li><li>每个stage可以shuffleMapStage,该阶段下输出是下一个stage的输入，也可以是resultStage,该阶段 task直接执行spark action。对于shuffleMapStage，需要跟踪每个输出分区所在的节点。</li><li>每个stage都有FirstJobId,区分于首次提交的id</li></ul><p><strong>[ShuffleMapStage]</strong></p><ul><li>产生输出数据，在每次shuffle之前发生。内部含有shuffleDep字段,有相关字段记录产生多少输出以及多少输出可用</li><li>DAGScheduler.submitMapStage()方法可以单独提交submitMapStage().</li></ul><p><strong>[ResultStage]</strong></p><ul><li>该阶段在RDD的一些分区中应用函数来计算Action的结果。有些stage并不会在所有分区上执行。例如first(),lookup();</li></ul><p><u><strong>[Task]</strong></u></p><ul><li>单独的工作单元，每个发送给一台主机。</li></ul><p><strong>[Cache tracking]</strong></p><ul><li>Dag调度器找出哪些RDD被缓存，避免不必要的重复计算，同时，也会记住哪些shuffleMap已经输出了结果，避免map端shuffle的重复处理。</li></ul><p><strong>[Preferred locations]</strong></p><ul><li>dag调度器根据rdd的中首选位置属性计算task在哪里运行。</li></ul><p><strong>[Cleanup]</strong></p><ul><li>运行的job如果完成就会清楚数据结构避免内存泄漏，主要是针对耗时应用。</li></ul><p><strong>[ActiveJob]</strong></p><ul><li>在Dag调度器中运行job。作业分为两种类型，<ul><li>1) result job，计算ResultStage来执行action.</li><li>2 )map-state job,为shuffleMapState结算计算输出结果以供下游stage使用。主要使用finalStage字段进行类型划分。</li></ul></li><li>job只跟踪客户端提交的”leaf” stage，通过调用Dag调度器的submitjob或者- submitMapStage()方法实现.</li><li>job类型引发之前stage的执行，而且多个job可以共享之前的stage。这些依赖关系由DAG调度器内部管理。</li></ul><p><strong>[LiveListenerBus]</strong></p><ul><li>异步传输spark监听事件到监听器事件集合中。</li></ul><p><strong>[EventLoop]</strong></p><ul><li>从caller接受事件，在单独的事件线程中处理所有事件，该类的唯一子类是DAGSchedulerEventProcessLoop。</li></ul><p><strong>[LiveListenerBus]</strong></p><ul><li>监听器总线，存放Spark监听器事件的队列。用于监控。</li></ul><p><strong>[OutputCommitCoordinator]</strong></p><ul><li>输出提交协调器.决定提交的输出是否进入hdfs。</li></ul><p><strong>[TaskScheduler]</strong></p><ul><li>底层的调度器，唯一实现TaskSchedulerImpl。可插拔，同Dag调度器接受task，发送给cluster，运行任务，失败重试，返回事件给DAG调度器。</li></ul><p><strong>[TaskSchedulerImpl]</strong></p><ul><li>TaskScheduler调度器的唯一实现，通过BackendScheduler(后台调度器)实现各种类型集群的任务调度。</li></ul><p><strong>[SchedulerBackend]</strong></p><ul><li><p>可插拔的后台调度系统，本地调度，mesos调度，。。。</p></li><li><p>在SchedulerBackend下方，实现有三种</p><ul><li>LocalSchedulerBackend  本地后台调度器,启动task.</li><li><p>StandaloneSchedulerBackend  独立后台调度器</p></li><li><p>CoarseGrainedSchedulerBackend    粗粒度后台调度器</p></li></ul></li></ul><p><strong>[Executor]</strong></p><ul><li>spark程序执行者，通过线程池执行任务。</li></ul><p><strong>[Dependency]:依赖</strong></p><ul><li><p><strong>NarrowDependency</strong>:    子RDD的每个分区依赖于父RDD的少量分区, 也叫完全依赖</p><p>​         | </p><p>​        / \ </p><p>​        — </p><p>​         |—-    OneToOneDependency        //父子RDD之间的分区存在一对一关系。 </p><p>​         |—-    RangeDependency            //父RDD的一个分区范围和子RDD存在一对一关系。 </p><p>​         |—-    PruneDependency            // 在PartitionPruningRDD和其父RDD之间的依赖,   子RDD包含了父RDD的分区子集。 </p></li><li><p><strong>ShuffleDependency</strong>:    在shuffle阶段输出时的一种依赖, 属于一种宽依赖, 也叫部分依赖</p></li></ul><h1 id="二-Spark-其它概念"><a href="#二-Spark-其它概念" class="headerlink" title="二. Spark 其它概念"></a>二. Spark 其它概念</h1><h2 id="1-创建-Spark-上下文-Context"><a href="#1-创建-Spark-上下文-Context" class="headerlink" title="1. 创建 Spark 上下文(Context)"></a>1. 创建 Spark 上下文(Context)</h2><p><strong>[本地模式,通过线程模拟]</strong></p><blockquote><p>​    本地后台调度器 </p><p>​    spark local </p><p>​    spark local[3]                            //3线程,模拟cluster集群 </p><p>​    spark local[*]                            //匹配cpu个数， </p><p>​    spark local[3,2]                        //3:3个线程，2为maxFailures。 </p><ul><li>// local[*, M] means the number of cores on the computer with M failures</li><li>// local[N, M] means exactly N threads with M failures </li><li>0和1等价，只执行一次, 失败后不会重试</li></ul></blockquote><p><strong>[相当于伪分布式]</strong></p><blockquote><p>​    StandaloneSchedulerBackend </p><p>​    spark local-cluster[N, cores, memory]    //模拟spark集群。  </p></blockquote><p><strong>[完全分布式]</strong></p><blockquote><p>​    StandaloneSchedulerBackend </p><p>​    spark <a href="spark://cs1:7077" target="_blank" rel="noopener">spark://cs1:7077</a>                    //连接到spark集群上. </p></blockquote><h2 id="2-RDD-持久化"><a href="#2-RDD-持久化" class="headerlink" title="2. RDD 持久化"></a>2. RDD 持久化</h2><ul><li><p>跨操作进行RDD的内存式存储。 </p></li><li><p>持久化RDD时，节点上的每个分区都会保存操内存中,以备在其他操作中进行重用。 </p></li><li><p>缓存技术是迭代式计算和交互式查询的重要工具。 </p></li><li><p>使用persist()和cache()进行rdd的持久化。 </p></li><li><p>cache()是persist()一种. </p></li><li><p>action第一次计算时会发生persist(). </p></li><li><p>spark的cache是容错的，如果rdd的任何一个分区丢失了，都可以通过最初创建rdd的进行重新计算。 </p></li><li><p>persist可以使用不同的存储级别进行持久化。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MEMORY_ONLY            //只在内存</span><br><span class="line">MEMORY_AND_DISK</span><br><span class="line">MEMORY_ONLY_SER        //内存存储(串行化)</span><br><span class="line">MEMORY_AND_DISK_SER </span><br><span class="line">DISK_ONLY            //硬盘                        // 默认的路径似乎在程序执行完后自己会删掉??</span><br><span class="line">MEMORY_ONLY_2        //带有副本 </span><br><span class="line">MEMORY_AND_DISK_2    //快速容错。</span><br><span class="line">OFF_HEAP             // 离堆内存</span><br></pre></td></tr></table></figure></li><li><p>删除持久化数据 <code>rdd.unpersist();</code></p></li></ul><h2 id="3-数据传递"><a href="#3-数据传递" class="headerlink" title="3.数据传递"></a>3.数据传递</h2><ul><li>map(),filter()高级函数中访问的对象被串行化到各个节点。每个节点都有一份拷贝。 </li><li>变量值并不会回传到driver程序。 </li></ul><h2 id="4-共享变量"><a href="#4-共享变量" class="headerlink" title="4.共享变量"></a>4.共享变量</h2><p> <strong>spark通过广播变量和累加器实现共享变量。</strong></p><p><br></p><p><strong>[广播变量]</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建广播变量</span></span><br><span class="line"><span class="keyword">val</span> bc1 = sc.broadcast(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">bc1.value</span><br></pre></td></tr></table></figure><p><strong>[累加器]</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建累加器</span></span><br><span class="line"><span class="keyword">val</span> ac1 = sc.longaccumulator(<span class="string">"ac1"</span>)</span><br><span class="line">ac1.value</span><br><span class="line">sc.parallelize(<span class="number">1</span> to <span class="number">10</span>).map(_ * <span class="number">2</span>).map(e=&gt;&#123;ac1.add(<span class="number">1</span>) ; e&#125;).reduce(_+_)</span><br><span class="line">ac1.value            <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2 id="5-通过-Spark-实现-PI-的分布式计算"><a href="#5-通过-Spark-实现-PI-的分布式计算" class="headerlink" title="5.通过 Spark 实现 PI 的分布式计算"></a>5.通过 Spark 实现 PI 的分布式计算</h2><p>:TODO 计算出来的结果不精准 ??</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sc.parallelize(<span class="number">1</span> to <span class="number">100000000</span>).map(e=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">1</span>f / (<span class="number">2</span> * e - <span class="number">1</span>) ;</span><br><span class="line">    <span class="keyword">val</span> b = <span class="keyword">if</span> (e % <span class="number">2</span> == <span class="number">0</span>) <span class="number">-1</span> <span class="keyword">else</span> <span class="number">1</span> ;</span><br><span class="line">    a * b * <span class="number">4</span></span><br><span class="line">&#125;).reduce(_+_)</span><br><span class="line"></span><br><span class="line">res25: <span class="type">Float</span> = <span class="number">3.1415968</span>  </span><br><span class="line">==&gt; 用了一个亿算出来这个...</span><br></pre></td></tr></table></figure><h1 id="三-SparkSQL"><a href="#三-SparkSQL" class="headerlink" title="三. SparkSQL"></a>三. SparkSQL</h1><blockquote><p>Hive                  //hadoop mr sql<br>pheonix            //hbase之上构建sql交互过程<br>DataFrame        //收据框.表.该模块能在spark运行sql语句。<br>SparkSQL        //SQL | DataFrame API.</p></blockquote><h2 id="1-Spark-SQL-Shell-操作"><a href="#1-Spark-SQL-Shell-操作" class="headerlink" title="1.Spark SQL  Shell 操作"></a>1.<strong>Spark SQL  Shell 操作</strong></h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建样例类</span></span><br><span class="line">$scala&gt;<span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span>(<span class="params">id:<span class="type">Int</span>,name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">//构造数据</span></span></span><br><span class="line"><span class="class"><span class="title">$scala&gt;val</span> <span class="title">arr</span> </span>= <span class="type">Array</span>(<span class="string">"1,tom,12"</span>,<span class="string">"2,tomas,13"</span>,<span class="string">"3,tomasLee,14"</span>)</span><br><span class="line">$scala&gt;<span class="keyword">val</span> rdd1 = parallelize(arr)</span><br><span class="line"><span class="comment">//创建对象rdd</span></span><br><span class="line">$scala&gt;<span class="keyword">val</span> rdd2 = rdd1.map(e=&gt;&#123;e.split(<span class="string">","</span>) ; <span class="type">Customer</span>(arr(<span class="number">0</span>).toInt,arr(<span class="number">1</span>),arr(<span class="number">2</span>).toInt)&#125;)</span><br><span class="line"><span class="comment">//通过rdd创建数据框</span></span><br><span class="line">$scala&gt;<span class="keyword">val</span> df = spark.createDataFrame(rdd2);</span><br><span class="line"><span class="comment">//打印表结构</span></span><br><span class="line">$scala&gt;df.printSchema</span><br><span class="line">$scala&gt;df.show            <span class="comment">//插叙数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建临时视图</span></span><br><span class="line">$scala&gt;df.createTempView(<span class="string">"customers"</span>)</span><br><span class="line">$scala&gt;<span class="keyword">val</span> df2 = spark.sql(<span class="string">"select * from customers"</span>)</span><br><span class="line">$scala&gt;spark.sql(<span class="string">"select * from customers"</span>).show        <span class="comment">//使用sql语句</span></span><br><span class="line">$scala&gt;<span class="keyword">val</span> df1 = spark.sql(<span class="string">"select * from cusotmers where id &lt; 2"</span>);</span><br><span class="line">$scala&gt;<span class="keyword">val</span> df2 = spark.sql(<span class="string">"select * from cusotmers where id &gt; 2"</span>);</span><br><span class="line">$scala&gt;df1.createTempView(<span class="string">"c1"</span>)</span><br><span class="line">$scala&gt;df2.createTempView(<span class="string">"c2"</span>)</span><br><span class="line">$scala&gt;spark.sql(<span class="string">"select * from c1 union select * from c2"</span>).show</span><br><span class="line">$scala&gt;df1.union(df2);</span><br><span class="line">$scala&gt;spark.sql(<span class="string">"select id,name from customers"</span>).show</span><br><span class="line">$scala&gt;df.selectExpr(<span class="string">"id"</span>,<span class="string">"name"</span>)</span><br><span class="line">$scala&gt; spark.sql(<span class="string">"select * from cus where name like 't%' order by name desc"</span>).show</span><br><span class="line">$scala&gt;df.where(<span class="string">"name like 't%'"</span>).show</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射</span></span><br><span class="line">$scala&gt;df.map(_.getAs[<span class="type">Int</span>](<span class="string">"age"</span>)).reduce(_+_)            <span class="comment">//聚合操作DataSet[Int]</span></span><br><span class="line">$scala&gt;df.agg(sum(<span class="string">"age"</span>),max(<span class="string">"age"</span>),min(<span class="string">"age"</span>))            <span class="comment">//聚合函数</span></span><br></pre></td></tr></table></figure><h2 id="2-IDEA-操作-SQL"><a href="#2-IDEA-操作-SQL" class="headerlink" title="2. IDEA 操作 SQL"></a>2. IDEA 操作 SQL</h2><p><a href="https://github.com/airpoet/bigdata/tree/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java" target="_blank" rel="noopener">具体查看我的 Github</a></p><h4 id="1-gt-通过读写文件完成基本-SQL-操作"><a href="#1-gt-通过读写文件完成基本-SQL-操作" class="headerlink" title="1&gt; 通过读写文件完成基本 SQL 操作"></a>1&gt; 通过读写文件完成基本 SQL 操作</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/SQLJava.java" target="_blank" rel="noopener">见我的 Github 代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码 ==&gt; //DataFrame 类似于table操作。</span></span><br><span class="line">type DataFrame = Dataset[Row]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>&gt; 通过RDD创建 DataFrame</span><br><span class="line">    df = sc.createDataFrame(rdd);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>&gt; DataFrame 转回为 RDD</span><br><span class="line">JavaRDD&lt;Row&gt; rdd = df1.toJavaRDD();</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>&gt; SparkSession 对象,通过读取 json 文件, 创建 DataSet</span><br><span class="line">Dataset&lt;Row&gt; df = session.read().json(<span class="string">"file:///tmp/test.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>&gt; 保存spark的sql计算结果为 json 文件</span><br><span class="line"><span class="comment">//保存成json文件。 模式为添加模式</span></span><br><span class="line">    df.write().mode(SaveMode.Append).json(<span class="string">"file://..."</span>)</span><br></pre></td></tr></table></figure><h4 id="2-gt-通过-JDBC-操作-MySQL"><a href="#2-gt-通过-JDBC-操作-MySQL" class="headerlink" title="2&gt; 通过 JDBC 操作 MySQL"></a>2&gt; 通过 JDBC 操作 MySQL</h4><ol><li><p>添加 pom 依赖 <code>mysql-connector-java</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/SQLJDBCJava.java" target="_blank" rel="noopener">编写代码, 见我的 Github</a></p></li></ol><h2 id="3-整合-Hive"><a href="#3-整合-Hive" class="headerlink" title="3.整合 Hive"></a>3.整合 Hive</h2><h4 id="1-配置-amp-Spark-shell-操作"><a href="#1-配置-amp-Spark-shell-操作" class="headerlink" title="1.配置 &amp; Spark-shell 操作"></a>1.配置 &amp; Spark-shell 操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1&gt; .hive的类库需要在spark worker节点。</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">2&gt; .复制hive-site.xml(hive) 到 spark/conf下。</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">(core-site.xml(hdfs) + hdfs-site.xml(hdfs) 就不用复制了, 在 conf/spark-env.sh 中, 配置了 HADOOP_CONF_DIR 就可以了)</span><br><span class="line"></span><br><span class="line">3&gt; .复制mysql驱动程序到/soft/spark/jars下 (Hive 的 metadata 存在 mysql)</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">4&gt; .启动spark-shell,指定启动模式</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">spark-shell --master <span class="built_in">local</span>[4]</span><br><span class="line"><span class="comment"># 创建 Hive 表</span></span><br><span class="line"><span class="variable">$scala</span>&gt;create table tt(id int,name string , age int) </span><br><span class="line">row format delimited fields terminated by <span class="string">','</span> </span><br><span class="line">lines terminated by <span class="string">'\n'</span> </span><br><span class="line">stored as textfile</span><br><span class="line"></span><br><span class="line">//加载数据到hive表</span><br><span class="line"><span class="variable">$scala</span>&gt;spark.sql(<span class="string">"load data local inpath 'file:///home/centos/data.txt' into table mydb.tt"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-Java版SparkSQL-操作-Hive-表"><a href="#2-Java版SparkSQL-操作-Hive-表" class="headerlink" title="2. Java版SparkSQL 操作 Hive 表"></a>2. Java版SparkSQL 操作 Hive 表</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/pom.xml" target="_blank" rel="noopener">所有的 pom 文件配置</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Java 代码</p><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/SQLHiveJava.java" target="_blank" rel="noopener">详细代码见github</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">conf.setMaster(<span class="string">"local"</span>) ;</span><br><span class="line">conf.setAppName(<span class="string">"SQLJava"</span>);</span><br><span class="line">SparkSession sess = SparkSession.builder()</span><br><span class="line">    .appName(<span class="string">"HiveSQLJava"</span>)</span><br><span class="line">    .config(<span class="string">"spark.master"</span>,<span class="string">"local"</span>)</span><br><span class="line">    .getOrCreate();</span><br><span class="line"></span><br><span class="line">Dataset&lt;Row&gt; df = sess.sql(<span class="string">"create table mytt(id int)"</span>);</span><br><span class="line">df.show();</span><br></pre></td></tr></table></figure><h4 id="3-Spark下-分布式访问-Hive-Spark-Shell-—–-开启thriftserver-通过-beeline-访问-hive"><a href="#3-Spark下-分布式访问-Hive-Spark-Shell-—–-开启thriftserver-通过-beeline-访问-hive" class="headerlink" title="3. Spark下 分布式访问 Hive (Spark-Shell) —– 开启thriftserver, 通过 beeline 访问 hive"></a>3. Spark下 分布式访问 Hive (Spark-Shell) —– 开启thriftserver, 通过 beeline 访问 hive</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; 在默认库下创建hive的数据表。</span><br><span class="line">    $&gt;hive -e <span class="string">"create table tt(id int,name string , age int) row format delimited fields terminated by ',' lines terminated by '\n' stored as textfile"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>&gt; 加载数据到hive表中.</span><br><span class="line">    $&gt;hive -e <span class="string">"load data local inpath 'file:///home/ap/stu' into table tt"</span></span><br><span class="line">    $&gt;hive -e <span class="string">"select * from tt"</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>&gt; 启动 thriftserver 服务器</span><br><span class="line"># 启动 thriftServer</span><br><span class="line">    [ap<span class="meta">@cs</span>1]~/apps/spark/sbin%&gt; start-thriftserver.sh --master spark:<span class="comment">//cs1:7077</span></span><br><span class="line"></span><br><span class="line">#  查看</span><br><span class="line">    netstat -anop | grep <span class="number">10000</span> </span><br><span class="line"></span><br><span class="line"><span class="number">4</span>&gt; 启动 beeline</span><br><span class="line"># 连接beeline, 记得一定要加上用户名!!!!  -n ap</span><br><span class="line"># 下面的情况是, cs1是装了 hive 的</span><br><span class="line">[ap<span class="meta">@cs</span>1]~/apps/spark%&gt; bin/beeline -u jdbc:hive2:<span class="comment">//localhost:10000 -n ap -d org.apache.hive.jdbc.HiveDriver</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>&gt; 接下来, 跟直接在hive 中, 通过 beeline 访问 hive, 是一样的操作, 就是直接操作 hive</span><br></pre></td></tr></table></figure><h4 id="4-使用-Java-通过-ThreadServer-使用-JDBC-访问-Hive"><a href="#4-使用-Java-通过-ThreadServer-使用-JDBC-访问-Hive" class="headerlink" title="4. 使用 Java 通过 ThreadServer, 使用 JDBC 访问 Hive"></a>4. 使用 Java 通过 ThreadServer, 使用 JDBC 访问 Hive</h4><p><a href="https://github.com/airpoet/bigdata/blob/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/java/ThriftServerClientJava.java" target="_blank" rel="noopener">详情看代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"org.apache.hive.jdbc.HiveDriver"</span>);</span><br><span class="line"></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:hive2://cs1:10000"</span>,<span class="string">"ap"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">ResultSet rs = st.executeQuery(<span class="string">"select * from tt where age &gt; 12 ORDER BY age DESC "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> age = rs.getInt(<span class="number">3</span>);</span><br><span class="line">    System.out.println(id + <span class="string">","</span> + name + <span class="string">","</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Spark-核心-API&quot;&gt;&lt;a href=&quot;#一-Spark-核心-API&quot; class=&quot;headerlink&quot; title=&quot;一. Spark 核心 API&quot;&gt;&lt;/a&gt;一. Spark 核心 API&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;[SparkContex
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="SparkSQL" scheme="https://airpoet.github.io/categories/Spark/SparkSQL/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
      <category term="SparkSQL" scheme="https://airpoet.github.io/tags/SparkSQL/"/>
    
      <category term="Spark源码" scheme="https://airpoet.github.io/tags/Spark%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>i-Spark-1</title>
    <link href="https://airpoet.github.io/2018/07/20/Spark/i-Spark-1/"/>
    <id>https://airpoet.github.io/2018/07/20/Spark/i-Spark-1/</id>
    <published>2018-07-20T02:05:35.625Z</published>
    <updated>2018-07-20T12:08:33.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tips:</p><blockquote><p> <strong>并行</strong></p></blockquote><p>集群计算。 </p><p>并行计算。 </p><p>硬件方面的概念 </p><blockquote><p><strong>并发</strong></p></blockquote><p>并发执行。  </p><p>线程方面的概念 </p></blockquote><h1 id="一-Spark-简介"><a href="#一-Spark-简介" class="headerlink" title="一. Spark 简介"></a>一. Spark 简介</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>Lightning-fast cluster computing。 </p><p><strong>快如闪电的集群计算。</strong> </p><p><strong>大规模快速通用的计算引擎。</strong> </p><p><strong>速度:</strong>    比hadoop 100x,磁盘计算快10x </p><p><strong>使用:</strong>    java / Scala /R /python    </p><p>​                提供80+算子(操作符)，容易构建并行应用。 </p><p><strong>通用:</strong>    组合SQL ，流计算 + 复杂分析。 </p><p><strong>DAG:</strong>     direct acycle graph,有向无环图。</p><p><strong>Spark 与 MR 关系</strong>:     基于hadoop的mr，扩展MR模型高效使用MR模型，内存型集群计算，提高app处理速度。 </p><h2 id="2-Spark-模块"><a href="#2-Spark-模块" class="headerlink" title="2.Spark 模块"></a>2.Spark 模块</h2><blockquote><p>Spark core                //核心模块 ,通用执行引擎，提供内存计算和对外部数据集的引用。RDD</p><p>Spark SQL               //SQL ,构建在core之上，引入新的抽象SchemaRDD，提供了结构化和半结构化支持。</p><p>Spark Streaming       //流计算  DStream</p><p>Spark MLlib                //机器学习 </p><p>Spark graph             //图计算 </p></blockquote><h2 id="3-RDD"><a href="#3-RDD" class="headerlink" title="3.RDD"></a>3.RDD</h2><p>是spark的基本数据结构，是不可变数据集。</p><p>RDD中的数据集进行逻辑分区，每个分区可以单独在集群节点进行计算。</p><p>可以包含任何java,scala，python和自定义类型。 </p><p>RDD是只读的记录分区集合。RDD具有容错机制。 </p><p><strong>创建RDD方式:</strong>  1)并行化一个现有集合.  2) 由另一个 RDD 转换</p><p>hadoop 花费90%时间 read, write。 </p><p>内存处理计算。在job间进行数据共享。内存的IO速率高于网络和disk的10 ~ 100之间。 </p><h2 id="4-Spark-RDD-内部包含5个主要属性"><a href="#4-Spark-RDD-内部包含5个主要属性" class="headerlink" title="4. Spark RDD 内部包含5个主要属性"></a>4. Spark RDD 内部包含5个主要属性</h2><ol><li>分区列表</li><li>针对每个split的计算函数。 </li><li>对其他rdd的依赖列表 </li><li>可选，如果是KeyValueRDD的话，可以带分区类。 </li><li>可选，首选块位置列表(hdfs block location); </li></ol><hr><h1 id="二-Spark-安装"><a href="#二-Spark-安装" class="headerlink" title="二. Spark 安装"></a>二. Spark 安装</h1><h2 id="1-local模式"><a href="#1-local模式" class="headerlink" title="1. local模式"></a>1. local模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1).下载spark-2.1.3-bin-hadoop2.7.tgz</span><br><span class="line"></span><br><span class="line">2).解压到/home/ap/apps</span><br><span class="line">  创建符号连接 :  ln -s spark-2.1.3-bin-hadoop2.7 spark</span><br><span class="line"></span><br><span class="line">3).环境变量</span><br><span class="line">    [.zshrc]</span><br><span class="line">    SPARK_HOME=/home/ap/apps/spark</span><br><span class="line">    PATH=<span class="variable">$PATH</span>:<span class="variable">$SPARK_HOME</span>/bin:<span class="variable">$SPARK_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line">[<span class="built_in">source</span>]</span><br><span class="line">$&gt;<span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line">4).验证spark</span><br><span class="line">    $&gt;<span class="built_in">cd</span> apps/spark/sbin</span><br><span class="line">    $&gt;./spark-shell</span><br><span class="line"></span><br><span class="line">5).webui</span><br><span class="line">http://cs1:4040/</span><br><span class="line"></span><br><span class="line"><span class="comment"># PS : 启动本地模式,登录4040 webUI端口, 只需要启动spark-shell. 要把master 或者 worker 关掉</span></span><br></pre></td></tr></table></figure><h2 id="2-Stand-alone-分布式"><a href="#2-Stand-alone-分布式" class="headerlink" title="2. Stand alone 分布式"></a>2. Stand alone 分布式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1). 配置其他主机的所有环境变量, 发送cs1上的.zshrc 到其它机器</span><br><span class="line">--------------------</span><br><span class="line">    <span class="comment"># 发送</span></span><br><span class="line">    &lt;sub&gt;&gt; xsync.sh &lt;/sub&gt;/.zshrc</span><br><span class="line">    <span class="comment"># source</span></span><br><span class="line">    &lt;sub&gt;&gt; xcall.sh <span class="string">"source &lt;/sub&gt;/.zshrc"</span></span><br><span class="line"></span><br><span class="line">2). 配置master节点的slaves</span><br><span class="line">--------------------</span><br><span class="line">    [/soft/spark/conf/slaves]</span><br><span class="line">    cs2</span><br><span class="line">    cs3</span><br><span class="line">    cs4</span><br><span class="line">    cs5</span><br><span class="line"></span><br><span class="line">3). 发送文件到其它节点</span><br><span class="line">--------------------</span><br><span class="line">    ~&gt; xsync.sh apps/spark</span><br><span class="line"></span><br><span class="line">4). 启动spark集群</span><br><span class="line">--------------------</span><br><span class="line">    ~&gt; apps/spark/sbin/start-all.sh</span><br><span class="line"></span><br><span class="line">5). 查看进程</span><br><span class="line">--------------------</span><br><span class="line">    $&gt;xcall.jps jps</span><br><span class="line">    master        //cs1</span><br><span class="line">    worker        //cs2</span><br><span class="line">    worker        //cs3</span><br><span class="line">    worker        //cs4</span><br><span class="line"></span><br><span class="line">6). 查看 webUI</span><br><span class="line">--------------------</span><br><span class="line">    http://cs1:8080</span><br></pre></td></tr></table></figure><h2 id="3-Stand-alone-HA-模式"><a href="#3-Stand-alone-HA-模式" class="headerlink" title="3. Stand alone HA 模式"></a>3. Stand alone HA 模式</h2><blockquote><p><strong>规划:</strong> </p><p>cs1, cs6 为 master</p><p>cs2~cs5 为 worker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1). 配置 HADOOP_CONF_DIR, 目的是找到 hdfs-site.xml 和 core-site.xml</span><br><span class="line">--------------<span class="comment"># conf/spark-env.sh 中----------------</span></span><br><span class="line">    <span class="comment"># 配 HADOOP_CONF_DIR, 这样就不用拷贝hdfs-site.xml 和 core-site.xml 到 conf 目录了</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"></span><br><span class="line">    ps: 也可以直接复制 hdfs-site.xml 和 core-site.xml 到 spark/conf 下, 可能还得在 conf/defaults.conf中指定 </span><br><span class="line">    spark.files  file:///home/ap/apps/spark/conf/hdfs-site.xml,file:///home/ap/apps/spark/conf/core-site.xml ,但是不推荐这样</span><br><span class="line"></span><br><span class="line">2). 配置 JAVA_HOME &amp; zookeeper</span><br><span class="line">--------------<span class="comment"># conf/spark-env.sh 中----------------</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_73</span><br><span class="line">    <span class="built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="string">"-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=cs1,cs2,cs3  -Dspark.deploy.zookeeper.dir=/spark"</span></span><br><span class="line"></span><br><span class="line">3) 分发整个 conf 目录文件到集群</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="variable">$cs1</span> &lt;sub&gt;&gt; xsync.sh &lt;/sub&gt;/apps/spark/conf</span><br><span class="line"></span><br><span class="line">4) 启动集群</span><br><span class="line">------------------------------------------------</span><br><span class="line">cs1&gt; ~/apps/spark/sbin/start-all.sh</span><br><span class="line">cs6&gt; ~/apps/spark/sbin/start-master.sh</span><br><span class="line">查看&gt; </span><br><span class="line">http://cs1:8080</span><br><span class="line">http://cs6:8080</span><br><span class="line"></span><br><span class="line">5) 测试: 启动spark-shell,连接spark集群上</span><br><span class="line">------------------------------------------------ </span><br><span class="line">$&gt; spark-shell --master spark://cs1:7077</span><br><span class="line">$&gt; sc.textFile(<span class="string">"hdfs://mycluster/user/ap/a.txt"</span>).collect();</span><br></pre></td></tr></table></figure><h2 id="4-Spark-历史服务器-可选"><a href="#4-Spark-历史服务器-可选" class="headerlink" title="4. Spark 历史服务器(可选)"></a>4. Spark 历史服务器(可选)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">第一步：</span><br><span class="line">------------------------------------------------ </span><br><span class="line"><span class="built_in">cd</span> /home/hadoop/apps/spark-2.3.0-bin-hadoop2.7/conf</span><br><span class="line">cp spark-defaults.conf.template    spark-defaults.conf</span><br><span class="line"></span><br><span class="line">在文件里面添加如下内容：</span><br><span class="line">spark.eventLog.enabled        <span class="literal">true</span></span><br><span class="line">spark.eventLog.dir            hdfs://mycluster/sparklog</span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">------------------------------------------------ </span><br><span class="line">在 spark-env.sh 的文件里面添加如下内容：</span><br><span class="line"><span class="built_in">export</span> SPARK_HISTORY_OPTS=<span class="string">"-Dspark.history.ui.port=18080 -Dspark.history.retainedApplications=30 -Dspark.history.fs.logDirectory=hdfs://mycluster/sparklog"</span></span><br><span class="line"></span><br><span class="line">第三步：</span><br><span class="line">------------------------------------------------ </span><br><span class="line">在启动 HistorServer 服务之前 hdfs://mycluster/sparklog 目录要提前创建</span><br><span class="line">hadoop fs -mkdir -p hdfs://mycluster/sparklog</span><br><span class="line"></span><br><span class="line">第四步：启动 Spark HistoryServer</span><br><span class="line">------------------------------------------------ </span><br><span class="line">$&gt; SPARK_HOME/sbin/start-history-server.sh</span><br><span class="line"></span><br><span class="line">第五步：访问 Spark History WebUI</span><br><span class="line">------------------------------------------------ </span><br><span class="line">http://cs1:18080/</span><br></pre></td></tr></table></figure><h2 id="5-yarn-模式"><a href="#5-yarn-模式" class="headerlink" title="5. yarn 模式"></a>5. yarn 模式</h2><p>…</p><hr><h1 id="三-Spark-简单体验"><a href="#三-Spark-简单体验" class="headerlink" title="三. Spark 简单体验"></a>三. Spark 简单体验</h1><h2 id="1-API"><a href="#1-API" class="headerlink" title="1. API"></a>1. API</h2><p><strong>[SparkContext]</strong></p><ul><li>Spark功能的主要入口点。代表到Spark集群的连接，可以创建RDD、累加器和广播变量. </li><li>每个JVM只能激活一个SparkContext对象，在创建sc之前需要stop掉active的sc。 </li></ul><p><strong>[RDD]</strong></p><ul><li>resilient distributed dataset,弹性分布式数据集。等价于集合。 </li></ul><p><strong>[SparkConf]</strong></p><ul><li>spark配置对象，设置Spark应用各种参数，kv形式。 </li></ul><h2 id="2-Spark-实现-WordCount"><a href="#2-Spark-实现-WordCount" class="headerlink" title="2. Spark 实现 WordCount"></a>2. Spark 实现 WordCount</h2><h4 id="2-1-spark-shell"><a href="#2-1-spark-shell" class="headerlink" title="2.1 spark-shell"></a>2.1 spark-shell</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录 shell </span></span><br><span class="line">spark-shell --master spark:<span class="comment">//cs1:7077</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载文本文件,以换行符方式切割文本.Array(hello  world2,hello world2 ,...)</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"/home/ap/a.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//单词统计1 =&gt; 分步骤</span></span><br><span class="line">    $scala&gt;<span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"/home/centos/test.txt"</span>)</span><br><span class="line">    $scala&gt;<span class="keyword">val</span> rdd2 = rdd1.flatMap(line=&gt;line.split(<span class="string">" "</span>))</span><br><span class="line">    $scala&gt;<span class="keyword">val</span> rdd3 = rdd2.map(word = &gt; (word,<span class="number">1</span>))</span><br><span class="line">    $scala&gt;<span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_ + _)</span><br><span class="line">    $scala&gt;rdd4.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一句话</span></span><br><span class="line">    scala&gt; sc.textFile(<span class="string">"/home/ap/a.txt"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br><span class="line">    res6: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((world2,<span class="number">1</span>), (world1,<span class="number">1</span>), (world4,<span class="number">1</span>), (<span class="string">""</span>,<span class="number">1</span>), (hello,<span class="number">4</span>), (world3,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h4 id="2-2-idea-编程"><a href="#2-2-idea-编程" class="headerlink" title="2.2 idea 编程"></a>2.2 idea 编程</h4><blockquote><p><strong>[pom依赖文件]</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Scala 版</strong></p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">//创建Spark配置对象</span></span><br><span class="line">        <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>();</span><br><span class="line">        conf.setAppName(<span class="string">"WordCountSpark"</span>)</span><br><span class="line">        <span class="comment">//设置master属性</span></span><br><span class="line">        conf.setMaster(<span class="string">"local"</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过conf创建sc</span></span><br><span class="line">        <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载文本文件</span></span><br><span class="line">        <span class="keyword">val</span> rdd1 = sc.textFile(<span class="string">"d:/scala/test.txt"</span>);</span><br><span class="line">        <span class="comment">//压扁</span></span><br><span class="line">        <span class="keyword">val</span> rdd2 = rdd1.flatMap(line =&gt; line.split(<span class="string">" "</span>)) ;</span><br><span class="line">        <span class="comment">//映射w =&gt; (w,1)</span></span><br><span class="line">        <span class="keyword">val</span> rdd3 = rdd2.map((_,<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_ + _)</span><br><span class="line">        <span class="keyword">val</span> r = rdd4.collect()</span><br><span class="line">        r.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Java 版</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountJava2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建SparkConf对象</span></span><br><span class="line">        SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">        conf.setAppName(<span class="string">"WordCountJava2"</span>);</span><br><span class="line">        conf.setMaster(<span class="string">"local"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java sc</span></span><br><span class="line">        JavaSparkContext sc = <span class="keyword">new</span> JavaSparkContext(conf);</span><br><span class="line">        <span class="comment">//加载文本文件</span></span><br><span class="line">        JavaRDD&lt;String&gt; rdd1 = sc.textFile(<span class="string">"d:/scala//test.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//压扁</span></span><br><span class="line">        JavaRDD&lt;String&gt; rdd2 = rdd1.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                String[] arr = s.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span>(String ss :arr)&#123;</span><br><span class="line">                    list.add(ss);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> list.iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射,word -&gt; (word,1)</span></span><br><span class="line">        JavaPairRDD&lt;String,Integer&gt; rdd3 = rdd2.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(s,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reduce化简</span></span><br><span class="line">        JavaPairRDD&lt;String,Integer&gt; rdd4 = rdd3.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer v1, Integer v2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> v1 + v2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        List&lt;Tuple2&lt;String,Integer&gt;&gt; list = rdd4.collect();</span><br><span class="line">        <span class="keyword">for</span>(Tuple2&lt;String, Integer&gt; t : list)&#123;</span><br><span class="line">            System.out.println(t._1() + <span class="string">" : "</span> + t._2());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提交作业到 Spark 集群运行</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">======================================提交到本机</span><br><span class="line">1) 导出jar包</span><br><span class="line">-------------------------------</span><br><span class="line">2) spark-submit提交命令运行job</span><br><span class="line">-------------------------------</span><br><span class="line">    <span class="comment"># scala 版 wordcount</span></span><br><span class="line">    spark-submit --master <span class="built_in">local</span> --name MyWordCount --class MyWordCount_Scala SparkDemo-1-1.0-SNAPSHOT.jar /home/ap/a.txt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># java 版 wordcount</span></span><br><span class="line">    spark-submit --master <span class="built_in">local</span> --name MyWordCountJava --class  com.rox.spark.WordCountJava SparkDemo-1-1.0-SNAPSHOT.jar /home/ap/a.txt</span><br><span class="line"></span><br><span class="line">======================================提交到Spark集群</span><br><span class="line">1) 代码中把textFile改为 args[0]</span><br><span class="line"></span><br><span class="line">2) 将源文件传到 hdfs 上</span><br><span class="line"></span><br><span class="line">3) 运行spark-submit</span><br><span class="line">    $&gt; spark-submit  --master  spark://cs1:7077 --name MyWordCount2 --class MyWordCount_Scala  SparkDemo-1-1.0-SNAPSHOT.jar hdfs://cs1:8020/user/ap/a.txt</span><br></pre></td></tr></table></figure><h2 id="3-spark-sbin-下脚本分析"><a href="#3-spark-sbin-下脚本分析" class="headerlink" title="3. spark/sbin 下脚本分析"></a>3. spark/sbin 下脚本分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[start-all.sh]</span><br><span class="line">-------------------------------</span><br><span class="line">    sbin/spark-config.sh</span><br><span class="line">    sbin/spark-master.sh        //启动master进程</span><br><span class="line">    sbin/spark-slaves.sh        //启动worker进程</span><br><span class="line"></span><br><span class="line">[start-master.sh]</span><br><span class="line">-------------------------------</span><br><span class="line">    sbin/spark-config.sh</span><br><span class="line">    org.apache.spark.deploy.master.Master</span><br><span class="line">    spark-daemon.sh start org.apache.spark.deploy.master.Master --host --port --webui-port ...</span><br><span class="line"></span><br><span class="line">[spark-slaves.sh]</span><br><span class="line">-------------------------------</span><br><span class="line">    sbin/spark-config.sh</span><br><span class="line">    slaves.sh                //conf/slaves</span><br><span class="line"></span><br><span class="line">[slaves.sh]</span><br><span class="line">-------------------------------</span><br><span class="line">    <span class="keyword">for</span> conf/slaves &#123;</span><br><span class="line">     ssh host start-slave.sh ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[start-slave.sh]</span><br><span class="line">-------------------------------</span><br><span class="line">    CLASS=<span class="string">"org.apache.spark.deploy.worker.Worker"</span></span><br><span class="line">    sbin/spark-config.sh</span><br><span class="line">    <span class="keyword">for</span> ((  .. )) ; <span class="keyword">do</span></span><br><span class="line">    start_instance $(( 1 + <span class="variable">$i</span> )) <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">    <span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line">    $&gt;<span class="built_in">cd</span> /soft/spark/sbin</span><br><span class="line">    $&gt;./stop-all.sh                //停掉整个spark集群.</span><br><span class="line">    $&gt;./start-master.sh            //停掉整个spark集群.</span><br><span class="line">    $&gt;./start-master.sh            //启动master节点</span><br><span class="line">    $&gt;./start-slaves.sh            //启动所有worker节点</span><br><span class="line"></span><br><span class="line">    $&gt;./stop-slave.sh --<span class="built_in">help</span>  // 查看帮助, 其它的查看帮助也是这样, 命令后面加上 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="4-解决数据倾斜问题-多次-map-reduce"><a href="#4-解决数据倾斜问题-多次-map-reduce" class="headerlink" title="4. 解决数据倾斜问题 (多次 map-reduce)"></a>4. 解决数据倾斜问题 (多次 map-reduce)</h2><blockquote><p> 解决数据倾斜:</p><p>1&gt; 先对每个 word 添加 个数 (word,1)</p><p>2&gt; 取出 word, 在 word后随机拼接 _num, 然后再与 v 组成 (newK, v)元祖</p><p>3&gt; 对新的 (k,v)进行 reduceByKey, 统计出每个 k 的个数 (newK, count)</p><p>4&gt; 对结果继续进行 map, 去掉 _num, 把原本的 k 取出来, 再跟 count 组成新的元祖 (k,count)</p><p>5&gt; 继续进行 reduceByKey, 此时并发量最多也只是随机数的个数了, 不会产生严重的数据倾斜, 计算出最终的结果</p><p>6&gt; 存到文件中 saveAsTextFile</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行防止数据倾斜的 MR, 最后存到 hdfs 上</span></span><br><span class="line">sc.textFile(<span class="string">"hdfs://mycluster/user/ap/a.txt"</span>,<span class="number">4</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).map(t =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> w1 = t._1; </span><br><span class="line">  <span class="keyword">import</span> scala.util.<span class="type">Random</span>;</span><br><span class="line">  <span class="keyword">val</span> n = <span class="type">Random</span>.nextInt(<span class="number">100</span>); </span><br><span class="line">  (w1 + <span class="string">"_"</span> + n, t._2);</span><br><span class="line">&#125;).reduceByKey(_ + _,<span class="number">4</span>).map(t =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> w2 = t._1; </span><br><span class="line">  <span class="keyword">val</span> count = t._2; </span><br><span class="line">  <span class="keyword">val</span> w3 = w2.split(<span class="string">"_"</span>)(<span class="number">0</span>); </span><br><span class="line">  (w3, count);</span><br><span class="line">&#125;).reduceByKey(_ + _,<span class="number">4</span>).saveAsTextFile(<span class="string">"/user/ap/scala/DataSkew"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 hdfs 上的数据</span></span><br><span class="line">[ap<span class="meta">@cs</span>2]~/apps/spark/conf% hdfs dfs -text /user/ap/scala/<span class="type">DataSkew</span>/part<span class="number">-00000</span></span><br><span class="line">(world2,<span class="number">1</span>)</span><br><span class="line">(,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>执行的 DAG(有向无环图)</p></blockquote><p><img src="" alt=""> </p><hr><h1 id="四-RDD-的-transform-amp-action"><a href="#四-RDD-的-transform-amp-action" class="headerlink" title="四. RDD  的 transform &amp; action"></a>四. RDD  的 transform &amp; action</h1><p><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#transformations" target="_blank" rel="noopener">详细的见官方文档</a> </p><p><a href="https://github.com/airpoet/bigdata/tree/master/Spark_Project/SparkDemo-1/src/main/java/com/rox/spark/scala" target="_blank" rel="noopener">我的github代码</a></p><h2 id="1-变换-transform"><a href="#1-变换-transform" class="headerlink" title="1. 变换 (transform )"></a>1. 变换 (transform )</h2><p><strong>注意:  直到遇到一个不是返回 RDD 对象的方法/函数,  才会开始计算</strong></p><p>Spark is lazy, so nothing will be executed unless you call some transformation or action that will trigger job creation and execution. Look at the following snippet of the word-count example. </p><p><strong>变换: 返回指向新rdd的指针，在rdd之间创建依赖关系。每个rdd都有计算函数和指向父RDD的指针。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">map()                                    <span class="comment">//对每个元素进行变换，应用变换函数</span></span><br><span class="line">                                         <span class="comment">//(T)=&gt;V</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">filter()                                 <span class="comment">//过滤器,(T)=&gt;Boolean</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">flatMap()                                <span class="comment">//压扁,T =&gt; TraversableOnce[U]</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">mapPartitions()                          <span class="comment">//对每个分区进行应用变换，输入的Iterator,返回新的迭代器，可以对分区进行函数处理。</span></span><br><span class="line">                                         <span class="comment">//Iterator&lt;T&gt; =&gt; Iterator&lt;U&gt;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">mapPartitionsWithIndex(func)             <span class="comment">//同上，(Int, Iterator&lt;T&gt;) =&gt; Iterator&lt;U&gt;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">sample(withReplacement, fraction, seed)    <span class="comment">//采样返回采样的RDD子集。</span></span><br><span class="line">                                        <span class="comment">//withReplacement 元素是否可以多次采样.</span></span><br><span class="line">                                        <span class="comment">//fraction : 期望采样数量.[0,1]</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">union()                                    <span class="comment">//类似于mysql union操作。</span></span><br><span class="line">                                        <span class="comment">//select * from persons where id &lt; 10 </span></span><br><span class="line">                                        <span class="comment">//union select * from id persons where id &gt; 29 ;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">intersection                            <span class="comment">//交集,提取两个rdd中都含有的元素。</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">distinct([numTasks]))                    <span class="comment">//去重,去除重复的元素。</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">groupByKey()                            <span class="comment">//(K,V) =&gt; (K,Iterable&lt;V&gt;)</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">reduceByKey(*)                            <span class="comment">//按key聚合。 </span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])      <span class="comment">//按照key进行聚合  :TODO 不太懂</span></span><br><span class="line">key:<span class="type">String</span> <span class="type">U</span>:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">sortByKey                                <span class="comment">//排序</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">join(otherDataset, [numTasks])            <span class="comment">//连接,(K,V).join(K,W) =&gt;(K,(V,W)) </span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">cogroup                                    <span class="comment">//协分组</span></span><br><span class="line">                                        <span class="comment">//(K,V).cogroup(K,W) =&gt;(K,(Iterable&lt;V&gt;,Iterable&lt;!-- &lt;W&gt; --&gt;)) </span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">cartesian(otherDataset)                    <span class="comment">//笛卡尔积,RR[T] RDD[U] =&gt; RDD[(T,U)]</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">pipe                                    <span class="comment">//将rdd的元素传递给脚本或者命令，执行结果返回形成新的RDD</span></span><br><span class="line"><span class="comment">//例子:  在 spark-shell 下</span></span><br><span class="line">scala&gt; sc.parallelize(<span class="type">Array</span>(<span class="string">"/home/ap"</span>)).pipe(<span class="string">"ls"</span>).collect</span><br><span class="line">res0: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(apps, a.txt, calllog, dump.rdb, flumedata, hadoopdata, ihivedata, jars, kafka, logs, python, softs, <span class="type">SparkDemo</span><span class="number">-1</span><span class="number">-1.0</span>-<span class="type">SNAPSHOT</span>.jar, spool, zookeeper, zookeeper.out)</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">coalesce(numPartitions)                    <span class="comment">//减少分区</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">repartition                                <span class="comment">//可增可减</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line">repartitionAndSortWithinPartitions(partitioner)              <span class="comment">//再分区并在分区内进行排序</span></span><br></pre></td></tr></table></figure><h2 id="2-产生作业-Actions"><a href="#2-产生作业-Actions" class="headerlink" title="2. 产生作业 Actions"></a>2. 产生作业 Actions</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">collect()                                <span class="comment">//收集rdd元素形成数组.</span></span><br><span class="line"></span><br><span class="line">count()                                    <span class="comment">//统计rdd元素的个数</span></span><br><span class="line"></span><br><span class="line">reduce()                                 <span class="comment">//聚合,返回一个值。</span></span><br><span class="line"></span><br><span class="line">first                                    <span class="comment">//取出第一个元素take(1)</span></span><br><span class="line"></span><br><span class="line">take                                     <span class="comment">// take(n) , 是一个集合, 需要迭代打印</span></span><br><span class="line"></span><br><span class="line">takeSample (withReplacement,num, [seed])</span><br><span class="line"></span><br><span class="line">takeOrdered(n, [ordering])               <span class="comment">// 返回前 n 个排序的元素(可默认, 可自定义排序)</span></span><br><span class="line"></span><br><span class="line">saveAsTextFile(path)                    <span class="comment">//保存到文件                    生产中使用</span></span><br><span class="line"></span><br><span class="line">saveAsSequenceFile(path)                <span class="comment">//保存成序列文件</span></span><br><span class="line"></span><br><span class="line">saveAsObjectFile(path) (<span class="type">Java</span> and <span class="type">Scala</span>)</span><br><span class="line"></span><br><span class="line">countByKey()                            <span class="comment">//按照key,统计每个key下value的个数</span></span><br><span class="line"></span><br><span class="line">reduceByKey()                           <span class="comment">//按照 key, 计算 key 后的 value </span></span><br><span class="line"></span><br><span class="line">注意 : rdd2.map((_, <span class="number">1</span>)) 和 rdd2.map((_, <span class="number">2</span>)) 针对于 前两者的计算结果是不一样的</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;并行&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;集群计算。 &lt;/p&gt;
&lt;p&gt;并行计算。 &lt;/p&gt;
&lt;p&gt;硬件方面的概念 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
      <category term="SparkCore" scheme="https://airpoet.github.io/categories/Spark/SparkCore/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
      <category term="SparkCore" scheme="https://airpoet.github.io/tags/SparkCore/"/>
    
  </entry>
  
  <entry>
    <title>Spark中Bug集锦</title>
    <link href="https://airpoet.github.io/2018/07/13/Spark/Spark%E4%B8%ADBug%E9%9B%86%E9%94%A6/"/>
    <id>https://airpoet.github.io/2018/07/13/Spark/Spark中Bug集锦/</id>
    <published>2018-07-13T06:22:08.652Z</published>
    <updated>2018-07-13T08:26:55.123Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-创建-SparkContext-时-遇到的问题"><a href="#1-创建-SparkContext-时-遇到的问题" class="headerlink" title="1.创建 SparkContext 时, 遇到的问题"></a>1.创建 SparkContext 时, 遇到的问题</h4><p><strong>错误描述:</strong> <code>A master URL must be set in your configuration</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 spark 配置对象</span></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">conf.setAppName(<span class="string">"MyWordCount_Scala"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 master 属性</span></span><br><span class="line">conf.setMaster(<span class="string">"local"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 conf 创建 sc (注意, 这里一定要传入 conf, 否则就会报下面这个错误)</span></span><br><span class="line"><span class="comment">// A master URL must be set in your configuration</span></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br></pre></td></tr></table></figure><h4 id="2-配置-Spark-独立模式时-找不到-JAVA-HOME"><a href="#2-配置-Spark-独立模式时-找不到-JAVA-HOME" class="headerlink" title="2. 配置 Spark 独立模式时, 找不到 JAVA_HOME"></a>2. 配置 Spark 独立模式时, 找不到 JAVA_HOME</h4><p><strong>错误描述: <code>JAVA_HOME is not set</code></strong></p><p><em>解决方法</em>: </p><ul><li><strong>在 <code>sbin</code>目录中,  在<code>spark-config.sh</code>中加上</strong> <strong><code>export JAVA_HOME=...</code></strong></li><li>分发到其它主机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-创建-SparkContext-时-遇到的问题&quot;&gt;&lt;a href=&quot;#1-创建-SparkContext-时-遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;1.创建 SparkContext 时, 遇到的问题&quot;&gt;&lt;/a&gt;1.创建 Spark
      
    
    </summary>
    
      <category term="Spark" scheme="https://airpoet.github.io/categories/Spark/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spark" scheme="https://airpoet.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>i-Scala</title>
    <link href="https://airpoet.github.io/2018/07/12/Hadoop/12_Scala/i-Scala/"/>
    <id>https://airpoet.github.io/2018/07/12/Hadoop/12_Scala/i-Scala/</id>
    <published>2018-07-12T02:05:03.898Z</published>
    <updated>2018-07-17T01:45:44.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概览"><a href="#一-概览" class="headerlink" title="一. 概览"></a>一. <strong>概览</strong></h1><p><strong>scala</strong> : java语言的脚本化。          </p><p><strong>Scala 的类关系图</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-12-061916.png" alt="image-20180712141916222"></p><p><strong>数据类型注意点</strong></p><p>1、 Any 是所有类的父类，包括值类型 AnyVal，和引用类型 AnyRef<br>2、 AnyVal 是所有值类型的父类，包括 Int，Double，Boolean，Unit 等等<br>3、 AnyRef 是所有引用类型的父类，包括 Null<br>4、 Null 是所有引用类型的子类<br>5、 Nothing 是所有类的子类<br>6、 Unit 类型只有一个实例，是()，相当于 java 中的 void，没有任何的实质意义<br>7、 Null 也只有一个实例，是 null，相当于 java 中的 null，能赋值给任何引用类型变量，不<br>能赋值给值类型变量</p><p><strong>方法的返回值:</strong> </p><ul><li>如果没有显示定义返回值, 会返回 <strong>有可能返回 的 值</strong> <strong>的</strong>共同类型(<strong>父类</strong>)</li></ul><p><strong>定义方法</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-12-081734.png" alt="image-20180712161733886"></p><p><strong>定义函数</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-12-152103.png" alt="image-20180712232102657"></p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量</span></span><br><span class="line">scala&gt;<span class="keyword">var</span> a = <span class="number">100</span>            <span class="comment">//变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量</span></span><br><span class="line">scala&gt;<span class="keyword">val</span> a = <span class="number">100</span>            <span class="comment">//常量，不能重新赋值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义类型  //val 常量, 不能再重新赋值</span></span><br><span class="line">scala&gt;<span class="keyword">val</span> a:<span class="type">String</span> = <span class="string">"hello"</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作符重载 </span></span><br><span class="line">    scala&gt;<span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    scala&gt;<span class="number">1.</span>+(<span class="number">2</span>)          </span><br><span class="line"></span><br><span class="line"><span class="comment">//scala方法，可以直接调用</span></span><br><span class="line">    scala&gt;<span class="keyword">import</span> scala.math._        <span class="comment">//_ ===&gt; * 下划线是通配的意思</span></span><br><span class="line">    scala&gt;min(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//apply</span></span><br><span class="line">    scala&gt;<span class="string">"hello"</span>.apply(<span class="number">1</span>)            <span class="comment">//等价于xxx.apply()</span></span><br><span class="line">    scala&gt;<span class="string">"hello"</span>(<span class="number">1</span>)                 </span><br><span class="line"></span><br><span class="line"><span class="comment">//条件表达式,scala的表达式有值,是最后一条语句的值。</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> x = <span class="number">1</span> ;</span><br><span class="line">scala&gt;<span class="keyword">val</span> b = <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Any 是Int和String的超类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型转换</span></span><br><span class="line">    scala&gt;<span class="number">1.</span>toString()</span><br><span class="line">    scala&gt;<span class="string">"100"</span>.toInt()                <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空值   </span></span><br><span class="line">   scala&gt; <span class="keyword">val</span> y = ()  <span class="comment">//y:Unit= ()类似于java void.</span></span><br><span class="line">   y: <span class="type">Unit</span> = ()</span><br><span class="line"></span><br><span class="line"><span class="comment">//粘贴复制</span></span><br><span class="line">    <span class="comment">// 有左大括号的话, 回车会直接换行</span></span><br><span class="line"><span class="comment">// 进入 paste 模式</span></span><br><span class="line">    scala&gt;:paste</span><br><span class="line">            ....</span><br><span class="line">    ctrl + d                    <span class="comment">//结束粘贴模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scala 的编译</span></span><br><span class="line">    javac               java</span><br><span class="line">    *.java --------&gt; *.<span class="keyword">class</span>  --------&gt;程序</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">    scala&gt;print(<span class="string">"hello"</span>)</span><br><span class="line">    scala&gt;println(<span class="string">"hello"</span>)</span><br><span class="line">    scala&gt;printf(<span class="string">"name is %s , age is %d"</span>, <span class="string">"tom"</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读行</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> password = readLine(<span class="string">"请输入密码 : "</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看帮助</span></span><br><span class="line">    scala&gt;:help</span><br></pre></td></tr></table></figure><hr><h1 id="二-循环"><a href="#二-循环" class="headerlink" title="二. 循环"></a>二. 循环</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通循环</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">10</span> )&#123;</span><br><span class="line">        println(i) ;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">// 99表格</span></span><br><span class="line">    <span class="keyword">var</span> row = <span class="number">1</span> ; </span><br><span class="line">    <span class="keyword">while</span>(row &lt;= <span class="number">9</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> col = <span class="number">1</span> ; </span><br><span class="line">        <span class="keyword">while</span>(col &lt;= row)&#123;</span><br><span class="line">            printf(<span class="string">"%d x %d = %d\t"</span>,col,row,(row * col)) ;</span><br><span class="line">            col += <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        println();</span><br><span class="line">        row += <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">// 百钱买百鸡问题</span></span><br><span class="line">    <span class="comment">// 100块钱能各买3种🐓, 各买多少种</span></span><br><span class="line">    <span class="comment">// 公鸡:5块/只</span></span><br><span class="line">    <span class="comment">// 母鸡:3块/只</span></span><br><span class="line">    <span class="comment">// 小鸡:1块/3只</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//公鸡</span></span><br><span class="line"><span class="keyword">var</span> cock = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span>(cock &lt;= <span class="number">20</span>)&#123;</span><br><span class="line">    <span class="comment">//母鸡</span></span><br><span class="line">    <span class="keyword">var</span> hen = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(hen &lt;= <span class="number">100</span>/<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">// 小鸡🐥</span></span><br><span class="line">        <span class="keyword">var</span> chicken = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(chicken &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">// 钱数</span></span><br><span class="line">            <span class="keyword">var</span> money = cock * <span class="number">5</span> + hen * <span class="number">3</span> + chicken / <span class="number">3</span> ;</span><br><span class="line">            <span class="comment">// 个数</span></span><br><span class="line">            <span class="keyword">var</span> mount = cock + hen + chicken ;</span><br><span class="line">            <span class="keyword">if</span>(money == <span class="number">100</span> &amp;&amp; mount == <span class="number">100</span>)&#123;</span><br><span class="line">                printf(<span class="string">"cock : %d , hen : %d , chicken : %d\n"</span>,cock,hen,chicken) ;</span><br><span class="line">            &#125;</span><br><span class="line">            chicken += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hen += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cock += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to </span></span><br><span class="line"><span class="comment">// 注意:  &lt;- 是写在一起的 </span></span><br><span class="line">scala&gt; <span class="keyword">for</span> (x  &lt;-  <span class="number">1</span> to <span class="number">10</span>)&#123;</span><br><span class="line">    println(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="comment">// until   [1,...10)</span></span><br><span class="line"><span class="comment">// 左闭右开 </span></span><br><span class="line"><span class="keyword">for</span> (x &lt;- <span class="number">1</span> until <span class="number">10</span>)&#123;</span><br><span class="line">    println(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 为2 </span></span><br><span class="line"><span class="keyword">for</span> (x &lt;- <span class="number">1</span> until (<span class="number">10</span>,<span class="number">2</span>))&#123;</span><br><span class="line">    println(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序打印</span></span><br><span class="line"><span class="keyword">for</span> (str &lt;- (<span class="number">1</span> to <span class="number">10</span>).reverse)&#123;</span><br><span class="line">println(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组下标的方式进行打印</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- <span class="number">0</span> to arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">println(arr(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="comment">//scala没有break continue语句。可以使用Breaks对象的break()方法。</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> scala.util.control.<span class="type">Breaks</span>._</span><br><span class="line">scala&gt; <span class="keyword">for</span>(x &lt;- <span class="number">1</span> to <span class="number">10</span>) &#123;<span class="keyword">if</span> (x&gt;<span class="number">8</span>) <span class="keyword">break</span>() ; print(x)&#125; ;</span><br><span class="line">eg: scala&gt; <span class="keyword">for</span>(x &lt;- <span class="number">1</span> to <span class="number">10</span>) &#123; println(x); <span class="keyword">if</span>(x == <span class="number">5</span>)<span class="keyword">break</span>;&#125;  </span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">//for循环高级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//双循环,守卫条件</span></span><br><span class="line">scala&gt; <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span> ; j &lt;- <span class="number">1</span> to <span class="number">4</span> <span class="keyword">if</span> i != j ) &#123;printf(<span class="string">"i = %d, j = %d , res = %d \n"</span>,i,j,i*j);&#125; ;    </span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="comment">//yield，是循环中处理每个元素，产生新集合</span></span><br><span class="line">scala&gt;<span class="keyword">for</span> (x &lt;- <span class="number">1</span> to <span class="number">10</span> ) <span class="keyword">yield</span> x % <span class="number">2</span> ;</span><br></pre></td></tr></table></figure><h1 id="三-定义函数"><a href="#三-定义函数" class="headerlink" title="三. 定义函数"></a>三. 定义函数</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> c = a + b  ;</span><br><span class="line">    <span class="keyword">return</span> c  ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>):<span class="type">Int</span> =  a + b</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">//scala实现递归</span></span><br><span class="line"></span><br><span class="line">核心:  n! = n * (n - <span class="number">1</span>)!  <span class="comment">// n 的阶乘 = n-1的阶乘, 并且 出口是 n=1</span></span><br><span class="line"><span class="number">4</span>!  = <span class="number">4</span> x <span class="number">3</span>!</span><br><span class="line"><span class="number">4</span>!  = <span class="number">4</span> x <span class="number">3</span> x <span class="number">2</span>!</span><br><span class="line"><span class="number">4</span>!  = <span class="number">4</span> x <span class="number">3</span> x <span class="number">2</span> x <span class="number">1</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归函数必须显式定义返回类型</span></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">fac</span></span>(n:<span class="type">Int</span>):<span class="type">Int</span> = <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="number">1</span> <span class="keyword">else</span> n * fac(n<span class="number">-1</span>) ;</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">//函数的默认值和命名参数</span></span><br><span class="line">scala&gt;<span class="function"><span class="keyword">def</span> <span class="title">decorate</span></span>(prefix:<span class="type">String</span> = <span class="string">"[["</span>,str:<span class="type">String</span>,suffix:<span class="type">String</span> = <span class="string">"]]"</span>) = &#123;</span><br><span class="line">        prefix + str + suffix </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果都指定了默认值, 调用的时候 可以不传参数</span></span><br><span class="line"><span class="comment">// 也可以不指定参数名 传任意个数 的参数, 会从第一个开始匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span></span>(prefix:<span class="type">String</span>=<span class="string">"[["</span>, str:<span class="type">String</span>=<span class="string">"👌"</span>, suffix:<span class="type">String</span>=<span class="string">"]]"</span>)=&#123;</span><br><span class="line">    prefix + str + suffix</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----调用</span><br><span class="line">scala&gt;decorate(str=<span class="string">"hello"</span>)</span><br><span class="line">scala&gt;decorate(str=<span class="string">"hello"</span>,prefix=<span class="string">"&lt;&lt;"</span>)</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">//变长参数 (就相当于可以传多个值)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(a:<span class="type">Int</span>*) = &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(x &lt;- a) s += x;</span><br><span class="line">    s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">sum (<span class="number">1</span> to <span class="number">4</span>:_*)  <span class="comment">// 将1 to 4当做序列处理</span></span><br><span class="line"><span class="comment">// 两者是一样的效果</span></span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span> to <span class="number">4</span>) <span class="comment">// wrong, 这样是错误的</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">// 递归相加(跟上面变长参数循环遍历的效果一样)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(args:<span class="type">Int</span>*):<span class="type">Int</span> = &#123;<span class="keyword">if</span> (args.length == <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> args.head + sum(args.tail:_*)&#125;</span><br><span class="line">----调用</span><br><span class="line">sum (<span class="number">1</span> to <span class="number">4</span>:_*) </span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过程 (没有返回值，没有=号)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span></span>(a:<span class="type">Int</span>)&#123;println(a)&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span></span>(a:<span class="type">Int</span>)=&#123;println(a)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span></span>(a:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;println(a)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; 以上<span class="number">3</span>种方式等价</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">//lazy延迟计算</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">lazy</span> <span class="keyword">val</span> x = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"/Users/shixuanji/Documents/IDEs/iTerm2/scala/buyChicked.scala"</span>).mkString</span><br><span class="line">x: <span class="type">String</span> = &lt;<span class="keyword">lazy</span>&gt;</span><br><span class="line">scala&gt; x  </span><br><span class="line">res63: <span class="type">String</span> = <span class="string">"...这里就是加载出来的的文件内容"</span></span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line"><span class="comment">//异常</span></span><br><span class="line">scala&gt;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="string">"hello"</span>.toInt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>&#123;                    <span class="comment">//交给</span></span><br><span class="line">            <span class="keyword">case</span> _:<span class="type">Exception</span>    =&gt; print(<span class="string">"xxxx"</span>) ;</span><br><span class="line">            <span class="keyword">case</span> ex:java.io.<span class="type">IOException</span> =&gt; print(ex)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">-----&gt; 最简单的异常</span><br><span class="line">scala&gt; <span class="keyword">try</span> &#123; <span class="number">1</span>/<span class="number">0</span> &#125; <span class="keyword">catch</span> &#123; <span class="keyword">case</span> _: <span class="type">Exception</span> =&gt; println(<span class="string">"错啦....."</span>) &#125;</span><br><span class="line">错啦.....</span><br><span class="line">res76: <span class="type">AnyVal</span> = ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// _ 的意义</span></span><br><span class="line"><span class="number">1</span>&gt; 通配相当于*</span><br><span class="line"><span class="number">2</span>&gt; <span class="number">1</span> to <span class="number">10</span> :_*    ,转成序列</span><br><span class="line"><span class="number">3</span>&gt; <span class="keyword">case</span> _:<span class="type">Exception</span>    =&gt; print(<span class="string">"xxxx"</span>) ;</span><br></pre></td></tr></table></figure><hr><h1 id="四-数组"><a href="#四-数组" class="headerlink" title="四. 数组"></a>四. 数组</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定长</span></span><br><span class="line">---------------</span><br><span class="line">    java&gt; int[] arr = int int[<span class="number">4</span>] ;</span><br><span class="line">    scala&gt;<span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>);            <span class="comment">//apply(10)</span></span><br><span class="line">    scala&gt;<span class="keyword">var</span> arr = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);                <span class="comment">//推断</span></span><br><span class="line">    scala&gt;arr(<span class="number">0</span>)                                   <span class="comment">//按照下标访问元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 +: 添加元素, 使用 ++: 添加数组, 结果是一个新数组</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">arr: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> arr2 = arr :+ <span class="number">2</span></span><br><span class="line">arr2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr2</span><br><span class="line">res2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; arr</span><br><span class="line">    res3: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变长数组</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt;<span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> buf = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]();            <span class="comment">//创建数组缓冲区对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//+=在末尾追加</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt; buf += <span class="number">3</span></span><br><span class="line">    res156: buf.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; buf .+= (<span class="number">23</span>)</span><br><span class="line">    res157: buf.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">3</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; buf ++= <span class="type">Array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    res158: buf.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">3</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//trimEnd,从末尾移除元素</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt;buf.trimStart(<span class="number">2</span>)</span><br><span class="line">    scala&gt;buf.trimEnd(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove按照索引移除</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt;buf.remove(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert,在0元素位置插入后续数据</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt;buf.insert(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//toArray</span></span><br><span class="line">-------------------</span><br><span class="line">    scala&gt;buf.toArray</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=================================数组操作==================================</span><br><span class="line"><span class="comment">//数组操作</span></span><br><span class="line">  <span class="comment">// 需求: 构造出20以内, 4的倍数的数组</span></span><br><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">    scala&gt; (<span class="keyword">for</span>(x &lt;- <span class="number">1</span> to <span class="number">10</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">yield</span> x * <span class="number">2</span>).toArray</span><br><span class="line">    res107: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line">    scala&gt; <span class="type">Array</span>(<span class="number">1</span> to <span class="number">10</span>:_*).filter(_ % <span class="number">2</span> == <span class="number">0</span>).map(_ * <span class="number">2</span>)</span><br><span class="line">    res109: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">==========================================</span><br><span class="line"><span class="comment">// map函数, 参数是一个函数, 函数的参数必须与调用者的参数构成一致</span></span><br><span class="line"><span class="comment">// 每次拿出一个参数出来算</span></span><br><span class="line"><span class="symbol">'ma</span>p':    把一批元素经过操作以后映射出另一批元素, kv 进, kv 出 </span><br><span class="line"><span class="comment">// filter 函数, 同上</span></span><br><span class="line"><span class="symbol">'filte</span>r': 过滤, 把不符合条件的元素过滤掉</span><br><span class="line">==========================================</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="comment">//数组常用方法</span></span><br><span class="line">--------------------</span><br><span class="line">    scala&gt;arr.sum</span><br><span class="line">    scala&gt;arr.min</span><br><span class="line">    scala&gt;arr.max</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">--------------------</span><br><span class="line">    scala&gt;<span class="keyword">import</span> scala.util.<span class="type">Sorting</span>._</span><br><span class="line">    scala&gt;<span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    scala&gt;quickSort(arr)                <span class="comment">//arr有序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.mkString =&gt; array 转为 string</span></span><br><span class="line">--------------------</span><br><span class="line">    scala&gt; <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">21</span>)</span><br><span class="line">    arr: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; arr</span><br><span class="line">    res164: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; arr.mkString(<span class="string">"&lt;&lt;"</span>,<span class="string">","</span>,<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    res165: <span class="type">String</span> = &lt;&lt;<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">21</span>&gt;&gt;</span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多维数组</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="comment">// 定义方式1</span></span><br><span class="line">    scala&gt; <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]](<span class="number">4</span>)</span><br><span class="line">    arr: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">    scala&gt; arr(<span class="number">0</span>) = <span class="type">Array</span>(<span class="number">1</span>)</span><br><span class="line">    scala&gt; arr(<span class="number">1</span>) = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    scala&gt; arr(<span class="number">2</span>) = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    scala&gt; arr(<span class="number">3</span>) = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; arr</span><br><span class="line">    res128: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">1</span>), <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方式2</span></span><br><span class="line">    <span class="comment">//二维数组,3行4列</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> arr = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment">//下标访问数组元素</span></span><br><span class="line">    scala&gt;arr(<span class="number">0</span>)(<span class="number">1</span>)</span><br><span class="line">    scala&gt;arr.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的遍历</span></span><br><span class="line">--------------------</span><br><span class="line">    scala&gt; a</span><br><span class="line">    res178: <span class="type">String</span> = hello</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until a.length) println(i+<span class="string">":"</span>+a(i))</span><br><span class="line">    <span class="number">0</span>:h</span><br><span class="line">    <span class="number">1</span>:e</span><br><span class="line">    <span class="number">2</span>:l</span><br><span class="line">    <span class="number">3</span>:l</span><br><span class="line">    <span class="number">4</span>:o</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到每个数组中的元素(跟上面的遍历结果一样)</span></span><br><span class="line">--------------------</span><br><span class="line">    scala&gt; arr</span><br><span class="line">    res179: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until arr.length) println(i+<span class="string">":"</span>+arr(i))</span><br><span class="line">    <span class="number">0</span>:[<span class="type">I</span>@<span class="number">36081062</span></span><br><span class="line">    <span class="number">1</span>:[<span class="type">I</span>@<span class="number">70</span>c6f11a</span><br><span class="line">    <span class="number">2</span>:[<span class="type">I</span>@<span class="number">378953</span>bd</span><br><span class="line">     </span><br><span class="line"><span class="comment">//和java对象交互，导入转换类型,使用的隐式转换</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>.bufferAsJavaList</span><br><span class="line"><span class="keyword">val</span> buf = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">val</span> list:java.util.<span class="type">List</span>[<span class="type">Int</span>] = buf ; <span class="comment">// scala 语法中, 泛型时在 中括号中</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line"><span class="comment">// 打印引用类型</span></span><br><span class="line">println(result.toBuffer)<span class="comment">// 打印引用类型的值</span></span><br><span class="line">println(result.mkString(<span class="string">","</span>))<span class="comment">// 以',' 分隔符打印</span></span><br><span class="line">println(arr2.mkString(<span class="string">"&lt;"</span>,<span class="string">":"</span>,<span class="string">"&gt;"</span>))      <span class="comment">// 前后缀 和 分隔符 打印</span></span><br><span class="line">       </span><br><span class="line">println(foreach(println))<span class="comment">// 循环打印</span></span><br></pre></td></tr></table></figure><hr><h1 id="五-Map-映射"><a href="#五-Map-映射" class="headerlink" title="五. Map 映射"></a>五. Map 映射</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 不可变 immutable</span></span><br><span class="line">=============================================================================</span><br><span class="line">    <span class="comment">//scala.collection.immutable.Map[Int,String] =&gt;不可变集合</span></span><br><span class="line">scala&gt;<span class="keyword">val</span> map = <span class="type">Map</span>(<span class="number">100</span>-&gt;<span class="string">"tom"</span>,<span class="number">200</span>-&gt;<span class="string">"tomas"</span>,<span class="number">300</span>-&gt;<span class="string">"tomasLee"</span>)</span><br><span class="line">map: scala.collection.immutable.<span class="type">Map</span>[<span class="type">Int</span>,<span class="type">String</span>] = <span class="type">Map</span>(<span class="number">100</span> -&gt; tom, <span class="number">200</span> -&gt; tomas, <span class="number">300</span> -&gt; tomasLee)</span><br><span class="line">    <span class="comment">//通过key访问value</span></span><br><span class="line">    scala&gt;map(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">    <span class="number">1</span>) 如果是 immutable 的 map 的 <span class="keyword">val</span> 要改变, 只能赋值给新的 <span class="keyword">val</span> , 添加只能用 + 号</span><br><span class="line">    <span class="number">2</span>) 如果是 immutable 的 map 的 <span class="keyword">var</span> 可以直接使用 +=, -= </span><br><span class="line">      <span class="keyword">val</span> newmap = map + (<span class="number">4</span>-&gt;<span class="string">"ttt"</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 可变 mutable</span></span><br><span class="line">=============================================================================</span><br><span class="line"><span class="comment">// 直接定义 hashMap 并赋值</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">    <span class="keyword">import</span> scala.collection.mutable.<span class="type">HashMap</span></span><br><span class="line">    <span class="keyword">var</span> map1 = <span class="type">HashMap</span>(<span class="number">1</span>-&gt;<span class="number">22</span>, <span class="string">"dd"</span>-&gt;<span class="number">33</span>)<span class="comment">//注意, 这里字符串只能使用 双引号 </span></span><br><span class="line">    $scala&gt; map1</span><br><span class="line">    res145: scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="number">2</span> -&gt; <span class="number">33</span>, <span class="number">1</span> -&gt; <span class="number">22</span>)</span><br><span class="line">    scala&gt; map1(<span class="string">"dd"</span>)</span><br><span class="line">    res197: <span class="type">Int</span> = <span class="number">33</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义空hashmap</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">    scala&gt; <span class="keyword">var</span> map2 = <span class="keyword">new</span> <span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>]</span><br><span class="line">    map2: scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>()</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">var</span> map3 = <span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>]()  <span class="comment">// 这里其实就是调用了 apply()</span></span><br><span class="line">    map3: scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hashMap 赋值</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">注意: += / -= 会改变原值,  + / - 不会改变原值,只会改变当次返回值</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">///添加元素: += (k-&gt;v) 注意: 要与定义时类型一致</span></span><br><span class="line">    scala&gt; map2 += (<span class="number">1</span>-&gt;<span class="number">100</span>,<span class="number">2</span>-&gt;<span class="number">200</span>)</span><br><span class="line">    res150: scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="number">2</span> -&gt; <span class="number">200</span>, <span class="number">1</span> -&gt; <span class="number">100</span>)</span><br><span class="line">    ====&gt; 注意: 此时 mutable de  <span class="keyword">var</span> 的  '+=' 和 '+', 效果是一样的</span><br><span class="line">    =====&gt; map2 = map2 + (<span class="number">1</span>-&gt;<span class="number">100</span>,<span class="number">2</span>-&gt;<span class="number">200</span>)  <span class="comment">// 这个写法是错误的, 要么用+, 要么用+=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///删除元素: -= k</span></span><br><span class="line">    scala&gt; map2 -= <span class="number">1</span></span><br><span class="line">    res151: scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="number">2</span> -&gt; <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">==&gt;  注意: 如果key 一样, 会覆盖掉前面的赋值, 相当于修改</span><br><span class="line">==&gt;  当然, 也可以这样修改: &gt;&gt;&gt;  map2(<span class="number">1</span>) = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代map</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">scala&gt;<span class="keyword">for</span> ((k,v) &lt;- map) println(k + <span class="string">":::"</span> + v);</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">for</span> ((k,v) &lt;- map) println(k +<span class="string">":::::"</span> + v)</span><br><span class="line"><span class="number">1</span>:::::<span class="number">33</span></span><br><span class="line"><span class="number">2</span>:::::<span class="number">44</span></span><br><span class="line"><span class="number">3</span>:::::<span class="number">55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用yield操作进行倒排序(kv对调)</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">scala&gt; <span class="keyword">for</span> ((k,v) &lt;- map) <span class="keyword">yield</span> (v,k)</span><br><span class="line">res210: scala.collection.immutable.<span class="type">Map</span>[<span class="type">Int</span>,<span class="type">Int</span>] = <span class="type">Map</span>(<span class="number">33</span> -&gt; <span class="number">1</span>, <span class="number">44</span> -&gt; <span class="number">2</span>, <span class="number">55</span> -&gt; <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// map方法:</span></span><br><span class="line">此方法只能接受一个参数, 这个参数是函数</span><br><span class="line">此参数函数, 也只能接受一个参数, 此参数的类型, 和数组中的元素类型一致</span><br><span class="line">此参数函数最终会返回一个值, 值的类型可以自定义</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> add1 = (x : <span class="type">Int</span>) =&gt; x+<span class="number">1</span> </span><br><span class="line">arr.map(add1)</span><br><span class="line"></span><br><span class="line">arr.map( (x : <span class="type">Int</span>) =&gt; x+<span class="number">1</span> )</span><br><span class="line">arr. map(x =&gt; x +<span class="number">1</span>)</span><br><span class="line">arr.map(_ + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">map.get(<span class="string">"xx"</span>)      <span class="comment">//没有的话就返回空</span></span><br><span class="line">scala&gt; m.getOrElse(<span class="number">0</span>,<span class="string">"no"</span>)   <span class="comment">// 没有的话就返回后面指定的元素</span></span><br></pre></td></tr></table></figure><hr><h1 id="六-元组tuple-最大Tuple22"><a href="#六-元组tuple-最大Tuple22" class="headerlink" title="六. 元组tuple, 最大Tuple22"></a>六. 元组tuple, 最大Tuple22</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二元元祖 叫 对偶</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">元组的定义: 用小括号包起来</span><br><span class="line">---------------------------------------------</span><br><span class="line">    scala&gt; <span class="keyword">val</span> t = (<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>) ;</span><br><span class="line">    scala&gt; t</span><br><span class="line">    res216: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="number">1</span>,tom,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">val</span> t = (<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>)</span><br><span class="line">    t: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>,tom,<span class="number">12</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">val</span> t = (<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    &lt;console&gt;:<span class="number">1</span>: error: too many elements <span class="keyword">for</span> tuple: <span class="number">23</span>, allowed: <span class="number">22</span></span><br><span class="line">           <span class="keyword">val</span> t = (<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="string">"tom"</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">注意: error: too many elements <span class="keyword">for</span> tuple: <span class="number">23</span>, allowed: <span class="number">22</span>  元祖最多<span class="number">22</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元组指定元</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">==&gt; 注意: 元祖序列从 <span class="number">1</span> 开始</span><br><span class="line">scala&gt; <span class="keyword">val</span> t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) ;        <span class="comment">//元组</span></span><br><span class="line">scala&gt;t._2</span><br><span class="line">scala&gt;t _2 (不推荐)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> (a,b,c) = t</span><br><span class="line">==&gt; 相当于一下声明了<span class="number">3</span>个变量, a,b,c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接取出元组中的各分量</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">scala&gt; <span class="keyword">val</span> t = (<span class="number">132</span>,<span class="string">"d4"</span>,<span class="number">3</span>)</span><br><span class="line">t: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>) = (<span class="number">132</span>,d4,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">注意: 前后的元数必须相等</span><br><span class="line">scala&gt; <span class="keyword">val</span> (a,b,c) = t</span><br><span class="line">a: <span class="type">Int</span> = <span class="number">132</span></span><br><span class="line">b: <span class="type">String</span> = d4</span><br><span class="line">c: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">==&gt; 这里就相当于直接定义了 a,b,c 三个变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的zip</span></span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">//西门庆 -&gt; 潘金莲  牛郎 -&gt; 侄女  ,</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> hus = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">hus: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> wife = <span class="type">Array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">wife: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; hus.zip(wife)</span><br><span class="line">res226: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="number">1</span>,<span class="number">4</span>), (<span class="number">2</span>,<span class="number">5</span>), (<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">注意: 个数对不上的就砍掉了</span><br></pre></td></tr></table></figure><hr><h1 id="七-OOP"><a href="#七-OOP" class="headerlink" title="七. OOP"></a>七. OOP</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类 &amp; 基本操作</span></span><br><span class="line">===============================================================</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量, 私有类型, 必须初始化</span></span><br><span class="line">    <span class="comment">// .class 中私有方法查看: javap -private xxx.class</span></span><br><span class="line">    <span class="comment">// getter/setter 也私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p.name  =&gt; getter</span></span><br><span class="line">    <span class="comment">// p.name_=(xx) =&gt; setter </span></span><br><span class="line">    <span class="comment">// p.name = xx  =&gt; setter</span></span><br><span class="line">    <span class="comment">// 生成私有属性, 和共有的 getter/setter 方法</span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"tom"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// val 只有 getter, 没有setter, 定义的是 val 常量</span></span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">100</span>; </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incre</span></span>(a:<span class="type">Int</span>) = &#123;id += a&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果定义时，没有(),调用就不能加()</span></span><br><span class="line">    <span class="comment">// 有的话, 调用的时候就可加可不加</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>() = id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">-&gt;调用</span><br><span class="line"></span><br><span class="line">    scala&gt;<span class="keyword">var</span> p = <span class="keyword">new</span> <span class="type">Person</span>();</span><br><span class="line">    scala&gt;p.current()</span><br><span class="line">    scala&gt;p.current</span><br><span class="line">    scala&gt;p.incr(<span class="number">100</span>)</span><br><span class="line">    scala&gt;p.name</span><br><span class="line">    scala&gt;p.name_=(<span class="string">"kkkk"</span>)</span><br><span class="line">    scala&gt;p.name = <span class="string">"kkkk"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// private[this]作用,控制成员只能在自己的对象中访问。 (对象私有)</span></span><br><span class="line">===============================================================</span><br><span class="line"><span class="number">1</span>) <span class="type">Scala</span>中(<span class="type">Java</span>和 <span class="type">C</span>++ 也一样), 方法可以访问该类的所有对象的私有字段</span><br><span class="line"><span class="number">2</span>) <span class="keyword">private</span>[<span class="keyword">this</span>], 是 <span class="type">Counter</span> 类的方法, 只能访问到当前对象的 value 方法, 而不能访问同样是 <span class="type">Counter</span> 类型的其他对象的该字段.</span><br><span class="line"><span class="number">3</span>) 这样的访问被称为 对象私有的</span><br><span class="line"><span class="number">4</span>) 对于类私有的字段, <span class="type">Scala</span> 生成私有的 getter 和 setter 方法;</span><br><span class="line">    但对于对象私有的字段, <span class="type">Scala</span> 根本不会生成 getter 和 setter 方法</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> value =  <span class="number">0</span> ;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">incre</span></span>(n:<span class="type">Int</span>)&#123;value += n&#125;</span><br><span class="line">        <span class="comment">// 类会定义失败, 下面这句不能访问别类对象的 value</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isLess</span></span>(other:<span class="type">Counter</span>) = value &lt; other.value ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义BeanProperty注解 :TODO</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">===============================================================</span><br><span class="line">&gt; 辅助构造</span><br><span class="line">----------------------</span><br><span class="line">&gt;&gt; 定义</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> id = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">"tom"</span> ;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个辅助构造器</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>();  <span class="comment">// 调用主构造器</span></span><br><span class="line">            <span class="keyword">this</span>.name = name ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//另一个辅助构造</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>)&#123;</span><br><span class="line">            <span class="comment">//调用前一个辅助构造器</span></span><br><span class="line">            <span class="keyword">this</span>(name) ;</span><br><span class="line">            <span class="keyword">this</span>.age = age ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; 使用</span><br><span class="line">scala&gt; <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"tm"</span>)</span><br><span class="line">p: <span class="type">Person</span> = <span class="type">Person</span>@<span class="number">2492</span>f6fb</span><br><span class="line"></span><br><span class="line">scala&gt; p.name</span><br><span class="line">res9: <span class="type">String</span> = tm</span><br><span class="line"></span><br><span class="line">scala&gt; p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"jr"</span>,<span class="number">23</span>)   <span class="comment">// 注意: 此 p 非上面的 p 了</span></span><br><span class="line">p: <span class="type">Person</span> = <span class="type">Person</span>@<span class="number">2536</span>edc3</span><br><span class="line"></span><br><span class="line">scala&gt; p.name</span><br><span class="line">res11: <span class="type">String</span> = jr</span><br><span class="line"></span><br><span class="line">scala&gt; p.age</span><br><span class="line">res12: <span class="type">Int</span> = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 主构造函数</span><br><span class="line">---------------------------------------------</span><br><span class="line">    <span class="comment">//val ===&gt; 只读</span></span><br><span class="line">    <span class="comment">//var ==&gt; get/set</span></span><br><span class="line">    <span class="comment">//none ==&gt; none</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意:  id 前面没有修饰的话, 只有在调用后才升级为成员变量, 否则在 .class 文件中不会出现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name:<span class="type">String</span>, var age:<span class="type">Int</span>, id :<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;编译后生成的文件</span><br><span class="line">javap -<span class="keyword">private</span> <span class="type">Person</span>.<span class="keyword">class</span> -&gt; 显示编译后的 <span class="keyword">private</span> 成员</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;                <span class="comment">// id 调用后才升级为成员变量</span></span><br><span class="line">  <span class="keyword">private</span> int age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> int id;              </span><br><span class="line">  public java.lang.<span class="type">String</span> name();    <span class="comment">// getter</span></span><br><span class="line">  public int age();                  <span class="comment">// getter</span></span><br><span class="line">  public void age_$eq(int);          <span class="comment">// setter</span></span><br><span class="line">  public void hello();               </span><br><span class="line">  public <span class="type">Person</span>(java.lang.<span class="type">String</span>, int, int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line">===============================================================</span><br><span class="line">说明：scala没有静态的概念，'如果需要定义静态成员，可以通过<span class="class"><span class="keyword">object</span><span class="title">实现。</span>'</span></span><br><span class="line"><span class="class">   <span class="title">编译完成后，会生成对应的类，方法都是静态方法，非静态成员对应到单例类中</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">单例类以Util$作为类名称。</span>   </span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">静态方法类</span> <span class="title">以</span> <span class="title">Util</span> <span class="title">为类名称</span>.</span></span><br><span class="line"><span class="class">    <span class="title">scala&gt;object</span> <span class="title">Util</span></span>&#123;</span><br><span class="line">        <span class="comment">//被编译为单例类中.(Util$)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> brand = <span class="string">"benz"</span> ;</span><br><span class="line">        <span class="comment">//被编译为 单独Util 类中的 静态方法 </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">➜  scala javap -<span class="keyword">private</span> <span class="type">Util</span></span><br><span class="line"><span class="type">Compiled</span> from <span class="string">"util.scala"</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">  public static void hello();</span><br><span class="line">&#125;</span><br><span class="line">➜  scala javap -<span class="keyword">private</span> <span class="type">Util</span>$</span><br><span class="line"><span class="type">Compiled</span> from <span class="string">"util.scala"</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Util$</span> </span>&#123;</span><br><span class="line">  public static <span class="type">Util</span>$ <span class="type">MODULE</span>$;</span><br><span class="line">  <span class="keyword">private</span> java.lang.<span class="type">String</span> brand;</span><br><span class="line">  public static &#123;&#125;;</span><br><span class="line">  <span class="keyword">private</span> java.lang.<span class="type">String</span> brand();</span><br><span class="line">  <span class="keyword">private</span> void brand_$eq(java.lang.<span class="type">String</span>);</span><br><span class="line">  public void hello();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Util</span>$();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生对象(companions object)</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="number">1.</span> 类名和<span class="class"><span class="keyword">object</span><span class="title">名称相同，而且必须在一个scala文件中定义。</span></span></span><br><span class="line"><span class="class">2. <span class="title">编译后</span>, <span class="title">会产生2个文件</span>, <span class="title">Car</span>.<span class="title">class</span> <span class="title">和</span> <span class="title">Car$</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">3. <span class="title">静态方法会被编译到</span> <span class="title">Car</span>.<span class="title">class</span> <span class="title">中去</span>, <span class="title">静态方式可直接用类调用</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span>() = println(<span class="string">"stop...."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Car</span></span>&#123;   <span class="comment">// 伴生对象, 目的就是为了产生静态方法</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = println(<span class="string">"run..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line">&gt; 编译后</span><br><span class="line">➜  scala javap -<span class="keyword">private</span> <span class="type">Car</span></span><br><span class="line"><span class="type">Compiled</span> from <span class="string">"companionsObject.scala"</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  public static void run();</span><br><span class="line">  public void stop();</span><br><span class="line">  public <span class="type">Car</span>();</span><br><span class="line">&#125;</span><br><span class="line">➜  scala javap -<span class="keyword">private</span> <span class="type">Car</span>$</span><br><span class="line"><span class="type">Compiled</span> from <span class="string">"companionsObject.scala"</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car$</span> </span>&#123;</span><br><span class="line">  public static <span class="type">Car</span>$ <span class="type">MODULE</span>$;</span><br><span class="line">  public static &#123;&#125;;</span><br><span class="line">  public void run();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Car</span>$();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 因为 main 函数是静态方法, 所以写在伴生对象中</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name:<span class="type">String</span>, var age:<span class="type">Int</span>, id : <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args:<span class="type">Array</span>[<span class="type">String</span>]) = println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜  scala scala main.scala  <span class="comment">// 直接 scala xx.scala 会先编译再运行</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象 &amp; 静态 </span></span><br><span class="line">===============================================================</span><br><span class="line">➜ 抽象 &amp; 静态 test</span><br><span class="line"></span><br><span class="line">➜定义类</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span></span>():<span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object等价于java中的静态。</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Jing8</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span></span>():<span class="type">Unit</span>= println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zangao</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span></span>():<span class="type">Unit</span> = println(<span class="string">"老子是个🐶??"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜ 调用</span><br><span class="line">scala&gt; <span class="type">Jing8</span>.a            <span class="comment">// 静态方法调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Jing8</span>.a</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> za = <span class="keyword">new</span> <span class="type">Zangao</span>()  <span class="comment">// 类创建对象调用</span></span><br><span class="line">za: <span class="type">Zangao</span> = <span class="type">Zangao</span>@<span class="number">77505</span>c0e</span><br><span class="line"></span><br><span class="line">scala&gt; za.a</span><br><span class="line">老子是个🐶??</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line">===============================================================</span><br><span class="line"><span class="number">1</span>) 使用</span><br><span class="line"><span class="comment">// 定义: </span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Util</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(s:<span class="type">String</span>) = println(s) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用: 下面2者是一个意思</span></span><br><span class="line"><span class="type">Util</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="type">Util</span>.apply(<span class="string">"hello world"</span>);</span><br><span class="line">&gt; 运行结果: hello world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 注意点</span><br><span class="line"><span class="comment">// 注意一下2者的区别</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> arr = <span class="type">Array</span>(<span class="number">10</span>)</span><br><span class="line">arr: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr</span><br><span class="line">res18: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">10</span>)</span><br><span class="line">arr: <span class="type">Array</span>[<span class="type">Nothing</span>] = <span class="type">Array</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端编译运行 scala文件</span></span><br><span class="line">===============================================================</span><br><span class="line">scalac编译scala文件，产生<span class="class"><span class="keyword">class</span><span class="title">文件。</span></span></span><br><span class="line"><span class="class"><span class="title">------------------------------------</span></span></span><br><span class="line"><span class="class">    <span class="title">cmd&gt;scalac</span> <span class="title">xxxx</span>.<span class="title">scala</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">运行class程序</span></span></span><br><span class="line"><span class="class"><span class="title">--------------------</span></span></span><br><span class="line"><span class="class">    <span class="title">cmd&gt;scala</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">一步到位</span></span></span><br><span class="line"><span class="class"><span class="title">-------------------</span></span></span><br><span class="line"><span class="class">    <span class="title">cmd&gt;scala</span> <span class="title">Person</span>.<span class="title">scala</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">trait</span>  (<span class="params">类似于 <span class="type">Java</span> 中的 interface </span>)</span></span><br><span class="line"><span class="class"><span class="title">===============================================================</span></span></span><br><span class="line"><span class="class">    <span class="title">traint</span> <span class="title">HelloService</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//包对象，编译完之后生成以 /a/a1/aa1/people/xxx.class..., 一层一层文件夹</span></span><br><span class="line">===============================================================</span><br><span class="line"><span class="keyword">package</span> a.a1.aa1;</span><br><span class="line"><span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">people</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//约束可见性。</span></span><br><span class="line">-----------------------</span><br><span class="line"><span class="keyword">private</span>[<span class="keyword">package</span>|<span class="keyword">this</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包的导入</span></span><br><span class="line">--------------</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">Exception</span></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">A</span>,<span class="type">B</span>,<span class="type">C</span>&#125;            <span class="comment">//同一包下的不同类, 可以用大括号包起来</span></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">A</span> =&gt; <span class="type">A0</span>&#125;        <span class="comment">//别名</span></span><br></pre></td></tr></table></figure><hr><h1 id="八-继承-inheritance"><a href="#八-继承-inheritance" class="headerlink" title="八. 继承 inheritance"></a>八. 继承 inheritance</h1><p><strong>extends</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">继承/扩展</span><br><span class="line">-------------------------------</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">        <span class="comment">//重写,覆盖</span></span><br><span class="line">        <span class="comment">//overload</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>()=&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继承实例</span><br><span class="line">------------------------------</span><br><span class="line">$scala&gt;<span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">val name:<span class="type">String</span></span>)</span>&#123;&#125;</span><br><span class="line">$scala&gt;<span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name:<span class="type">String</span>,val age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;&#125;</span><br><span class="line">$scala&gt;<span class="class"><span class="keyword">class</span> <span class="title">Duck</span>(<span class="params">override val name:<span class="type">String</span>, val age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span>(<span class="params">name:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">注意</span></span>: 如果在构造里为继承的父类传参, 创建的子类对象直接会有值</span><br><span class="line">scala&gt; <span class="class"><span class="keyword">class</span> <span class="title">Duck</span>(<span class="params">name:<span class="type">String</span>, val age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span>(<span class="params">"aa"</span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">var</span> <span class="title">dd</span> </span>= <span class="keyword">new</span> <span class="type">Duck</span>(<span class="string">"cc"</span>,<span class="number">32</span>)</span><br><span class="line">dd: <span class="type">Duck</span> = <span class="type">Duck</span>@<span class="number">12</span>a63c27</span><br><span class="line"></span><br><span class="line">scala&gt; dd.name</span><br><span class="line">res33: <span class="type">String</span> = aa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类型检查和转换</span><br><span class="line">------------------------------</span><br><span class="line">    $scala&gt;<span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;&#125;</span><br><span class="line">    $scala&gt;<span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;&#125;</span><br><span class="line">    $scala&gt;<span class="keyword">val</span> d = <span class="keyword">new</span> <span class="type">Dog</span>();</span><br><span class="line">    $scala&gt;d.isInstanceOf[<span class="type">Animal</span>]            <span class="comment">//true,===&gt; instanceOf</span></span><br><span class="line">    $scala&gt;<span class="keyword">val</span> a = d.asInstanceOf[<span class="type">Animal</span>]    <span class="comment">//强转,===&gt; (Animal)d</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到对象的类 对象类型 得到类型</span></span><br><span class="line">    $scala&gt;d.getClass                        <span class="comment">//d.getClass(); 获取对象类型</span></span><br><span class="line">    $scala&gt;d.getClass == classOf[<span class="type">Dog</span>]        <span class="comment">//精确匹配</span></span><br></pre></td></tr></table></figure><hr><h1 id="九-abstract-trait-file-apply-操作符"><a href="#九-abstract-trait-file-apply-操作符" class="headerlink" title="九. abstract , trait, file, apply, 操作符"></a>九. abstract , trait, file, apply, 操作符</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//抽象类 abstract </span></span><br><span class="line">================================================</span><br><span class="line">$scala&gt;<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">val name:<span class="type">String</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//抽象字段，没有初始化。</span></span><br><span class="line">    <span class="keyword">val</span> id:<span class="type">Int</span>  ;</span><br><span class="line">    <span class="comment">//抽象方法，没有方法体，不需要抽象关键字修饰。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// scala类型树  :TODO</span></span><br><span class="line">================================================</span><br><span class="line">    <span class="type">Any</span></span><br><span class="line">     |</span><br><span class="line">    /|\</span><br><span class="line">     |------------<span class="type">AnyVal</span> &lt;|------<span class="type">Int</span>|<span class="type">Boolean</span>|...|<span class="type">Unit</span></span><br><span class="line">     |------------<span class="type">AnyRef</span> &lt;|------<span class="class"><span class="keyword">class</span> ...</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">读取文件</span> <span class="title">file</span></span></span><br><span class="line"><span class="class"><span class="title">================================================</span></span></span><br><span class="line"><span class="class"><span class="title">-----------in</span> <span class="title">idea</span></span></span><br><span class="line"><span class="class">    <span class="title">import</span> <span class="title">scala</span>.<span class="title">io</span>.<span class="title">Source</span> </span>;</span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">FileDemo</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">val</span> s = <span class="type">Source</span>.fromFile(<span class="string">"d:/hello.txt"</span>) ;</span><br><span class="line">            <span class="keyword">val</span> lines = s.getLines();</span><br><span class="line">            <span class="keyword">for</span>(line &lt;- lines)&#123;</span><br><span class="line">                println(line)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------in terminal</span><br><span class="line">    scala&gt; scala.io.<span class="type">Source</span>.fromFile(<span class="string">"/Users/shixuanji/Documents/IDEs/iTerm2/scala/util.scala"</span>).mkString</span><br><span class="line"><span class="comment">// 下面是上面执行的结果</span></span><br><span class="line">    res34: <span class="type">String</span> =</span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> brand = <span class="string">"benz"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过正则 (具体的查看 dash 的 jdk)</span></span><br><span class="line">\s : 空白字符：[ \t\n\x0B\f\r]</span><br><span class="line">\<span class="type">S</span> : 非空白字符：[^\s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> str = <span class="type">Source</span>.fromFile(<span class="string">"/hello.txt"</span>).mkString</span><br><span class="line"><span class="keyword">val</span> it = str.split(<span class="string">"\\s+"</span>)     <span class="comment">// 过滤掉所有不可见字符分割</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- it)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// trait 接口</span></span><br><span class="line">================================================</span><br><span class="line">&gt;  java中, 实现接口, 用implement ,  scala 中用 <span class="keyword">extends</span></span><br><span class="line">&gt;  如果只有一个<span class="class"><span class="keyword">trait</span><span class="title">使用extends进行扩展，如果多个，使用with对剩余的trait进行扩展。</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">trait</span> <span class="title">logger1</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">log1</span></span>() = println(<span class="string">"hello log1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">logger2</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">log2</span></span>() = println(<span class="string">"hello log2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt;  <span class="class"><span class="keyword">trait</span>(<span class="params">接口</span>)<span class="title">之间也可以存在扩展。</span>     </span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">logger1</span> <span class="keyword">with</span> <span class="title">logger2</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自身类型 :TODO  还不明白是啥意思, 有空看看  书 : 10.13 Self Types &amp; 18.10</span></span><br><span class="line">================================================</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">logger</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>:<span class="type">Dog</span> =&gt; </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = println(<span class="string">"run...."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">Jing8</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">with</span> <span class="title">logger</span></span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">logger</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符</span></span><br><span class="line">================================================</span><br><span class="line">    <span class="comment">//中置操作符</span></span><br><span class="line">    scala&gt; <span class="number">1</span> + <span class="number">2</span>            <span class="comment">//</span></span><br><span class="line">    scala&gt; <span class="number">1.</span>+(<span class="number">2</span>)            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元操作符</span></span><br><span class="line">    scala&gt; <span class="number">1</span> toString        <span class="comment">//+: -:取反 !:boolean取反 ~:按位取反</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值操作符 </span></span><br><span class="line">    $scala&gt;+= , -= , *=,  /=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//:表示右结合,只有:结尾的操作符是右结合,优先级从右侧开始</span></span><br><span class="line">----&gt; 用于构造列表的操作符 :: 是右结合的</span><br><span class="line">    scala&gt;<span class="keyword">val</span> l = <span class="type">Nil</span>        <span class="comment">//构造空集合.</span></span><br><span class="line">    scala&gt;<span class="number">1</span>::<span class="number">2</span>::<span class="type">Nil</span>            <span class="comment">//1::(2::Nil), 先创建包含2的列表, 这个列表又被作为为嘛频道以1为头部的列表中</span></span><br><span class="line">    scala&gt;<span class="type">Nil</span>.::(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply()/update()   --&gt; 其实就是在等号两侧的问题</span></span><br><span class="line">================================================</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="type">Array</span>(<span class="number">100</span>)            <span class="comment">//Array.apply(100);</span></span><br><span class="line">    arr(<span class="number">0</span>) = <span class="number">200</span>            <span class="comment">//arr.update(0,1234)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply(), 接受的是属性参数, 返回的是对象, 内部就是 new 了一个对象</span></span><br><span class="line"><span class="comment">//unapply(),是apply的逆向过程,接受的是对象, 返回的是参数(对象中的属性值), 如果用一个元祖中, 传入相应的变量名, 就相当于给这些变量赋值了</span></span><br><span class="line">    <span class="comment">//定义类</span></span><br><span class="line">------------</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span>(<span class="params">val n:<span class="type">Int</span>,val d:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Fraction</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(n : <span class="type">Int</span>,d:<span class="type">Int</span>)= <span class="keyword">new</span> <span class="type">Fraction</span>(n,d) </span><br><span class="line">    <span class="comment">//逆向过程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(f:<span class="type">Fraction</span>) = <span class="type">Some</span>(f.n,f.d)</span><br><span class="line">&#125;</span><br><span class="line">-------------</span><br><span class="line"><span class="comment">// 因为定义了 apply, 所以直接调用  Fraction(1,2) 就会创建一个对象</span></span><br><span class="line">    scala&gt; <span class="keyword">val</span> f = <span class="type">Fraction</span>(<span class="number">1</span>,<span class="number">2</span>)            <span class="comment">//apply(...)</span></span><br><span class="line">&gt; 执行结果</span><br><span class="line">    scala&gt; f</span><br><span class="line">    res254: <span class="type">Fraction</span> = <span class="type">Fraction</span>@<span class="number">30</span>d2895e</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把定义的函数 还原成 Fraction, 此时, 就相当于定义了 a,b</span></span><br><span class="line">    scala&gt; <span class="keyword">val</span> <span class="type">Fraction</span>(a,b) = f            <span class="comment">//unapply(...)</span></span><br><span class="line">&gt; 执行结果</span><br><span class="line">    a: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">    b: <span class="type">Int</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><h1 id="十-高阶函数"><a href="#十-高阶函数" class="headerlink" title="十. 高阶函数"></a>十. 高阶函数</h1><p><a href="https://www.jianshu.com/p/d5ce4c683703" target="_blank" rel="noopener">—&gt; 函数 Function 和  方法 Method 的区别, 见这里</a></p><p><strong>查看函数</strong>: 直接输入函数名</p><p><strong>查看方法</strong>: 输入方法名之后, 按 tab 键提示, 也会展示方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">基本函数定义</span><br><span class="line">           参数&amp;类型       =&gt; 实现</span><br><span class="line"><span class="keyword">val</span> f1 = (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y</span><br><span class="line"><span class="keyword">val</span> f2 = (a:<span class="type">Double</span>)=&gt;a*a</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义高阶函数 例子1</span></span><br><span class="line">================================================================</span><br><span class="line">    <span class="comment">// f 指参数, f的类型是 (Double)=&gt;Double 函数</span></span><br><span class="line">   <span class="comment">//  这里的参数 f 可以是任何接受 Double 并返回 Double 的函数, valueAtOneQuarter 函数, 将计算那个函数在 0.25位置的值</span></span><br><span class="line"><span class="comment">// 注意: 这里只接受一个 Double 参数</span></span><br><span class="line"><span class="keyword">import</span> scala.math._  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueAtOneQuarter</span></span>(f:<span class="type">Double</span>=&gt;<span class="type">Double</span>) = f(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">    <span class="comment">// 往单函数参数的函数 的 参数中, 传一个函数, 此函数符合 (Double)=&gt;Double) 的特征, 然后往此函数中, 传值 0.25</span></span><br><span class="line"><span class="keyword">val</span> f2 = (a:<span class="type">Double</span>)=&gt;a*</span><br><span class="line">valueAtOneQuarter(f2)   <span class="comment">// 执行时, 会把后面的 0.25传入到</span></span><br><span class="line">valueAtOneQuarter(cail _)<span class="comment">// cail 函数: 大于传入值的最小整数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶函数例子2</span></span><br><span class="line">================================================================</span><br><span class="line">    <span class="comment">//              参数       =  函数体(函数) </span></span><br><span class="line"><span class="comment">//    参数      =&gt;  返回值  </span></span><br><span class="line"><span class="comment">// 方法的实现是一个函数, 此函数有自己定义的参数, 有从方法体中传来的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mulby</span></span>(factor : <span class="type">Double</span>) = (x:<span class="type">Double</span>) =&gt; x * factor</span><br><span class="line">    mulby(<span class="number">2</span>)</span><br><span class="line">    scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mulby</span></span>(factor : <span class="type">Double</span>) = (x:<span class="type">Double</span>) =&gt; x * factor</span><br><span class="line">    mulby: (factor: <span class="type">Double</span>)<span class="type">Double</span> =&gt; <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    scala&gt; mulby(<span class="number">2</span>)</span><br><span class="line">    res9: <span class="type">Double</span> =&gt; <span class="type">Double</span> = $$<span class="type">Lambda</span>$<span class="number">1165</span>/<span class="number">745462106</span>@<span class="number">3</span>d3e9163</span><br><span class="line"></span><br><span class="line">    scala&gt; mulby(<span class="number">2</span>)(<span class="number">2</span>)</span><br><span class="line">    res10: <span class="type">Double</span> = <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 接下来把次mulby 方法, 转成函数试试</span><br><span class="line">    scala&gt; <span class="keyword">val</span> f_mulby = mulby _</span><br><span class="line">    f_mulby: <span class="type">Double</span> =&gt; (<span class="type">Double</span> =&gt; <span class="type">Double</span>) = $$<span class="type">Lambda</span>$<span class="number">1364</span>/<span class="number">1154393787</span>@<span class="number">6307382</span></span><br><span class="line">&gt;&gt;&gt; 调用方式还是一样的</span><br><span class="line">f_mulby(<span class="number">2</span>)(<span class="number">2</span>)</span><br><span class="line">-------------------------</span><br><span class="line">    scala&gt;<span class="function"><span class="keyword">def</span> <span class="title">multi</span></span>(n:<span class="type">Int</span>) = n * <span class="number">2</span></span><br><span class="line">    scala&gt;<span class="function"><span class="keyword">def</span> <span class="title">f</span> </span>= multi _                <span class="comment">// _ 表示:把multi 转为函数</span></span><br><span class="line">    scala&gt;<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).map(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line">    scala&gt;(n:<span class="type">Double</span>)=&gt;<span class="number">3</span> * n                <span class="comment">// 匿名函数</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> f = (n:<span class="type">Double</span>)=&gt;<span class="number">3</span> * n     <span class="comment">// 变量引用匿名函数</span></span><br><span class="line">    scala&gt;<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).map( (x) =&gt; x * <span class="number">3</span> );    <span class="comment">//把匿名函数传递给 map 方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义高阶函数 例子3</span></span><br><span class="line">==============================================================================</span><br><span class="line"><span class="comment">// 定义 call 方法, 其中2个参数也为函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>, f1:(<span class="type">Int</span>,<span class="type">Int</span>)=&gt; <span class="type">Int</span>, f2:(<span class="type">Int</span>,<span class="type">Int</span>)=&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; <span class="number">0</span>)  f1(a,b);</span><br><span class="line">    <span class="keyword">else</span>       f2(a,b);</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;&gt; call: (a: <span class="type">Int</span>, b: <span class="type">Int</span>, f1: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>, f2: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  定义方法, 再把方法转为函数</span></span><br><span class="line"><span class="comment">// 定义2个参数的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>) = a+b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>) = a-b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法转为 f1, f2  (当然, 也可以直接定义函数)</span></span><br><span class="line"><span class="keyword">val</span> f1 = add _</span><br><span class="line"><span class="keyword">val</span> f2 = sub _</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  直接定义函数</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> f1 = (a : <span class="type">Int</span>, b : <span class="type">Int</span>) =&gt; &#123; a + b &#125;</span><br><span class="line">f1: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = $$<span class="type">Lambda</span>$<span class="number">1388</span>/<span class="number">1164150759</span>@<span class="number">4</span>d41b630</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> f2 = (a : <span class="type">Int</span>, b : <span class="type">Int</span>) =&gt; &#123; a - b &#125;</span><br><span class="line">f2: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = $$<span class="type">Lambda</span>$<span class="number">1389</span>/<span class="number">1260221930</span>@<span class="number">37</span>dc38cc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用, 可以用f1,f2,  也可以直接使用方法名调用, 会默认转为函数 :TODO 了解原理</span></span><br><span class="line">call(<span class="number">-1</span>,<span class="number">2</span>,f1,f2)</span><br><span class="line">call(<span class="number">1</span>,<span class="number">2</span>,add _, sub _)</span><br><span class="line">call(<span class="number">1</span>,<span class="number">2</span>,add,sub)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// call 函数提升</span></span><br><span class="line">============================================================</span><br><span class="line">需求: 以 call 函数的返回值<span class="number">3</span>为系数, 然后传另一个数 x 到  函数y = <span class="number">3</span> * x 中, 得到 y</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">    <span class="keyword">val</span> f = call(<span class="number">1</span>,<span class="number">2</span>,f1,f2)</span><br><span class="line">    f(<span class="number">100</span>) = <span class="number">300</span> ;</span><br><span class="line">    call(<span class="number">1</span>,<span class="number">2</span>,add _,sub _)(<span class="number">100</span>) = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">--&gt;&gt; 定义</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>,f1:(<span class="type">Int</span>,<span class="type">Int</span>)=&gt;<span class="type">Int</span>,f2:(<span class="type">Int</span>,<span class="type">Int</span>)=&gt;<span class="type">Int</span>)= &#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">0</span>) n = f1(a,b) ;</span><br><span class="line">        <span class="keyword">else</span>      n = f2(a,b) ;</span><br><span class="line">        <span class="comment">// 定义方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">multi</span></span>(x:<span class="type">Int</span>) = x * n ;</span><br><span class="line">        <span class="comment">// 转为函数</span></span><br><span class="line">        multi _</span><br><span class="line">    &#125;</span><br><span class="line">➜ </span><br><span class="line">call: (a: <span class="type">Int</span>, b: <span class="type">Int</span>, f1: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>, f2: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>)<span class="type">Int</span> =&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">➜ 调用</span><br><span class="line">    scala&gt; call(<span class="number">1</span>,<span class="number">2</span>,add _, sub _)(<span class="number">100</span>)</span><br><span class="line">    res4: <span class="type">Int</span> = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">➜ 也可以在这里直接调用函数, 传的是函数的实参, 函数的实现:</span><br><span class="line"><span class="comment">// f1 的实现是 a+b, f2 的实现是 a-b, 而调用f1或f2 在 call 方法定义的时候</span></span><br><span class="line"><span class="comment">// 就已经指定了, 而参数也由前面的 a, b 传进来, 所以这里就可以直接调用了.</span></span><br><span class="line"><span class="comment">// 此call方法的返回值是一个函数, 此函数需要2个参数, 一个是前面的执行结果</span></span><br><span class="line"><span class="comment">// 一个是需要调用者传进来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里也可以把 call方法 的返回值赋值给一个 函数变量, 再给这个函数变量传值</span></span><br><span class="line"><span class="keyword">val</span> f = call(<span class="number">1</span>,<span class="number">2</span>,(a:<span class="type">Int</span>,b:<span class="type">Int</span>) =&gt; a+b,(a:<span class="type">Int</span>,b:<span class="type">Int</span>) =&gt; a-b)</span><br><span class="line">scala&gt; f(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">也可以直接在后面接上 <span class="number">100</span>, 直接传参</span><br><span class="line">call(<span class="number">1</span>,<span class="number">2</span>,(a:<span class="type">Int</span>,b:<span class="type">Int</span>) =&gt; a+b,(a:<span class="type">Int</span>,b:<span class="type">Int</span>) =&gt; a-b)(<span class="number">100</span>)</span><br><span class="line">res7: <span class="type">Int</span> = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型参数可以去掉, 因为使用的参数可以自动推导出参数的类型</span></span><br><span class="line">    call(<span class="number">1</span>,<span class="number">2</span>,(a:<span class="type">Int</span>,b:<span class="type">Int</span>)=&gt;a + b , (a:<span class="type">Int</span>,b:<span class="type">Int</span>)=&gt; a- b)(<span class="number">100</span>)</span><br><span class="line"><span class="comment">// 精简过后</span></span><br><span class="line">    call(<span class="number">1</span>,<span class="number">2</span>,(a,b)=&gt;a + b , (a,b)=&gt; a- b)(<span class="number">100</span>)            </span><br><span class="line"></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜ ➜➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数推断</span></span><br><span class="line"><span class="comment">// 很显然, 此方法参数是一个函数, 函数只有一个参数, 参数\返回值都是 Double 类型</span></span><br><span class="line"><span class="comment">// 注意: 里面的函数是 形参, 也就是说 只是顶一个一个 f 函数, 参数&amp;返回值类型为 Double, 并没有定义实现, 在传函数的时候, 要给出实现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueAt</span></span>(f:(<span class="type">Double</span>)=&gt;<span class="type">Double</span>) = f(<span class="number">0.25</span>)</span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">    valueAt((x:<span class="type">Double</span>)=&gt;x * <span class="number">3</span>)                <span class="comment">//定义类型</span></span><br><span class="line">    valueAt((x)=&gt;x * <span class="number">3</span>)                       <span class="comment">//推断类型</span></span><br><span class="line">    valueAt(x=&gt;x * <span class="number">3</span>)                         <span class="comment">//省略()</span></span><br><span class="line">    valueAt(<span class="number">3</span> * _)                            <span class="comment">//参数在右侧出现1次，就可以使用_代替。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//高级函数</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">    scala&gt; <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    scala&gt; arr.map(<span class="number">2</span> * _);                    <span class="comment">//每个元素x2</span></span><br><span class="line">    scala&gt; arr.map((e:<span class="type">Int</span>)=&gt; e * <span class="number">2</span>);           <span class="comment">//每个元素x2</span></span><br><span class="line">    scala&gt; arr.map(_ * <span class="number">2</span>);                    <span class="comment">//每个元素x2</span></span><br><span class="line">scala&gt; arr.filter(_ % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">// 过滤出集合中的偶数</span></span><br><span class="line">res55: scala.collection.immutable.<span class="type">IndexedSeq</span>[<span class="type">Int</span>] = <span class="type">Vector</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它的简单应用</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"><span class="comment">// 在元素 * 3前先打印</span></span><br><span class="line">    scala&gt; <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).map(e =&gt; &#123;println(e); e * <span class="number">3</span>&#125;)</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">res56: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 过滤</span></span><br><span class="line">    scala&gt; <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).filter(e =&gt; e%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    res14: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-10 先扩大3倍, 再过滤出偶数</span></span><br><span class="line">    scala&gt; <span class="type">Array</span>(<span class="number">1</span> to <span class="number">10</span>:_*).map(<span class="number">3</span> * _).filter(_ % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    res16: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出三角形 foreach 函数</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">    scala&gt;(<span class="number">1</span> to <span class="number">9</span>).map(<span class="string">"*"</span> * _).foreach(println)</span><br><span class="line">    scala&gt;(<span class="number">1</span> to <span class="number">9</span>).map(<span class="string">"*"</span> * _).foreach(println _)</span><br><span class="line">    scala&gt;(<span class="number">1</span> to <span class="number">9</span>).map(<span class="string">"*"</span> * _).foreach(println (_))</span><br><span class="line">    scala&gt; <span class="type">Array</span>(<span class="number">1</span> to <span class="number">9</span>:_*).map(<span class="string">"*"</span> * _).foreach(println _)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduceLeft / reduceRight 函数</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"><span class="comment">//reduceLeft,由左至右, 每次进2个参数</span></span><br><span class="line">    <span class="keyword">val</span> r = (<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line">    scala&gt; r.reduceLeft(_ + _)</span><br><span class="line">    scala&gt; r.reduceLeft(_ - _)</span><br><span class="line">...</span><br><span class="line">→ 执行流程</span><br><span class="line"><span class="comment">//1,2,3 ==&gt; (1 - 2) -3)    = -4</span></span><br><span class="line"></span><br><span class="line"><span class="type">MR</span>:<span class="type">MapTask</span> + reduceTask,映射化简.</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduceRight,由右至左</span></span><br><span class="line">scala&gt; r.reduceRight(_-_)</span><br><span class="line">...</span><br><span class="line">→ 执行流程</span><br><span class="line">    <span class="comment">//1,2,3 ==&gt;1 - (2 - 3)= 2</span></span><br><span class="line">    <span class="comment">//1,2,3,4 ==&gt; 1 - (2 - (3 - 4)) = -2</span></span><br><span class="line">    <span class="comment">//1,2,3,4 ==&gt; 1 - (2 - (3 - 4)) = -2</span></span><br></pre></td></tr></table></figure><hr><h1 id="十一-柯里化"><a href="#十一-柯里化" class="headerlink" title="十一. 柯里化"></a>十一. 柯里化</h1><p><strong>概念:</strong>  以逻辑学家 Haskell Brooks Curry 的名字命名 </p><p><strong>将原来接受2个参数的函数, 变成新的接受一个参数的函数的过程.</strong> </p><p><strong>新的函数返回一个以原有第二个参数作为参数的函数</strong> </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">→ 原函数</span><br><span class="line">scala&gt;<span class="function"><span class="keyword">def</span> <span class="title">mul</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>) = a  * b;</span><br><span class="line">scala&gt;mul(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">→ 柯里化</span><br><span class="line">scala&gt;<span class="function"><span class="keyword">def</span> <span class="title">mulone</span></span>(a:<span class="type">Int</span>) = &#123;(x:<span class="type">Int</span>) =&gt; a * x ;&#125;</span><br><span class="line">scala&gt;mulone(<span class="number">1</span>)(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">→→→→→→→ 柯里化测试</span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">mulone</span></span>(a:<span class="type">Int</span>) = &#123;(x:<span class="type">Int</span>) =&gt; a * x&#125;</span><br><span class="line">mulone: (a: <span class="type">Int</span>)<span class="type">Int</span> =&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先传入一个参数, 得到的是另一函数 x:Int =&gt; x * 2 (也就是原方法的方法体)</span></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">f</span> </span>= mulone(<span class="number">2</span>)</span><br><span class="line">f: <span class="type">Int</span> =&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时接着再传入参数 4, 得到 4*2 =&gt; 8 </span></span><br><span class="line">scala&gt; f(<span class="number">4</span>)</span><br><span class="line">res33: <span class="type">Int</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接传入2个参数可直接调用此方法, 返回结果</span></span><br><span class="line">scala&gt; mulone(<span class="number">2</span>)(<span class="number">4</span>)</span><br><span class="line">res34: <span class="type">Int</span> = <span class="number">8</span></span><br></pre></td></tr></table></figure><p><strong>与柯里化相关的知识点(方法向函数的转换)</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 多个参数的方法可以转换为多元函数</span><br><span class="line">-------------------</span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">plus</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = x + y</span><br><span class="line">plus: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line"></span><br><span class="line">scala&gt; plus _</span><br><span class="line">res63: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = $$<span class="type">Lambda</span>$<span class="number">1495</span>/<span class="number">772136419</span>@<span class="number">16</span>b54416</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 多个参数的方法变成柯里函数 ---&gt;  方法定义的时候, 不同的参数用 '()' 分开</span><br><span class="line">---------------------</span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">plus</span></span>(x: <span class="type">Int</span>)(y: <span class="type">Int</span>): <span class="type">Int</span> = x + y</span><br><span class="line">plus: (x: <span class="type">Int</span>)(y: <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line"></span><br><span class="line">scala&gt; plus _</span><br><span class="line">res64: <span class="type">Int</span> =&gt; (<span class="type">Int</span> =&gt; <span class="type">Int</span>) = $$<span class="type">Lambda</span>$<span class="number">1496</span>/<span class="number">662093445</span>@<span class="number">51927988</span></span><br></pre></td></tr></table></figure><hr><h1 id="十二-控制抽象"><a href="#十二-控制抽象" class="headerlink" title="十二. 控制抽象"></a>十二. 控制抽象</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于 OC 中的 block, 此 block 无参数无返回值 :TODO 是控制</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"><span class="number">1</span>) 定义过程，启动分线程执行block代码. 方法的参数是一个 block 无参无返函数</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newThread</span></span>(block: () =&gt; <span class="type">Unit</span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="type">Thread</span>() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123;</span><br><span class="line">          block();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">-----------------</span><br><span class="line"><span class="number">2</span>) 调用 newThread方法, 并给 block 传值 <span class="symbol">'newThread</span>(()=&gt;&#123;...&#125;)'</span><br><span class="line">    newThread(() =&gt; &#123;</span><br><span class="line">      (<span class="number">1</span> to <span class="number">10</span>).foreach(e =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> tname = <span class="type">Thread</span>.currentThread.getName();</span><br><span class="line">        println(tname + <span class="string">" : "</span> + e);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">-------打印结果----------</span><br><span class="line">scala&gt; <span class="type">Thread</span><span class="number">-3</span> : <span class="number">1</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">2</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">3</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">4</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">5</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">6</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">7</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">8</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">9</span></span><br><span class="line"><span class="type">Thread</span><span class="number">-3</span> : <span class="number">10</span></span><br><span class="line"></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line"><span class="type">PS</span>: 在 定义方法的时候, 可省略<span class="symbol">'newThread</span>(()=&gt;&#123;...&#125;)'前面的括号, 因为没有参数</span><br><span class="line">   在调用方法, 写 block 中的内容时 <span class="symbol">'newThread</span>(() =&gt; &#123;&#125;)', 可以直接写大括号&#123;&#125;中的代码逻辑, 其实这玩意儿就是 语法糖</span><br></pre></td></tr></table></figure><hr><h1 id="十三-集合"><a href="#十三-集合" class="headerlink" title="十三. 集合"></a>十三. 集合</h1><h4 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h4><p><strong>List 在添加元素时注意点,详细代码见下面:</strong> </p><ul><li>使用 <code>+:</code>  或<code>:=</code>添加单个元素时,  <code>:</code>必须靠着 list 一侧, <code>+</code> 必须靠着 单个元素 </li><li>如果2边都是 list 集合, 必须用  <code>++:</code>或者 <code>:::</code>  或者 <code>++</code></li><li>不管是 <code>+: , :+ ,  ++:</code>,  都不会改变原 list 的值 </li><li>要添加的 <code>元素 / list</code> 在原 list 的哪边, 就添加到 list 的 那边</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Nil (List空集合)</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line">scala&gt; <span class="number">1</span>::<span class="number">2</span>::<span class="type">Nil</span></span><br><span class="line">res71: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> l1 = <span class="number">1</span>::<span class="number">2</span>::<span class="type">Nil</span></span><br><span class="line">l1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; l1</span><br><span class="line">res72: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="number">9</span>::l1</span><br><span class="line">res73: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// List 求和</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line">方式<span class="number">1</span>-递归</span><br><span class="line">-----------</span><br><span class="line">定义&gt;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(list:<span class="type">List</span>[<span class="type">Int</span>]) : <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="type">Nil</span>) <span class="number">0</span> <span class="keyword">else</span> list.head + sum(list.tail)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sum: (list: <span class="type">List</span>[<span class="type">Int</span>])<span class="type">Int</span></span><br><span class="line"></span><br><span class="line">调用&gt;</span><br><span class="line">    scala&gt; <span class="keyword">val</span> list = <span class="number">1</span>::<span class="number">2</span>::<span class="number">3</span>::<span class="number">4</span>::<span class="type">Nil</span></span><br><span class="line">    list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; sum(list)</span><br><span class="line">res41: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span>-模式匹配</span><br><span class="line">-----------</span><br><span class="line">其实本质上也是递归</span><br><span class="line">定义&gt;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(list:<span class="type">List</span>[<span class="type">Int</span>]) : <span class="type">Int</span> = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> a::b =&gt; a + sum(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意: ::将列表 析构 成头部和尾部</span><br><span class="line">递归之所以那么自然, 因为列表的尾部正好又是一个列表</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">scala 类库的 sum</span><br><span class="line"><span class="type">List</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// List 添加元素</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜ </span><br><span class="line">注意点: <span class="number">1</span>) 使用 +:  或 := 添加单个元素时,  : 必须靠着 list 一侧, + 必须靠着 单个元素</span><br><span class="line">        <span class="number">2</span>) 如果<span class="number">2</span>边都是 list, 必须用  ++: </span><br><span class="line">        <span class="number">3</span>) 不管是 +:  :+   ++:,  都不会改变原 list 的值</span><br><span class="line">    <span class="number">4</span>) 要添加的 元素 / list 在哪边, 就添加到数组的哪边</span><br><span class="line">    scala&gt; <span class="keyword">var</span> list2 = <span class="number">1</span>::<span class="number">2</span>::<span class="number">3</span>::<span class="number">5</span>::<span class="number">4</span>::<span class="type">Nil</span></span><br><span class="line">    list2: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; list2</span><br><span class="line">    res46: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; list2 :+ <span class="number">3</span></span><br><span class="line">    res81: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="number">3</span> +: list2</span><br><span class="line">    res82: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; list2</span><br><span class="line">    res88: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; list2 ++: <span class="type">List</span>(<span class="number">99</span>)</span><br><span class="line">    res86: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="type">List</span>(<span class="number">78</span>) ++: list2</span><br><span class="line">    res87: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">78</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ++ 添加 实现2集合合并</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> l1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    scala&gt;<span class="keyword">val</span> l2 = <span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line">    scala&gt;l1 ++ l2               ++  与          :: 效果相同     <span class="comment">// 是在l1的后面加上l2</span></span><br><span class="line">    scala&gt;l1 ++: l2              ++: 与 :::  效果相同          <span class="comment">// 是在 l2的前面加上l1</span></span><br></pre></td></tr></table></figure><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h4><p><strong>注意:</strong> </p><ul><li><strong>不可变 Set</strong> 添加的是 <strong>元祖</strong>, 使用<code>+=</code>  产生新集合, <strong>自身无法改变</strong>, 可以赋值给新的常量 val</li><li><strong>可变 Set 也可以使用 <code>+=</code> 添加 元祖</strong>, <strong>改变自身</strong>,  还可以<strong>使用 <code>++=</code> 添加其他集合, 比如 List, Array, Range(1 to 10) 等…</strong></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set 可变集合的操作(默认)</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="comment">// Set 添加成员(元祖, 会自动去重, 无序)</span></span><br><span class="line">    scala&gt;<span class="keyword">val</span> set = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    scala&gt;set + (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">    scala&gt;set - (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    scala&gt;<span class="keyword">val</span> s1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    scala&gt;<span class="keyword">val</span> s2 = <span class="type">Set</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    scala&gt;s1 | s2                   <span class="comment">//并集</span></span><br><span class="line">    scala&gt;s1 &amp; s2                  <span class="comment">//交集</span></span><br><span class="line">    scala&gt;s1 &amp;~ s2                <span class="comment">//差集(1,2,3) - (2,3,4) = (1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 不可变集合的操作</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"># 导包</span><br><span class="line">scala&gt;<span class="keyword">import</span> scala.collection.mutable.&#123;<span class="type">Set</span> =&gt; <span class="type">MSet</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 += 添加元祖</span></span><br><span class="line">scala&gt; mset += <span class="number">3</span></span><br><span class="line">res129: mset.<span class="keyword">type</span> = <span class="type">Set</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">43</span>, 😎</span><br><span class="line"></span><br><span class="line">scala&gt; mset += (<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>)</span><br><span class="line">res132: mset.<span class="keyword">type</span> = <span class="type">Set</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">43</span>, 😎</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ++= 添加 Array, List, Range...</span></span><br><span class="line">scala&gt; mset ++= <span class="type">Array</span>(<span class="number">3</span>,<span class="number">45</span>)</span><br><span class="line">res125: mset.<span class="keyword">type</span> = <span class="type">Set</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, 😎</span><br><span class="line"></span><br><span class="line">scala&gt; mset ++= <span class="type">List</span>(<span class="number">43</span>,<span class="number">98</span>)</span><br><span class="line">res128: mset.<span class="keyword">type</span> = <span class="type">Set</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">43</span>, 😎</span><br><span class="line"></span><br><span class="line">scala&gt; mset ++= (<span class="number">0</span> to <span class="number">10</span>)</span><br><span class="line">res123: mset.<span class="keyword">type</span> = <span class="type">Set</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, 😎</span><br></pre></td></tr></table></figure><h4 id="其他的一些操作"><a href="#其他的一些操作" class="headerlink" title="其他的一些操作"></a>其他的一些操作</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要是 ArrayBuffer的</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">scala&gt; <span class="keyword">import</span> scala.collection.mutable._</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> buf = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">buf: scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="number">2</span> +=: buf</span><br><span class="line">res138: buf.<span class="keyword">type</span> = <span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取前2个元素, buf 本身不变</span></span><br><span class="line">scala&gt; buf.take(<span class="number">2</span>)</span><br><span class="line">res139: scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除前2个元素, buf 本身不变</span></span><br><span class="line">scala&gt; buf.drop(<span class="number">2</span>)</span><br><span class="line">res141: scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; buf</span><br><span class="line">res142: scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置进行切割，形成两个新集合。</span></span><br><span class="line">scala&gt; buf.splitAt(<span class="number">2</span>)</span><br><span class="line">res143: (scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>], scala.collection.mutable.<span class="type">ArrayBuffer</span>[<span class="type">Int</span>]) = (<span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">1</span>),<span class="type">ArrayBuffer</span>(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> b1 = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> b2 = <span class="type">ArrayBuffer</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 舍弃掉少的</span></span><br><span class="line">scala&gt; b1.zip(b2)</span><br><span class="line">res145: scala.collection.mutable.<span class="type">ArrayBuffer</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">ArrayBuffer</span>((<span class="number">1</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//  b1不够, 用-1补, b2不够, 用-2补</span></span><br><span class="line">scala&gt; b1.zipAll(b2,<span class="number">-1</span>,<span class="number">-2</span>)</span><br><span class="line">res146: scala.collection.mutable.<span class="type">ArrayBuffer</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">ArrayBuffer</span>((<span class="number">1</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">5</span>), (<span class="number">-1</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素和自己的索引形成tuple.,元素在前, 索引在后</span></span><br><span class="line">scala&gt; b1.zipWithIndex</span><br><span class="line">res147: scala.collection.mutable.<span class="type">ArrayBuffer</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">ArrayBuffer</span>((<span class="number">1</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">scala&gt; b1.zip(b2).zipWithIndex</span><br><span class="line">res148: scala.collection.mutable.<span class="type">ArrayBuffer</span>[((<span class="type">Int</span>, <span class="type">Int</span>), <span class="type">Int</span>)] = <span class="type">ArrayBuffer</span>(((<span class="number">1</span>,<span class="number">3</span>),<span class="number">0</span>), ((<span class="number">2</span>,<span class="number">4</span>),<span class="number">1</span>), ((<span class="number">3</span>,<span class="number">5</span>),<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左右折叠</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="comment">//左折叠</span></span><br><span class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>).foldLeft(<span class="number">0</span>)(_-_)</span><br><span class="line">res87: <span class="type">Int</span> = <span class="number">-19</span></span><br><span class="line">    (<span class="number">0</span> - <span class="number">1</span>) - <span class="number">7</span> - <span class="number">2</span> - <span class="number">9</span>            <span class="comment">//-19</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//右折叠</span></span><br><span class="line">scala&gt; <span class="type">List</span>(<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>).foldRight(<span class="number">0</span>)(_-_)</span><br><span class="line">res88: <span class="type">Int</span> = <span class="number">-13</span></span><br><span class="line">    <span class="number">1</span>  - (<span class="number">7</span> - (<span class="number">2</span> - (<span class="number">9</span> - <span class="number">0</span>))_    <span class="comment">//-13</span></span><br></pre></td></tr></table></figure><hr><h1 id="十四-模式匹配-amp-偏函数"><a href="#十四-模式匹配-amp-偏函数" class="headerlink" title="十四. 模式匹配 &amp; 偏函数"></a>十四. 模式匹配 &amp; 偏函数</h1><h4 id="1-字符串匹配"><a href="#1-字符串匹配" class="headerlink" title="1. 字符串匹配"></a>1. 字符串匹配</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> x = '<span class="number">9</span>'</span><br><span class="line">x: <span class="type">Char</span> = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">scala&gt; x <span class="keyword">match</span>&#123;</span><br><span class="line">     |   <span class="keyword">case</span> '+' =&gt; print(<span class="string">"++++"</span>)</span><br><span class="line">     |   <span class="keyword">case</span> '_' =&gt; print(<span class="string">"-----"</span>)</span><br><span class="line">     |   <span class="keyword">case</span> _ <span class="keyword">if</span> <span class="type">Character</span>.isDigit(x) =&gt; print(<span class="string">"is number!"</span>)</span><br><span class="line">     |   <span class="keyword">case</span> _ =&gt; print(<span class="string">"..."</span>)</span><br><span class="line">     | &#125;</span><br><span class="line">&gt; is number!</span><br></pre></td></tr></table></figure><h4 id="2-匹配类型-x类型定义成判断类型的共同超类。"><a href="#2-匹配类型-x类型定义成判断类型的共同超类。" class="headerlink" title="2. 匹配类型,x类型定义成判断类型的共同超类。"></a>2. 匹配类型,x类型定义成判断类型的共同超类。</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;    <span class="keyword">val</span> x:<span class="type">Any</span> = <span class="string">"123"</span></span><br><span class="line">x: <span class="type">Any</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">scala&gt; x <span class="keyword">match</span>&#123;</span><br><span class="line">     |   <span class="keyword">case</span> b:<span class="type">Int</span> =&gt; print(<span class="string">"is Int"</span>) ;</span><br><span class="line">     |   <span class="keyword">case</span> a:<span class="type">String</span> =&gt; print(<span class="string">"is String"</span>) ;</span><br><span class="line">     |   <span class="keyword">case</span> _ =&gt; print(<span class="string">"is Int"</span>) ;</span><br><span class="line">     | &#125;</span><br><span class="line">is <span class="type">String</span></span><br></pre></td></tr></table></figure><h4 id="3-匹配数组数据"><a href="#3-匹配数组数据" class="headerlink" title="3. 匹配数组数据"></a>3. 匹配数组数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">arr: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr <span class="keyword">match</span>&#123;</span><br><span class="line">     |     <span class="comment">//匹配arr中只有 0 </span></span><br><span class="line">     |     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; println(<span class="string">"arr 中只含有0"</span>)</span><br><span class="line">     |     <span class="comment">//匹配是否两个元素</span></span><br><span class="line">     |     <span class="keyword">case</span> <span class="type">Array</span>(x,y) =&gt; println(<span class="string">"有两个元素"</span>)</span><br><span class="line">     |     <span class="comment">//是否从0开始</span></span><br><span class="line">     |     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>,_*) =&gt; println(<span class="string">"从0开始"</span>)</span><br><span class="line">     |     <span class="keyword">case</span> _ =&gt; println(<span class="string">"有0"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以匹配其它复杂数据类型中某个位置上的值.</span></span><br></pre></td></tr></table></figure><h4 id="4-偏函数"><a href="#4-偏函数" class="headerlink" title="4. 偏函数"></a>4. 偏函数</h4><p><strong>把模式匹配抽出来变成函数了</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> ---定义</span><br><span class="line"><span class="keyword">val</span> f : <span class="type">PartialFunction</span>[<span class="type">Char</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">        <span class="keyword">case</span> '+' =&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> '-' =&gt; <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">---测试</span><br><span class="line">    scala&gt; f('x')</span><br><span class="line">    res106: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    scala&gt; f('+')</span><br><span class="line">    res107: <span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h1 id="十五-样例类"><a href="#十五-样例类" class="headerlink" title="十五. 样例类"></a>十五. 样例类</h1><p><strong>关键字 : case</strong></p><p>主要用于模式匹配.  </p><p><strong>内置了apply和unapply方法，还有串行化等接口。</strong> </p><p>创建对象时不需要使用new. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建样例类</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Jing8</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapi</span>(<span class="params">age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    scala&gt; <span class="keyword">val</span> d = <span class="type">Jing8</span>(<span class="string">"tom"</span>)<span class="comment">// 可以直接创建, 因为内置了 apply</span></span><br><span class="line"></span><br><span class="line">    d <span class="keyword">match</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Jing8</span>(name) =&gt; print(<span class="string">"是Jing8 : "</span> + name);</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Shapi</span>(age) =&gt; print(<span class="string">"是Shapi : "</span> + age);</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; print(<span class="string">"aishiuihsui"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">--&gt; 运行结果:</span><br><span class="line">是 <span class="type">Jing8</span>: tom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 .class 文件</span></span><br><span class="line"><span class="comment">// 发现有 apply, unapply, implements scala.Serializable 等</span></span><br><span class="line">--------------------------------------------------</span><br><span class="line">➜  scala javap -<span class="keyword">private</span> <span class="type">Jing8</span>$.<span class="keyword">class</span></span><br><span class="line"><span class="type">Compiled</span> from <span class="string">"dog.scala"</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Jing8$</span> <span class="keyword">extends</span> <span class="title">scala</span>.<span class="title">runtime</span>.<span class="title">AbstractFunction1&lt;java</span>.<span class="title">lang</span>.<span class="title">String</span>, <span class="title">Jing8&gt;</span> <span class="title">implements</span> <span class="title">scala</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  public static <span class="type">Jing8</span>$ <span class="type">MODULE</span>$;</span><br><span class="line">  public static &#123;&#125;;</span><br><span class="line">  public <span class="keyword">final</span> java.lang.<span class="type">String</span> toString();</span><br><span class="line">  public <span class="type">Jing8</span> apply(java.lang.<span class="type">String</span>);</span><br><span class="line">  public scala.<span class="type">Option</span>&lt;java.lang.<span class="type">String</span>&gt; unapply(<span class="type">Jing8</span>);</span><br><span class="line">  <span class="keyword">private</span> java.lang.<span class="type">Object</span> readResolve();</span><br><span class="line">  public java.lang.<span class="type">Object</span> apply(java.lang.<span class="type">Object</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Jing8</span>$();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密封样例类</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"> 子类和父类必须定义在同一文件中。</span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Jing8</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapi</span>(<span class="params">age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="十六-泛型"><a href="#十六-泛型" class="headerlink" title="十六. 泛型"></a>十六. 泛型</h1><h4 id="1-泛型的定义-amp-上下界"><a href="#1-泛型的定义-amp-上下界" class="headerlink" title="1. 泛型的定义 &amp; 上下界"></a>1. 泛型的定义 &amp; 上下界</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 中常用的泛型</span></span><br><span class="line">    <span class="type">List</span>&lt;<span class="type">String</span>&gt;            </span><br><span class="line">    <span class="type">Map</span>&lt;<span class="type">String</span>,<span class="type">String</span>&gt;      </span><br><span class="line"></span><br><span class="line"><span class="comment">// Scala 中的泛型</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的泛型,定义泛型类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[<span class="type">T</span>,<span class="type">S</span>](<span class="params">one:<span class="type">T</span>,second:<span class="type">S</span></span>)</span>;        <span class="comment">//定义泛型类</span></span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Pair</span>[<span class="type">String</span>,<span class="type">Int</span>](<span class="string">"tom"</span>,<span class="number">12</span>);    <span class="comment">// 创建泛型对象</span></span><br><span class="line">    <span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Pair</span>(<span class="string">"tom"</span>,<span class="number">12</span>);                <span class="comment">//类型推断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法泛型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMiddle</span></span>[<span class="type">T</span>](arr:<span class="type">Array</span>[<span class="type">T</span>]) = arr(arr.length / <span class="number">2</span>);</span><br><span class="line">-&gt; 可以传入任意类型的 <span class="type">Array</span></span><br><span class="line"></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line"><span class="comment">//泛型的上界,T必须是Dog的子类。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>[<span class="type">T</span> &lt;: <span class="type">Dog</span>](d:<span class="type">T</span>) = println(<span class="string">"hello"</span>)</span><br><span class="line"><span class="comment">// 定义下界,T必须是shapi的父类。有问题: 测试是通配的, 传啥都可以 :TODO</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run2</span></span>[<span class="type">T</span> &gt;: <span class="type">Shapi</span>](d:<span class="type">T</span>) = println(<span class="string">"hello"</span>)  </span><br><span class="line"></span><br><span class="line">    &lt;:            <span class="comment">//上界，子类</span></span><br><span class="line">    &gt;:            <span class="comment">//下界，父类 ???</span></span><br><span class="line">    &lt;%            <span class="comment">// A &lt;% B,A能够隐式转换成B</span></span><br><span class="line"><span class="type">T</span> &lt;:<span class="type">Dog</span> &gt;:<span class="type">Cat</span>        <span class="comment">//约束多个条件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图界定</span></span><br><span class="line">[<span class="type">T</span> &lt;: <span class="type">Comparable</span>]</span><br></pre></td></tr></table></figure><h4 id="2-泛型的型变-TODO-不懂"><a href="#2-泛型的型变-TODO-不懂" class="headerlink" title="2. 泛型的型变 :TODO 不懂"></a>2. 泛型的型变 :TODO 不懂</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Friend</span>[+<span class="type">Dog</span>]            <span class="comment">//协变, 如果 A是 B的子类, 那么ListA 也是  ListB 的子类</span></span><br><span class="line"><span class="type">Friend</span>[-<span class="type">Dog</span>]            <span class="comment">//逆变</span></span><br><span class="line"></span><br><span class="line"><span class="type">Friend</span>[-<span class="type">Dog</span>]    <span class="comment">// 当采用 -号 约束时, 原本 Friend[NafangShapi] 为   Friend[Shapi] 的子类的, 现在变成父类</span></span><br><span class="line"></span><br><span class="line"><span class="type">Friend</span>[<span class="type">Shapi</span>]</span><br><span class="line"><span class="type">Friend</span>[<span class="type">NafangShapi</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="十七-隐式转换-implicit"><a href="#十七-隐式转换-implicit" class="headerlink" title="十七. 隐式转换 implicit"></a>十七. 隐式转换 <strong>implicit</strong></h1><pre><code>隐式转换函数:使用 **implicit** 修饰的具有一个参数的函数。 </code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义隐式转换函数 </span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">   <span class="comment">// 定义了之后, 调用 run(100) , 此100会自动隐式的转为 dog 对象</span></span><br><span class="line">   <span class="comment">// 当调用一个对象不存在方法时, 会寻找是否能隐式转换为其它对象</span></span><br><span class="line">   <span class="comment">// 需要当前代码上下文可见</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">int2Dog</span></span>(n:<span class="type">Int</span>) = <span class="type">Shapi</span>(n);   <span class="comment">//定义</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(d:<span class="type">Dog</span>) = print(<span class="string">"hello world"</span>);</span><br><span class="line"> </span><br><span class="line">    run(<span class="number">100</span>) ;      <span class="comment">//调用run 方法, 会直接调用隐式转换函数。 把100作为参数, 创建 Shapi 对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义隐式单例对象 </span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">DogUtil</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义隐式转换函数</span></span><br><span class="line">        <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">str2Dog</span></span>(s:<span class="type">String</span>) = <span class="type">Jing8</span>(s) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">--- 使用</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run3</span></span>(d:<span class="type">Dog</span>) = println(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">import</span> <span class="type">DogUtil</span>._<span class="comment">// </span></span><br><span class="line">    run3(<span class="string">"tom"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数默认值</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span></span>(prefix:<span class="type">String</span> = <span class="string">"[[["</span>,c:<span class="type">String</span>,suffix:<span class="type">String</span>=<span class="string">"]]]"</span>) = ...</span><br><span class="line">    decorate(c= <span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  隐式参数(默认参数) </span></span><br><span class="line"><span class="comment">// 参数为隐式的参数, 回去找此参数, 如果参数有默认值, 就不需要对此参数赋值</span></span><br><span class="line">➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜➜</span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">DogUtil2</span></span>&#123;</span><br><span class="line">        <span class="keyword">implicit</span> <span class="keyword">val</span> dog = <span class="type">Jing8</span>(<span class="string">"tomas"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> <span class="type">DogUtil2</span>._</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run4</span></span>(<span class="keyword">implicit</span> dog:<span class="type">Jing8</span>) = println(<span class="string">"hello : "</span>) ;</span><br><span class="line"></span><br><span class="line">    run4;    <span class="comment">// 注意, 如果不想传参数, 想要调用隐式的默认值, 后面不需要加 (). 或者里面传 null, run4(null)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-概览&quot;&gt;&lt;a href=&quot;#一-概览&quot; class=&quot;headerlink&quot; title=&quot;一. 概览&quot;&gt;&lt;/a&gt;一. &lt;strong&gt;概览&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;scala&lt;/strong&gt; : java语言的脚本化。       
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="Scala" scheme="https://airpoet.github.io/categories/Hadoop/Scala/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="Scala" scheme="https://airpoet.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 &amp; 算法</title>
    <link href="https://airpoet.github.io/2018/07/11/Hadoop/10_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-&amp;-%E7%AE%97%E6%B3%95/"/>
    <id>https://airpoet.github.io/2018/07/11/Hadoop/10_数据结构&amp;算法/数据结构-&amp;-算法/</id>
    <published>2018-07-11T15:21:45.174Z</published>
    <updated>2018-07-11T16:20:12.824Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="参考-PDF-文档"><a href="#参考-PDF-文档" class="headerlink" title="参考 PDF 文档"></a>参考 PDF 文档</h2><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/02c256fa-61c7-4ffb-b956-5159389373a0/" target="_blank" rel="noopener">数据结构参考PDF</a></p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/2a72211a-8ead-4e30-989f-256b7f15bc83/" target="_blank" rel="noopener">算法基础参考PDF</a></p><p><br></p><h2 id="参考大牛笔记"><a href="#参考大牛笔记" class="headerlink" title="参考大牛笔记"></a>参考大牛笔记</h2><p><a href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/%E7%AE%97%E6%B3%95/">算法综述及代码实现</a></p><p><a href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/Leetcode%20%E9%A2%98%E8%A7%A3/">Leetcode解题</a></p><p><a href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/%E5%89%91%E6%8C%87%20offer%20%E9%A2%98%E8%A7%A3/">剑指 Offer 解题</a></p><p>其它的自行查看</p><p><br></p><h2 id="参考自己代码"><a href="#参考自己代码" class="headerlink" title="参考自己代码"></a>参考自己代码</h2><p><a href="https://github.com/airpoet/bigdata/tree/master/Arithmetic_Project" target="_blank" rel="noopener">mygithub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考-PDF-文档&quot;&gt;&lt;a href=&quot;#参考-PDF-文档&quot; class=&quot;headerlink&quot; title=&quot;参考 PDF 文档&quot;&gt;&lt;/a&gt;参考 PDF 文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://app.yinxiang.
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="数据结构&amp;算法" scheme="https://airpoet.github.io/categories/Hadoop/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="数据结构" scheme="https://airpoet.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://airpoet.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>i-NIO</title>
    <link href="https://airpoet.github.io/2018/07/11/Hadoop/11_NIO/NIO/"/>
    <id>https://airpoet.github.io/2018/07/11/Hadoop/11_NIO/NIO/</id>
    <published>2018-07-11T03:38:15.042Z</published>
    <updated>2018-07-12T01:03:01.212Z</updated>
    
    <content type="html"><![CDATA[<!-- GFM-TOC --><h1 id="一-同步-异步-amp-阻塞-非阻塞"><a href="#一-同步-异步-amp-阻塞-非阻塞" class="headerlink" title="一.  同步, 异步 &amp; 阻塞, 非阻塞"></a>一.  同步, 异步 &amp; 阻塞, 非阻塞</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>同步和异步其实指的是，请求发起方对消息结果的获取是主动发起的，还是等被动通知的</strong>。</p><ul><li>如果是请求方主动发起的，<strong>一直在等待应答结果（同步阻塞）</strong></li><li>如果是<strong>结果由服务方通知的，也就是请求方发出请求后，要么在一直等待通知（异步阻塞）, 要么就先去干自己的事了（异步非阻塞)</strong></li></ul><p><strong>调用了一个函数之后，在等待这个函数返回结果之前，当前的线程是处于挂起状态，还是运行状态：</strong></p><ul><li>如果是挂起状态，就意味着<strong>当前线程什么都不能干</strong>，就等着获取结果，这就叫<strong>同步阻塞</strong>，</li><li>如果仍然是运行状态，就意味<strong>当前线程是可以的继续处理其他任务，但要时不时的去看下是否有结果了，这就是同步非阻塞</strong>。</li></ul><h2 id="形象的例子"><a href="#形象的例子" class="headerlink" title="形象的例子"></a>形象的例子</h2><p>故事：老王烧开水。</p><p>出场人物：老王，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p><p>老王想了想，有好几种等待方式<br>1、老王用水壶煮水，并且站在那里，不管水开没开，每隔一定时间看看水开了没    ———-同步阻塞<br>老王想了想，这种方法不够聪明。</p><p>2、老王还是用水壶煮水，不再傻傻的站在那里看水开，跑去寝室上网，但是还是会每隔一段时间过来看看水开了没有，水没有开就走人。    ———-同步非阻塞<br>老王想了想，现在的方法聪明了些，但是还是不够好。</p><p>3、老王这次使用高大上的响水壶来煮水，站在那里，但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他。    ———-异步阻塞<br>老王想了想，不会呀，既然水壶可以通知我，那我为什么还要傻傻的站在那里等呢，嗯，得换个方法。</p><p>4、老王还是使用响水壶煮水，跑到客厅上网去，等着响水壶自己把水煮熟了以后通知他。    ———-异步非阻塞</p><p>老王豁然，这下感觉轻松了很多。</p><hr><h1 id="二-NIO-中一些重要概念"><a href="#二-NIO-中一些重要概念" class="headerlink" title="二. NIO 中一些重要概念"></a>二. NIO 中一些重要概念</h1><h2 id="Java-IO-模型"><a href="#Java-IO-模型" class="headerlink" title="Java IO 模型"></a>Java IO 模型</h2><p><strong>BIO–同步阻塞：</strong></p><p>JDK1.4 以前我们使用的都是 BIO</p><p>阻塞到我们的读写方法，阻塞到线程来提高并发性能，但是效果不是很好</p><p><strong>NIO–同步非阻塞：</strong>(New IO)</p><p>JDK1.4 Linux 多路复用技术（select 模式）实现 IO 事件的轮询方式：同步 非阻塞的模式，这种方式目前是主流的网络通信模式</p><p>Mina 和 Netty</p><p>– 网络通信框架，比自己写 NIO 要容易些，并且代码可读性更好</p><p><strong>AIO–异步非阻塞 IO：</strong></p><p>JDK1.7（NIO2）真正的异步非阻塞 IO(基于 linux 的 epoll 模式）AIO 目 前使用的还比较少</p><h2 id="通道-channel-amp-缓冲区-buffer"><a href="#通道-channel-amp-缓冲区-buffer" class="headerlink" title="通道 channel &amp; 缓冲区 buffer"></a>通道 channel &amp; 缓冲区 buffer</h2><h4 id="1-通道-channel"><a href="#1-通道-channel" class="headerlink" title="1. 通道 channel"></a>1. 通道 channel</h4><p><strong>关键词:</strong> 模拟流,  打开的连接, 双向可读写, 线程安全,  只能通过缓冲区操作</p><p><strong>类型</strong></p><ul><li>FileChannel：从文件中读写数据；</li><li>DatagramChannel：通过 UDP 读写网络中数据；</li><li><strong>SocketChannel</strong>：通过 TCP 读写网络中数据；</li><li><strong>ServerSocketChannel</strong>：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li></ul><h4 id="2-缓冲区-buffer"><a href="#2-缓冲区-buffer" class="headerlink" title="2. 缓冲区 buffer"></a>2. 缓冲区 buffer</h4><p>不能直接对通道进行读写数据，而是要先经过缓冲区。</p><p>缓冲区实质上是一个数组, 提供了对数据的结构化访问。</p><p><strong>类型:</strong> </p><ul><li><strong>ByteBuffer</strong></li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><p><strong>关键词:</strong> </p><ul><li>capacity：最大容量；</li><li>position：当前已经读写的字节数；</li><li>limit：还可以读写的字节数。</li></ul><p><a href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/Java%20IO/#%E4%B8%83nio">其它详情可见 Java IO</a> </p><hr><h1 id="三-代码实例"><a href="#三-代码实例" class="headerlink" title="三. 代码实例"></a>三. 代码实例</h1><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rox.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意: selector挑选器, 维护若干集合</span></span><br><span class="line"><span class="comment"> * selectionKeys : 注册的key</span></span><br><span class="line"><span class="comment"> * selectedKeys  : 挑选出来的key -- 有事件的 key</span></span><br><span class="line"><span class="comment"> * 客户端 &amp; 服务端对应的客户端 SocketChannel(套接字通道), 一般来讲, 只需要对 read 感兴趣</span></span><br><span class="line"><span class="comment"> * 也就是拦截 read 消息, write 的话随时都可以 write</span></span><br><span class="line"><span class="comment"> * sc 是可读可写的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分配缓冲区buf内存</span></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启挑选器</span></span><br><span class="line">        Selector sel = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启 ServerSocket 通道</span></span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 绑定端口</span></span><br><span class="line">        ssc.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置非阻塞</span></span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 在挑选器中注册通道(服务器通道, 和感兴趣的事件 - OP_ACCEPT)</span></span><br><span class="line">        ssc.register(sel, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化可选择通道对象(为 ServerSocketChannel &amp; SocketChannel 的共同父类)</span></span><br><span class="line">        SelectableChannel sc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 挑选器开始选择(阻塞的)</span></span><br><span class="line">            <span class="comment">// 如果么有接收到 感兴趣事件, 就塞在这里</span></span><br><span class="line">            sel.select();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 能走到这一步, 就是已经接收到了 accept 事件</span></span><br><span class="line">            <span class="comment">// 迭代挑选出来的 key 的集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; it = sel.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = it.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果注册的 key是可接受的, 就一定是服务器通道</span></span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 取出该通道, 返回一个 SelectableChannel 的超类对象</span></span><br><span class="line">                        sc = key.channel();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 因为拿到的 key 是 isAcceptable, 所以可以判断是 ssc 对象, 强转</span></span><br><span class="line">                        <span class="comment">// 并通过 accept()方法, 返回一个 sc 对象(类似于套接字, 与客户端的 sc 对应, 负责跟客户端的 sc 通信)</span></span><br><span class="line">                        SocketChannel sc0 = ((ServerSocketChannel) sc).accept();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 设置 sc0 为非阻塞</span></span><br><span class="line">                        sc0.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 为接收到的这个 sc 在选择器中, 注册读事件</span></span><br><span class="line">                        sc0.register(sel, SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 下一次轮询, 发现是来自 读事件 的key</span></span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">// 取出 channel, 直接强转为 SocketChannel</span></span><br><span class="line">                        SocketChannel sc1 = (SocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/// 回复客户端消息, 前面加个头'hello', 然后再写回去</span></span><br><span class="line">                        <span class="comment">// 创建消息字节数组</span></span><br><span class="line">                        <span class="keyword">byte</span>[] helloBytes = <span class="string">"hello: "</span>.getBytes();</span><br><span class="line">                        <span class="comment">// 把字节数组放入 buf</span></span><br><span class="line">                        buf.put(helloBytes, <span class="number">0</span>, helloBytes.length);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 读取消息</span></span><br><span class="line">                        <span class="comment">// 不存在读完, 只要不为0, 就一直轮询读</span></span><br><span class="line">                        <span class="comment">// 从通道里读出来,放到缓冲区里</span></span><br><span class="line">                        <span class="keyword">while</span> (sc1.read(buf) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 拍板, 定稿, &gt; 0说明有数据</span></span><br><span class="line">                            <span class="comment">// position 归0, limit 置在 已写元素 的后面一格, 此时不接受其它写入了</span></span><br><span class="line">                            buf.flip();</span><br><span class="line">                            <span class="comment">// 持有的 sc 对象写入到channel</span></span><br><span class="line">                            sc1.write(buf);</span><br><span class="line">                            <span class="comment">// 写完后 清空, position 归0, limit 最大</span></span><br><span class="line">                            buf.clear();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 如果失败, 移除本次接收到的 keys</span></span><br><span class="line">                    sel.keys().remove(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本次选择器事件处理完了之后</span></span><br><span class="line">            <span class="comment">// 移除所有选择出来的 key</span></span><br><span class="line">            sel.selectedKeys().clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rox.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// buf</span></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span> * <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开一个 selector</span></span><br><span class="line">        Selector sel = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开一个套接字通道</span></span><br><span class="line">        SocketChannel sc = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面2种连接没区别</span></span><br><span class="line">        sc.socket().connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line"><span class="comment">//        sc.connect(new InetSocketAddress("localhost", 8888));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置是否阻塞</span></span><br><span class="line">        sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册 sel 对象及 关注的 key</span></span><br><span class="line">        sc.register(sel, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往 buf 中 put 进数据(一次)</span></span><br><span class="line"><span class="comment">//        buf.put("tom".getBytes());</span></span><br><span class="line"><span class="comment">//        buf.flip();</span></span><br><span class="line"><span class="comment">//        sc.write(buf);</span></span><br><span class="line"><span class="comment">//        buf.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果想要持续不断的通信, 可以开个分线程 (持续收发消息)</span></span><br><span class="line">        <span class="comment">// 程序是从上往下运行的, 运行到下面没有接受到消息的话会塞住</span></span><br><span class="line">        <span class="comment">// 一旦塞住了, 也就无法继续同服务端通信了</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">// 这里创建一个新的缓冲区专用</span></span><br><span class="line">                ByteBuffer buf2 = ByteBuffer.allocate(<span class="number">1024</span> * <span class="number">8</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        buf2.put((<span class="string">"Tom"</span> +  (i ++)).getBytes());</span><br><span class="line">                        buf2.flip();   <span class="comment">//切换读写</span></span><br><span class="line">                        sc.write(buf2);</span><br><span class="line">                        buf2.clear();</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 选择器选择, 接受 服务端返回的 key</span></span><br><span class="line">            sel.select();</span><br><span class="line"></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从通道读取到缓冲区</span></span><br><span class="line">            <span class="keyword">while</span> (sc.read(buf) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 读到了数据, 就拍一下板</span></span><br><span class="line">                buf.flip();</span><br><span class="line">                <span class="comment">// 从缓冲区 buf 写入到 ByteArrayOutputStream 流</span></span><br><span class="line">                baos.write(buf.array(), <span class="number">0</span>, buf.limit());</span><br><span class="line">                <span class="comment">// 写完了就清空 缓冲区buf</span></span><br><span class="line">                buf.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印接受到的数据</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">            baos.close();</span><br><span class="line">            <span class="comment">// 清空 selectedKeys的 set</span></span><br><span class="line">            sel.selectedKeys().clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它的代码参考我的-Github"><a href="#其它的代码参考我的-Github" class="headerlink" title="其它的代码参考我的 Github"></a>其它的代码参考我的 Github</h2><p><a href="https://github.com/airpoet/bigdata/tree/master/Java_Project/NIO" target="_blank" rel="noopener">mygithub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- GFM-TOC --&gt;
&lt;h1 id=&quot;一-同步-异步-amp-阻塞-非阻塞&quot;&gt;&lt;a href=&quot;#一-同步-异步-amp-阻塞-非阻塞&quot; class=&quot;headerlink&quot; title=&quot;一.  同步, 异步 &amp;amp; 阻塞, 非阻塞&quot;&gt;&lt;/a&gt;一.  同步, 异
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="NIO" scheme="https://airpoet.github.io/categories/Hadoop/NIO/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="NIO" scheme="https://airpoet.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>newObject</title>
    <link href="https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/newObject/"/>
    <id>https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/newObject/</id>
    <published>2018-07-09T03:26:48.528Z</published>
    <updated>2018-07-09T07:22:23.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的创建与内存分配"><a href="#对象的创建与内存分配" class="headerlink" title="对象的创建与内存分配"></a>对象的创建与内存分配</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>当 <code>JVM</code> 收到一个 <code>new</code> 指令时，会检查指令中的参数在常量池是否有这个符号的引用，还会检查该类是否已经被<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/ClassLoad.md" target="_blank" rel="noopener">加载</a>过了，如果没有的话则要进行一次类加载。</p><p>接着就是分配内存了，通常有两种方式：</p><ul><li>指针碰撞</li><li>空闲列表</li></ul><p>使用指针碰撞的前提是堆内存是<strong>完全工整</strong>的，用过的内存和没用的内存各在一边每次分配的时候只需要将指针向空闲内存一方移动一段和内存大小相等区域即可。</p><p>当堆中已经使用的内存和未使用的内存<strong>互相交错</strong>时，指针碰撞的方式就行不通了，这时就需要采用空闲列表的方式。虚拟机会维护一个空闲的列表，用于记录哪些内存是可以进行分配的，分配时直接从可用内存中直接分配即可。</p><p>堆中的内存是否工整是有<strong>垃圾收集器</strong>来决定的，如果带有压缩功能的垃圾收集器就是采用指针碰撞的方式来进行内存分配的。</p><p>分配内存时也会出现并发问题:</p><p>这样可以在创建对象的时候使用 <code>CAS</code> 这样的乐观锁来保证。</p><p>也可以将内存分配安排在每个线程独有的空间进行，每个线程首先在堆内存中分配一小块内存，称为本地分配缓存(<code>TLAB : Thread Local Allocation Buffer</code>)。</p><p>分配内存时，只需要在自己的分配缓存中分配即可，由于这个内存区域是线程私有的，所以不会出现并发问题。</p><p>可以使用 <code>-XX:+/-UseTLAB</code> 参数来设定 <code>JVM</code> 是否开启 <code>TLAB</code> 。</p><p>内存分配之后需要对该对象进行设置，如对象头。对象头的一些应用可以查看 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/Synchronize.md" target="_blank" rel="noopener">Synchronize 关键字原理</a>。</p><h3 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h3><p>一个对象被创建之后自然是为了使用，在 <code>Java</code> 中是通过栈来引用堆内存中的对象来进行操作的。</p><p>对于我们常用的 <code>HotSpot</code> 虚拟机来说，这样引用关系是通过直接指针来关联的。</p><p>如图:</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnkmy0bvu3j30o60heaaq.jpg" alt=""></p><p>这样的好处就是：在 Java 里进行频繁的对象访问可以提升访问速度(相对于使用句柄池来说)。</p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h3 id="Eden-区分配"><a href="#Eden-区分配" class="headerlink" title="Eden 区分配"></a>Eden 区分配</h3><p>简单的来说对象都是在堆内存中分配的，往细一点看则是优先在 <code>Eden</code> 区分配。</p><p>这里就涉及到堆内存的划分了，为了方便垃圾回收，JVM 将堆内存分为新生代和老年代。</p><p>而新生代中又会划分为 <code>Eden</code> 区，<code>from Survivor、to Survivor</code> 区。</p><p>其中 <code>Eden</code> 和 <code>Survivor</code> 区的比例默认是 <code>8:1:1</code>，当然也支持参数调整 <code>-XX:SurvivorRatio=8</code>。</p><p>当在 <code>Eden</code> 区分配内存不足时，则会发生 <code>minorGC</code> ，由于 <code>Java</code> 对象多数是<strong>朝生夕灭</strong>的特性，所以 <code>minorGC</code> 通常会比较频繁，效率也比较高。</p><p>当发生 <code>minorGC</code> 时，JVM 会根据<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/GarbageCollection.md#%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">复制算法</a>将存活的对象拷贝到另一个未使用的 <code>Survivor</code> 区，如果 <code>Survivor</code> 区内存不足时，则会使用分配担保策略将对象移动到老年代中。</p><p>谈到 <code>minorGC</code> 时，就不得不提到 <code>fullGC(majorGC)</code> ，这是指发生在老年代的 <code>GC</code> ，不论是效率还是速度都比 <code>minorGC</code> 慢的多，回收时还会发生 <code>stop the world</code> 使程序发生停顿，所以应当尽量避免发生 <code>fullGC</code> 。</p><h3 id="老年代分配"><a href="#老年代分配" class="headerlink" title="老年代分配"></a>老年代分配</h3><p>也有一些情况会导致对象直接在老年代分配，比如当分配一个大对象时(大的数组，很长的字符串)，由于 <code>Eden</code> 区没有足够大的连续空间来分配时，会导致提前触发一次 <code>GC</code>，所以尽量别频繁的创建大对象。</p><p>因此 <code>JVM</code> 会根据一个阈值来判断大于该阈值对象直接分配到老年代，这样可以避免在新生代频繁的发生 <code>GC</code>。</p><p>对于一些在新生代的老对象 <code>JVM</code> 也会根据某种机制移动到老年代中。</p><p>JVM 是根据记录对象年龄的方式来判断该对象是否应该移动到老年代，根据新生代的复制算法，当一个对象被移动到 <code>Survivor</code> 区之后 JVM 就给该对象的年龄记为1，每当熬过一次 <code>minorGC</code> 后对象的年龄就 +1 ，直到达到阈值(默认为15)就移动到老年代中。</p><blockquote><p>可以使用 <code>-XX:MaxTenuringThreshold=15</code> 来配置这个阈值。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽说这些内容略显枯燥，但当应用发生不正常的 <code>GC</code> 时，可以方便更快的定位问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象的创建与内存分配&quot;&gt;&lt;a href=&quot;#对象的创建与内存分配&quot; class=&quot;headerlink&quot; title=&quot;对象的创建与内存分配&quot;&gt;&lt;/a&gt;对象的创建与内存分配&lt;/h1&gt;&lt;h2 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Java-Interview" scheme="https://airpoet.github.io/categories/Github/Java-Interview/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap</title>
    <link href="https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/collection/LinkedHashMap/"/>
    <id>https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/collection/LinkedHashMap/</id>
    <published>2018-07-09T03:26:48.526Z</published>
    <updated>2018-07-09T07:16:53.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LinkedHashMap-底层分析"><a href="#LinkedHashMap-底层分析" class="headerlink" title="LinkedHashMap 底层分析"></a>LinkedHashMap 底层分析</h1><p>众所周知 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/HashMap.md" target="_blank" rel="noopener">HashMap</a> 是一个无序的 <code>Map</code>，因为每次根据 <code>key</code> 的 <code>hashcode</code> 映射到 <code>Entry</code> 数组上，所以遍历出来的顺序并不是写入的顺序。</p><p>因此 JDK 推出一个基于 <code>HashMap</code> 但具有顺序的 <code>LinkedHashMap</code> 来解决有排序需求的场景。</p><p>它的底层是继承于 <code>HashMap</code> 实现的，由一个双向链表所构成。</p><p><code>LinkedHashMap</code> 的排序方式有两种：</p><ul><li>根据写入顺序排序。</li><li>根据访问顺序排序。</li></ul><p>其中根据访问顺序排序时，每次 <code>get</code> 都会将访问的值移动到链表末尾，这样重复操作就能得到一个按照访问顺序排序的链表。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line">map.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</span><br><span class="line">map.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</span><br><span class="line">map.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</span><br><span class="line">map.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</span><br><span class="line">map.put(<span class="string">"5"</span>,<span class="number">5</span>) ;</span><br><span class="line">System.out.println(map.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试可以看到 <code>map</code> 的组成：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo6l9xp91lj319m0s4tgi.jpg" alt=""></p><p>打开源码可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The head of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>Entry</code> 继承于 <code>HashMap</code> 的 <code>Entry</code>，并新增了上下节点的指针，也就形成了双向链表。</p><p>还有一个 <code>header</code> 的成员变量，是这个双向链表的头结点。 </p><p>上边的 demo 总结成一张图如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fodggwc523j30za0n4wgj.jpg" alt=""></p><p>第一个类似于 <code>HashMap</code> 的结构，利用 <code>Entry</code> 中的 <code>next</code> 指针进行关联。</p><p>下边则是 <code>LinkedHashMap</code> 如何达到有序的关键。</p><p>就是利用了头节点和其余的各个节点之间通过 <code>Entry</code> 中的 <code>after</code> 和 <code>before</code> 指针进行关联。</p><p>其中还有一个 <code>accessOrder</code> 成员变量，默认是 <code>false</code>，默认按照插入顺序排序，为 <code>true</code> 时按照访问顺序排序，也可以调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public LinkedHashMap(int initialCapacity,</span><br><span class="line">                     float loadFactor,</span><br><span class="line">                     boolean accessOrder) &#123;</span><br><span class="line">    super(initialCapacity, loadFactor);</span><br><span class="line">    this.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个构造方法可以显示的传入 <code>accessOrder</code>。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><code>LinkedHashMap</code> 的构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是调用的 <code>HashMap</code> 的构造方法:</p><p><code>HashMap</code> 实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    <span class="comment">//HashMap 只是定义了改方法，具体实现交给了 LinkedHashMap</span></span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到里面有一个空的 <code>init()</code>，具体是由 <code>LinkedHashMap</code> 来实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    header.before = header.after = header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实也就是对 <code>header</code> 进行了初始化。</p><h2 id="put-方法"><a href="#put-方法" class="headerlink" title="put() 方法"></a>put() 方法</h2><p>看 <code>LinkedHashMap</code> 的 <code>put()</code> 方法之前先看看 <code>HashMap</code> 的 <code>put</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    if (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    if (key == null)</span><br><span class="line">        return putForNullKey(value);</span><br><span class="line">    int hash = hash(key);</span><br><span class="line">    int i = indexFor(hash, table.length);</span><br><span class="line">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            //空实现，交给 LinkedHashMap 自己实现</span><br><span class="line">            e.recordAccess(this);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    // LinkedHashMap 对其重写</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// LinkedHashMap 对其重写</span><br><span class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</span><br><span class="line">        resize(2 * table.length);</span><br><span class="line">        hash = (null != key) ? hash(key) : 0;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// LinkedHashMap 对其重写</span><br><span class="line">void createEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主体的实现都是借助于 <code>HashMap</code> 来完成的，只是对其中的 <code>recordAccess(), addEntry(), createEntry()</code> 进行了重写。</p><p><code>LinkedHashMap</code> 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//就是判断是否是根据访问顺序排序，如果是则需要将当前这个 Entry 移动到链表的末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</span><br><span class="line">        <span class="keyword">if</span> (lm.accessOrder) &#123;</span><br><span class="line">            lm.modCount++;</span><br><span class="line">            remove();</span><br><span class="line">            addBefore(lm.header);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//调用了 HashMap 的实现，并判断是否需要删除最少使用的 Entry(默认不删除)    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.addEntry(hash, key, value, bucketIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove eldest entry if instructed</span></span><br><span class="line">    Entry&lt;K,V&gt; eldest = header.after;</span><br><span class="line">    <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</span><br><span class="line">        removeEntryForKey(eldest.key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, old);</span><br><span class="line">    <span class="comment">//就多了这一步，将新增的 Entry 加入到 header 双向链表中</span></span><br><span class="line">    table[bucketIndex] = e;</span><br><span class="line">    e.addBefore(header);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入到双向链表中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;</span><br><span class="line">        after  = existingEntry;</span><br><span class="line">        before = existingEntry.before;</span><br><span class="line">        before.after = <span class="keyword">this</span>;</span><br><span class="line">        after.before = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><p>LinkedHashMap 的 <code>get()</code> 方法也重写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//多了一个判断是否是按照访问顺序排序，是则将当前的 Entry 移动到链表头部。   </span></span><br><span class="line">    e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</span><br><span class="line">    <span class="keyword">if</span> (lm.accessOrder) &#123;</span><br><span class="line">        lm.modCount++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        remove();</span><br><span class="line">        <span class="comment">//添加到头部</span></span><br><span class="line">        addBefore(lm.header);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clear()</code> 清空就要比较简单了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要把指针都指向自己即可，原本那些 Entry 没有引用之后就会被 JVM 自动回收。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.clear();</span><br><span class="line">    header.before = header.after = header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说 <code>LinkedHashMap</code> 其实就是对 <code>HashMap</code> 进行了拓展，使用了双向链表来保证了顺序性。</p><p>因为是继承与 <code>HashMap</code> 的，所以一些 <code>HashMap</code> 存在的问题 <code>LinkedHashMap</code> 也会存在，比如不支持并发等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LinkedHashMap-底层分析&quot;&gt;&lt;a href=&quot;#LinkedHashMap-底层分析&quot; class=&quot;headerlink&quot; title=&quot;LinkedHashMap 底层分析&quot;&gt;&lt;/a&gt;LinkedHashMap 底层分析&lt;/h1&gt;&lt;p&gt;众所周知 &lt;
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Java-Interview" scheme="https://airpoet.github.io/categories/Github/Java-Interview/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Thread-common-problem</title>
    <link href="https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/Thread-common-problem/"/>
    <id>https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/Thread-common-problem/</id>
    <published>2018-07-09T03:26:48.524Z</published>
    <updated>2018-07-09T07:24:19.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-多线程常见问题"><a href="#Java-多线程常见问题" class="headerlink" title="Java 多线程常见问题"></a>Java 多线程常见问题</h1><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>多线程并不一定是要在多核处理器才支持的，就算是单核也是可以支持多线程的。<br>CPU 通过给每个线程分配一定的时间片，由于时间非常短通常是几十毫秒，所以 CPU 可以不停的切换线程执行任务从而达到了多线程的效果。</p><p>但是由于在线程切换的时候需要保存本次执行的信息(<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/MemoryAllocation.md#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener">详见</a>)，在该线程被 CPU 剥夺时间片后又再次运行恢复上次所保存的信息的过程就成为上下文切换。</p><blockquote><p>上下文切换是非常耗效率的。</p></blockquote><p>通常有以下解决方案:</p><ul><li>采用无锁编程，比如将数据按照 <code>Hash(id)</code> 进行取模分段，每个线程处理各自分段的数据，从而避免使用锁。</li><li>采用 CAS(compare and swap) 算法，如 <code>Atomic</code> 包就是采用 CAS 算法(<a href="https://github.com/crossoverJie/Java-Interview/blob/master/Threadcore.md#%E5%8E%9F%E5%AD%90%E6%80%A7" target="_blank" rel="noopener">详见</a>)。</li><li>合理的创建线程，避免创建了一些线程但其中大部分都是出于 <code>waiting</code> 状态，因为每当从 <code>waiting</code> 状态切换到 <code>running</code> 状态都是一次上下文切换。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁的场景一般是：线程 A 和线程 B 都在互相等待对方释放锁，或者是其中某个线程在释放锁的时候出现异常如死循环之类的。这时就会导致系统不可用。</p><p>常用的解决方案如下：</p><ul><li>尽量一个线程只获取一个锁。</li><li>一个线程只占用一个资源。</li><li>尝试使用定时锁，至少能保证锁最终会被释放。</li></ul><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>当在带宽有限的情况下一个线程下载某个资源需要 <code>1M/S</code>,当开 10 个线程时速度并不会乘 10 倍，反而还会增加时间，毕竟上下文切换比较耗时。</p><p>如果是受限于资源的话可以采用集群来处理任务，不同的机器来处理不同的数据，就类似于开始提到的无锁编程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-多线程常见问题&quot;&gt;&lt;a href=&quot;#Java-多线程常见问题&quot; class=&quot;headerlink&quot; title=&quot;Java 多线程常见问题&quot;&gt;&lt;/a&gt;Java 多线程常见问题&lt;/h1&gt;&lt;h2 id=&quot;上下文切换&quot;&gt;&lt;a href=&quot;#上下文切换&quot; c
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Java-Interview" scheme="https://airpoet.github.io/categories/Github/Java-Interview/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/HashMap/"/>
    <id>https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/HashMap/</id>
    <published>2018-07-09T03:26:48.519Z</published>
    <updated>2018-07-09T07:20:35.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap-底层分析"><a href="#HashMap-底层分析" class="headerlink" title="HashMap 底层分析"></a>HashMap 底层分析</h1><blockquote><p>以下基于 JDK1.7 分析。</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn84b0ftj4j30eb0560sv.jpg" alt=""></p><p>如图所示，HashMap 底层是基于数组和链表实现的。其中有两个重要的参数：</p><ul><li>容量</li><li>负载因子</li></ul><p>容量的默认大小是 16，负载因子是 0.75，当 <code>HashMap</code> 的 <code>size &gt; 16*0.75</code> 时就会发生扩容(容量和负载因子都可以自由调整)。</p><h2 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h2><p>首先会将传入的 Key 做 <code>hash</code> 运算计算出 hashcode,然后根据数组长度取模计算出在数组中的 index 下标。</p><p>由于在计算中位运算比取模运算效率高的多，所以 HashMap 规定数组的长度为 <code>2&lt;sup&gt;n</code> 。这样用 <code>2&lt;/sup&gt;n - 1</code> 做位运算与取模效果一致，并且效率还要高出许多。</p><p>由于数组的长度有限，所以难免会出现不同的 Key 通过运算得到的 index 相同，这种情况可以利用链表来解决，HashMap 会在 <code>table[index]</code>处形成链表，采用头插法将数据插入到链表中。</p><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><p>get 和 put 类似，也是将传入的 Key 计算出 index ，如果该位置上是一个链表就需要遍历整个链表，通过 <code>key.equals(k)</code> 来找到对应的元素。</p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; entryIterator = map.entrySet().iterator();</span><br><span class="line">       <span class="keyword">while</span> (entryIterator.hasNext()) &#123;</span><br><span class="line">           Map.Entry&lt;String, Integer&gt; next = entryIterator.next();</span><br><span class="line">           System.out.println(<span class="string">"key="</span> + next.getKey() + <span class="string">" value="</span> + next.getValue());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"key="</span> + key + <span class="string">" value="</span> + map.get(key));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((key,value)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">"key="</span> + key + <span class="string">" value="</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>强烈建议</strong>使用第一种 EntrySet 进行遍历。</p><p>第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低, 第三种需要 <code>JDK1.8</code> 以上，通过外层遍历 table，内层遍历链表或红黑树。 </p><h2 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h2><p>在并发环境下使用 <code>HashMap</code> 容易出现死循环。</p><p>并发场景发生扩容，调用 <code>resize()</code> 方法里的 <code>rehash()</code> 时，容易出现环形链表。这样当获取一个不存在的 <code>key</code> 时，计算出的 <code>index</code> 正好是环形链表的下标时就会出现死循环。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn85u0a0d9j30n20ii0tp.jpg" alt=""></p><blockquote><p>所以 HashMap 只能在单线程中使用，并且尽量的预设容量，尽可能的减少扩容。</p></blockquote><p>在 <code>JDK1.8</code> 中对 <code>HashMap</code> 进行了优化：<br>当 <code>hash</code> 碰撞之后写入链表的长度超过了阈值(默认为8)，链表将会转换为<strong>红黑树</strong>。</p><p>假设 <code>hash</code> 冲突非常严重，一个数组后面接了很长的链表，此时重新的时间复杂度就是 <code>O(n)</code> 。</p><p>如果是红黑树，时间复杂度就是 <code>O(logn)</code> 。</p><p>大大提高了查询效率。</p><p>多线程场景下推荐使用 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/ConcurrentHashMap.md" target="_blank" rel="noopener">ConcurrentHashMap</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashMap-底层分析&quot;&gt;&lt;a href=&quot;#HashMap-底层分析&quot; class=&quot;headerlink&quot; title=&quot;HashMap 底层分析&quot;&gt;&lt;/a&gt;HashMap 底层分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;以下基于 JDK1.7 分析。&lt;/
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Java-Interview" scheme="https://airpoet.github.io/categories/Github/Java-Interview/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap</title>
    <link href="https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/ConcurrentHashMap/"/>
    <id>https://airpoet.github.io/2018/07/09/Java/Interview/Java-Interview/ConcurrentHashMap/</id>
    <published>2018-07-09T03:26:48.516Z</published>
    <updated>2018-07-09T07:19:20.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ConcurrentHashMap-实现原理"><a href="#ConcurrentHashMap-实现原理" class="headerlink" title="ConcurrentHashMap 实现原理"></a>ConcurrentHashMap 实现原理</h1><p>由于 <code>HashMap</code> 是一个线程不安全的容器，主要体现在容量大于<code>总量*负载因子</code>发生扩容时会出现环形链表从而导致死循环。</p><p>因此需要支持线程安全的并发容器 <code>ConcurrentHashMap</code> 。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fn2f5pgxinj30dw0730t7.jpg" alt=""></p><p>如图所示，是由 <code>Segment</code> 数组、<code>HashEntry</code> 数组组成，和 <code>HashMap</code> 一样，仍然是数组加链表组成。</p><p><code>ConcurrentHashMap</code> 采用了分段锁技术，其中 <code>Segment</code> 继承于 <code>ReentrantLock</code>。不会像 <code>HashTable</code> 那样不管是 <code>put</code> 还是 <code>get</code> 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 <code>CurrencyLevel</code> (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 <code>Segment</code> 时，不会影响到其他的 <code>Segment</code>。</p><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><p><code>ConcurrentHashMap</code> 的 <code>get</code> 方法是非常高效的，因为整个过程都不需要加锁。</p><p>只需要将 <code>Key</code> 通过 <code>Hash</code> 之后定位到具体的 <code>Segment</code> ，再通过一次 <code>Hash</code> 定位到具体的元素上。由于 <code>HashEntry</code> 中的 <code>value</code> 属性是用 <code>volatile</code> 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值(<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/Threadcore.md#%E5%8F%AF%E8%A7%81%E6%80%A7" target="_blank" rel="noopener">volatile 相关知识点</a>)。</p><h2 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h2><p>内部 <code>HashEntry</code> 类 ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    HashEntry(<span class="keyword">int</span> hash, K key, V value, HashEntry&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然 HashEntry 中的 value 是用 <code>volatile</code> 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。</p><p>首先也是通过 Key 的 Hash 定位到具体的 Segment，在 put 之前会进行一次扩容校验。这里比 HashMap 要好的一点是：HashMap 是插入元素之后再看是否需要扩容，有可能扩容之后后续就没有插入就浪费了本次扩容(扩容非常消耗性能)。</p><p>而 ConcurrentHashMap 不一样，它是先将数据插入之后再检查是否需要扩容，之后再做插入。</p><h2 id="size-方法"><a href="#size-方法" class="headerlink" title="size 方法"></a>size 方法</h2><p>每个 <code>Segment</code> 都有一个 <code>volatile</code> 修饰的全局变量 <code>count</code> ,求整个 <code>ConcurrentHashMap</code> 的 <code>size</code> 时很明显就是将所有的 <code>count</code> 累加即可。但是 <code>volatile</code> 修饰的变量却不能保证多线程的原子性，所有直接累加很容易出现并发问题。</p><p>但如果每次调用 <code>size</code> 方法将其余的修改操作加锁效率也很低。所以做法是先尝试两次将 <code>count</code> 累加，如果容器的 <code>count</code> 发生了变化再加锁来统计 <code>size</code>。</p><p>至于 <code>ConcurrentHashMap</code> 是如何知道在统计时大小发生了变化呢，每个 <code>Segment</code> 都有一个 <code>modCount</code> 变量，每当进行一次 <code>put remove</code> 等操作，<code>modCount</code> 将会 +1。只要 <code>modCount</code> 发生了变化就认为容器的大小也在发生变化。</p><blockquote><p>以上内容 base JDK1.7，1.8 的实现更加复杂但是原理类似，建议在 1.7 的基础上查看源码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ConcurrentHashMap-实现原理&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap-实现原理&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap 实现原理&quot;&gt;&lt;/a&gt;ConcurrentHashMap 实现
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Java-Interview" scheme="https://airpoet.github.io/categories/Github/Java-Interview/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>爬虫的简单入门</title>
    <link href="https://airpoet.github.io/2018/07/06/Python/Python%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <id>https://airpoet.github.io/2018/07/06/Python/Python简单入门/</id>
    <published>2018-07-06T01:29:54.058Z</published>
    <updated>2018-07-23T07:47:02.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据来源"><a href="#1-数据来源" class="headerlink" title="1.数据来源"></a>1.数据来源</h2><ul><li>业务库</li><li>日志数据</li><li>公共数据</li><li>购买 – 倒卖 – 有法律风险</li></ul><h2 id="2-爬虫工程师技能清单"><a href="#2-爬虫工程师技能清单" class="headerlink" title="2.爬虫工程师技能清单"></a>2.爬虫工程师技能清单</h2><ol><li>python编程语言基础</li><li>HTTP协议</li><li>html,css,javascript基本web技能</li><li>mysql/mongodb/redis等存储系统</li><li>scrapy/pyspider/django</li><li>抓包工具和网页分析工具(正则，bs4，xpath，selenuim)</li><li>json/csv/db</li></ol><h2 id="3-Python3基础内容"><a href="#3-Python3基础内容" class="headerlink" title="3.Python3基础内容"></a>3.Python3基础内容</h2><p><a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰Python3教程(文档)</a><br><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程Python3教程(文档)</a></p><p>python编程语言简单介绍（产生背景，优缺点，流行度）<br>python的开发环境搭建（linux，windows，python，pycharm）<br>python的hello world<br>python关键字查看<br>python的变量定义<br>python的数据类型（Number String List Tuple Set Dict）<br>python的注释（单行和段落）<br>python的输入输出（print 和 input）<br>python数据类型转换/常用数值运算/类型判断<br>python的集合，列表，元组，字典<br>python的流程控制for和while和if（break， continue， pass）<br>python的切片<br>python的代码缩进（换行，段落）<br>python函数（自定义函数，常用内置模块，常用函数，函数调用）<br>python异常<br>python模块（内置模块，导入模块，自定义模块）<br>python迭代器和生成器<br>python面向对象<br>python读写文件IO<br>python数据库和JSON和CSV</p><h4 id="3-1-基本语法记录"><a href="#3-1-基本语法记录" class="headerlink" title="3.1 基本语法记录"></a>3.1 基本语法记录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时遍历2个长度相同的 list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(companys)):</span><br><span class="line">    print(companys[i] + <span class="string">","</span> + fincs[i])</span><br><span class="line">    </span><br><span class="line">jobs <span class="comment"># 工作岗位</span></span><br><span class="line">companys <span class="comment">#公司名</span></span><br><span class="line">m</span><br><span class="line">moneys <span class="comment"># 薪资</span></span><br><span class="line">edus <span class="comment"># 学历</span></span><br><span class="line">exps <span class="comment"># 经验</span></span><br><span class="line">cmptypes <span class="comment"># 公司类型</span></span><br><span class="line">fincs  <span class="comment"># 融资状态</span></span><br><span class="line">true_tags <span class="comment">#job 标签</span></span><br><span class="line">c_b_s  <span class="comment"># 公司优势</span></span><br></pre></td></tr></table></figure><h2 id="4-搜索引擎基本工作原理"><a href="#4-搜索引擎基本工作原理" class="headerlink" title="4.搜索引擎基本工作原理"></a>4.搜索引擎基本工作原理</h2><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-06-023330.png" alt="image-20180706103329915"></p><h2 id="5-python-基本操作-amp-爬虫代码"><a href="#5-python-基本操作-amp-爬虫代码" class="headerlink" title="5.python 基本操作 &amp; 爬虫代码"></a>5.python 基本操作 &amp; 爬虫代码</h2><h4 id="5-1基本语法"><a href="#5-1基本语法" class="headerlink" title="5.1基本语法"></a>5.1基本语法</h4><p><a href="https://github.com/airpoet/bigdata/tree/master/Python_Project/python_basic" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/tree/master/Python_Project/python_basic</a></p><h4 id="5-2-高级语法-tcp-udp-多线程-面向对象OOP-py-操作-mysql"><a href="#5-2-高级语法-tcp-udp-多线程-面向对象OOP-py-操作-mysql" class="headerlink" title="5.2 高级语法(tcp,udp / 多线程 /  面向对象OOP /  py 操作 mysql)"></a>5.2 高级语法(tcp,udp / 多线程 /  面向对象OOP /  py 操作 mysql)</h4><p><a href="https://github.com/airpoet/bigdata/tree/master/Python_Project/mypython-1" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/tree/master/Python_Project/mypython-1</a></p><h4 id="5-3-爬虫"><a href="#5-3-爬虫" class="headerlink" title="5.3 爬虫"></a>5.3 爬虫</h4><p><a href="https://github.com/airpoet/bigdata/tree/master/Python_Project/spiderDemo" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/tree/master/Python_Project/spiderDemo</a></p><h4 id="5-5-python-与-Hadoop-Spark-生态的交互"><a href="#5-5-python-与-Hadoop-Spark-生态的交互" class="headerlink" title="5.5 python 与 Hadoop / Spark 生态的交互"></a>5.5 python 与 Hadoop / Spark 生态的交互</h4><p><a href="https://github.com/airpoet/bigdata/tree/master/Spark_Project/HBasePythonDemo" target="_blank" rel="noopener">https://github.com/airpoet/bigdata/tree/master/Spark_Project/HBasePythonDemo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-数据来源&quot;&gt;&lt;a href=&quot;#1-数据来源&quot; class=&quot;headerlink&quot; title=&quot;1.数据来源&quot;&gt;&lt;/a&gt;1.数据来源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;业务库&lt;/li&gt;
&lt;li&gt;日志数据&lt;/li&gt;
&lt;li&gt;公共数据&lt;/li&gt;
&lt;li&gt;购买 – 倒卖
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="爬虫" scheme="https://airpoet.github.io/categories/Hadoop/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="爬虫" scheme="https://airpoet.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS6.x下Python3的安装</title>
    <link href="https://airpoet.github.io/2018/07/05/Python/CentOS6.x%E4%B8%8BPython3%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://airpoet.github.io/2018/07/05/Python/CentOS6.x下Python3的安装/</id>
    <published>2018-07-05T06:03:43.250Z</published>
    <updated>2018-07-05T06:06:10.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python-3-6-4在centos-6-7安装："><a href="#python-3-6-4在centos-6-7安装：" class="headerlink" title="python-3.6.4在centos-6.7安装："></a><strong>python-3.6.4在centos-6.7安装：</strong></h3><blockquote><p>详细步骤：</p></blockquote><p><strong>1、安装一些依赖的软件包</strong><br>yum -y groupinstall “Development tools”<br>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel<br>yum -y install yum-plugin-remove-with-leaves</p><p><strong>2、下载Python3.6的源码包并编译（在/usr/local目录下）</strong><br>wget <a href="https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</a><br>tar -vxf Python-3.6.4.tgz -C ~/apps<br>cd Python-3.6.4<br>mkdir /usr/local/python3<br>./configure –prefix=/usr/local/python3 –enable-shared –enable-optimizations<br>make<br>make install</p><p><strong>3、把新安装的python3.6拷贝到/usr/bin/目录下</strong><br>cp /usr/local/python3/bin/python3.6 /usr/bin/python3.6<br>然后新建快捷方式：<br>ln -s /usr/bin/python3.6 /usr/bin/python3</p><p><strong>4、一步操作：</strong><br>echo /usr/local/python3/lib/ &gt;&gt; /etc/ld.so.conf.d/local.conf<br>ldconfig</p><p><strong>5、验证安装是否成功</strong><br>/usr/bin/python3 –version</p><p><strong>6、配置环境变量</strong><br>vim /etc/profile<br>export PYTHON_HOME=/usr/local/python3<br>export PATH=$PATH:$PYTHON_HOME/bin<br>source /etc/profile</p><p><strong>7、尝试安装一个模块</strong><br>pip3 install beautifulsoup4</p><p><strong>8、修改pip源：</strong><br>mkdir ~/.pip<br>cd ~/.pip<br>vi pip.conf<br>[global]<br>trusted-host =  pypi.douban.com<br>index-url = <a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p><p><strong>9、安装numpy</strong><br>pip3 install numpy</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python-3-6-4在centos-6-7安装：&quot;&gt;&lt;a href=&quot;#python-3-6-4在centos-6-7安装：&quot; class=&quot;headerlink&quot; title=&quot;python-3.6.4在centos-6.7安装：&quot;&gt;&lt;/a&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://airpoet.github.io/categories/Python/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://airpoet.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>面向对象思想</title>
    <link href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
    <id>https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/面向对象思想/</id>
    <published>2018-07-04T13:51:06.371Z</published>
    <updated>2018-07-09T07:05:30.312Z</updated>
    
    <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#一三大特性">一、三大特性</a><ul><li><a href="#封装">封装</a></li><li><a href="#继承">继承</a></li><li><a href="#多态">多态</a></li></ul></li><li><a href="#二类图">二、类图</a><ul><li><a href="#泛化关系-generalization">泛化关系 (Generalization)</a></li><li><a href="#实现关系-realization">实现关系 (Realization)</a></li><li><a href="#聚合关系-aggregation">聚合关系 (Aggregation)</a></li><li><a href="#组合关系-composition">组合关系 (Composition)</a></li><li><a href="#关联关系-association">关联关系 (Association)</a></li><li><a href="#依赖关系-dependency">依赖关系 (Dependency)</a></li></ul></li><li><a href="#三设计原则">三、设计原则</a><ul><li><a href="#solid">S.O.L.I.D</a></li><li><a href="#其他常见原则">其他常见原则</a></li></ul></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、三大特性"><a href="#一、三大特性" class="headerlink" title="一、三大特性"></a>一、三大特性</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p><p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender == <span class="number">0</span> ? <span class="string">"man"</span> : <span class="string">"woman"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">18</span> &lt;= age &amp;&amp; age &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" is working very hard!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" can't work any more!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承实现了  <strong>IS-A</strong>  关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为  <strong>向上转型</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态分为编译时多态和运行时多态。编译时多态主要指方法的重载，运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定。</p><p>运行时多态有三个条件：</p><ul><li>继承</li><li>覆盖（重写）</li><li>向上转型</li></ul><p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Instument is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Wind is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percussion</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Percussion is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        instruments.add(<span class="keyword">new</span> Wind());</span><br><span class="line">        instruments.add(<span class="keyword">new</span> Percussion());</span><br><span class="line">        <span class="keyword">for</span>(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h1><p>以下类图使用 <a href="https://www.planttext.com/" target="_blank" rel="noopener">PlantUML</a> 绘制，更多语法及使用请参考：<a href="http://plantuml.com/" target="_blank" rel="noopener">http://plantuml.com/</a></p><h2 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系 (Generalization)"></a>泛化关系 (Generalization)</h2><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061030.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Generalization</span><br><span class="line"></span><br><span class="line">class Vihical</span><br><span class="line">class Car</span><br><span class="line">class Trunck</span><br><span class="line"></span><br><span class="line">Vihical &lt;|-- Car</span><br><span class="line">Vihical &lt;|-- Trunck</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="实现关系-Realization"><a href="#实现关系-Realization" class="headerlink" title="实现关系 (Realization)"></a>实现关系 (Realization)</h2><p>用来实现一个接口，在 Java 中使用 implement 关键字。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061039.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Realization</span><br><span class="line"></span><br><span class="line">interface MoveBehavior</span><br><span class="line">class Fly</span><br><span class="line">class Run</span><br><span class="line"></span><br><span class="line">MoveBehavior &lt;|.. Fly</span><br><span class="line">MoveBehavior &lt;|.. Run</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系 (Aggregation)"></a>聚合关系 (Aggregation)</h2><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061043.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Aggregation</span><br><span class="line"></span><br><span class="line">class Computer</span><br><span class="line">class Keyboard</span><br><span class="line">class Mouse</span><br><span class="line">class Screen</span><br><span class="line"></span><br><span class="line">Computer o-- Keyboard</span><br><span class="line">Computer o-- Mouse</span><br><span class="line">Computer o-- Screen</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系 (Composition)"></a>组合关系 (Composition)</h2><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061053.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Composition</span><br><span class="line"></span><br><span class="line">class Company</span><br><span class="line">class DepartmentA</span><br><span class="line">class DepartmentB</span><br><span class="line"></span><br><span class="line">Company *-- DepartmentA</span><br><span class="line">Company *-- DepartmentB</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系 (Association)"></a>关联关系 (Association)</h2><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061058.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Association</span><br><span class="line"></span><br><span class="line">class School</span><br><span class="line">class Student</span><br><span class="line"></span><br><span class="line">School &quot;1&quot; - &quot;n&quot; Student</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="依赖关系-Dependency"><a href="#依赖关系-Dependency" class="headerlink" title="依赖关系 (Dependency)"></a>依赖关系 (Dependency)</h2><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p><ul><li>A 类是 B 类中的（某中方法的）局部变量；</li><li>A 类是 B 类方法当中的一个参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化；</li></ul><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-061101.png"> </div><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Dependency</span><br><span class="line"></span><br><span class="line">class Vihicle &#123;</span><br><span class="line">    move(MoveBehavior)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface MoveBehavior &#123;</span><br><span class="line">    move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">note &quot;MoveBehavior.move()&quot; as N</span><br><span class="line"></span><br><span class="line">Vihicle ..&gt; MoveBehavior</span><br><span class="line"></span><br><span class="line">Vihicle .. N</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h1 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h1><h2 id="S-O-L-I-D"><a href="#S-O-L-I-D" class="headerlink" title="S.O.L.I.D"></a>S.O.L.I.D</h2><table><thead><tr><th style="text-align:center">简写</th><th style="text-align:center">全拼</th><th style="text-align:center">中文翻译</th></tr></thead><tbody><tr><td style="text-align:center">SRP</td><td style="text-align:center">The Single Responsibility Principle</td><td style="text-align:center">单一责任原则</td></tr><tr><td style="text-align:center">OCP</td><td style="text-align:center">The Open Closed Principle</td><td style="text-align:center">开放封闭原则</td></tr><tr><td style="text-align:center">LSP</td><td style="text-align:center">The Liskov Substitution Principle</td><td style="text-align:center">里氏替换原则</td></tr><tr><td style="text-align:center">ISP</td><td style="text-align:center">The Interface Segregation Principle</td><td style="text-align:center">接口分离原则</td></tr><tr><td style="text-align:center">DIP</td><td style="text-align:center">The Dependency Inversion Principle</td><td style="text-align:center">依赖倒置原则</td></tr></tbody></table><h3 id="1-单一责任原则"><a href="#1-单一责任原则" class="headerlink" title="1. 单一责任原则"></a>1. 单一责任原则</h3><blockquote><p>修改一个类的原因应该只有一个。</p></blockquote><p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p><h3 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="2. 开放封闭原则"></a>2. 开放封闭原则</h3><blockquote><p>类应该对扩展开放，对修改关闭。</p></blockquote><p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p><p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p><h3 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3. 里氏替换原则"></a>3. 里氏替换原则</h3><blockquote><p>子类对象必须能够替换掉所有父类对象。</p></blockquote><p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p><p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p><h3 id="4-接口分离原则"><a href="#4-接口分离原则" class="headerlink" title="4. 接口分离原则"></a>4. 接口分离原则</h3><blockquote><p>不应该强迫客户依赖于它们不用的方法。</p></blockquote><p>因此使用多个专门的接口比使用单一的总接口要好。</p><h3 id="5-依赖倒置原则"><a href="#5-依赖倒置原则" class="headerlink" title="5. 依赖倒置原则"></a>5. 依赖倒置原则</h3><blockquote><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p><p>依赖于抽象意味着：</p><ul><li>任何变量都不应该持有一个指向具体类的指针或者引用；</li><li>任何类都不应该从具体类派生；</li><li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li></ul><h2 id="其他常见原则"><a href="#其他常见原则" class="headerlink" title="其他常见原则"></a>其他常见原则</h2><p>除了上述的经典原则，在实际开发中还有下面这些常见的设计原则。</p><table><thead><tr><th style="text-align:center">简写</th><th style="text-align:center">全拼</th><th style="text-align:center">中文翻译</th></tr></thead><tbody><tr><td style="text-align:center">LOD</td><td style="text-align:center">The Law of Demeter</td><td style="text-align:center">迪米特法则</td></tr><tr><td style="text-align:center">CRP</td><td style="text-align:center">The Composite Reuse Principle</td><td style="text-align:center">合成复用原则</td></tr><tr><td style="text-align:center">CCP</td><td style="text-align:center">The Common Closure Principle</td><td style="text-align:center">共同封闭原则</td></tr><tr><td style="text-align:center">SAP</td><td style="text-align:center">The Stable Abstractions Principle</td><td style="text-align:center">稳定抽象原则</td></tr><tr><td style="text-align:center">SDP</td><td style="text-align:center">The Stable Dependencies Principle</td><td style="text-align:center">稳定依赖原则</td></tr></tbody></table><h3 id="1-迪米特法则"><a href="#1-迪米特法则" class="headerlink" title="1. 迪米特法则"></a>1. 迪米特法则</h3><p>迪米特法则又叫作最少知识原则（Least Knowledge Principle，简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p><h3 id="2-合成复用原则"><a href="#2-合成复用原则" class="headerlink" title="2. 合成复用原则"></a>2. 合成复用原则</h3><p>尽量使用对象组合，而不是继承来达到复用的目的。</p><h3 id="3-共同封闭原则"><a href="#3-共同封闭原则" class="headerlink" title="3. 共同封闭原则"></a>3. 共同封闭原则</h3><p>一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</p><h3 id="4-稳定抽象原则"><a href="#4-稳定抽象原则" class="headerlink" title="4. 稳定抽象原则"></a>4. 稳定抽象原则</h3><p>最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即包的抽象程度跟它的稳定性成正比。</p><h3 id="5-稳定依赖原则"><a href="#5-稳定依赖原则" class="headerlink" title="5. 稳定依赖原则"></a>5. 稳定依赖原则</h3><p>包之间的依赖关系都应该是稳定方向依赖的，包要依赖的包要比自己更具有稳定性。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Java 编程思想</li><li>敏捷软件开发：原则、模式与实践</li><li><a href="http://www.cnblogs.com/shanyou/archive/2009/09/21/1570716.html" target="_blank" rel="noopener">面向对象设计的 SOLID 原则</a></li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#generalization" target="_blank" rel="noopener">看懂 UML 类图和时序图</a></li><li><a href="http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html" target="_blank" rel="noopener">UML 系列——时序图（顺序图）sequence diagram</a></li><li><a href="http://blog.csdn.net/jianyuerensheng/article/details/51602015" target="_blank" rel="noopener">面向对象编程三大特性 —— 封装、继承、多态</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一三大特性&quot;&gt;一、三大特性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#封装&quot;&gt;封装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#继承&quot;&gt;继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#多态&quot;&gt;多态&lt;/
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Interview-Notebook" scheme="https://airpoet.github.io/categories/Github/Interview-Notebook/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>重构</title>
    <link href="https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/%E9%87%8D%E6%9E%84/"/>
    <id>https://airpoet.github.io/2018/07/04/Java/Interview/Interview-Notebook/重构/</id>
    <published>2018-07-04T13:51:06.369Z</published>
    <updated>2018-07-09T07:07:53.426Z</updated>
    
    <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#一第一个案例">一、第一个案例</a></li><li><a href="#二重构原则">二、重构原则</a><ul><li><a href="#定义">定义</a></li><li><a href="#为何重构">为何重构</a></li><li><a href="#三次法则">三次法则</a></li><li><a href="#间接层与重构">间接层与重构</a></li><li><a href="#修改接口">修改接口</a></li><li><a href="#何时不该重构">何时不该重构</a></li><li><a href="#重构与设计">重构与设计</a></li><li><a href="#重构与性能">重构与性能</a></li></ul></li><li><a href="#三代码的坏味道">三、代码的坏味道</a><ul><li><a href="#1-重复代码">1. 重复代码</a></li><li><a href="#2-过长函数">2. 过长函数</a></li><li><a href="#3-过大的类">3. 过大的类</a></li><li><a href="#4-过长的参数列表">4. 过长的参数列表</a></li><li><a href="#5-发散式变化">5. 发散式变化</a></li><li><a href="#6-散弹式修改">6. 散弹式修改</a></li><li><a href="#7-依恋情结">7. 依恋情结</a></li><li><a href="#8-数据泥团">8. 数据泥团</a></li><li><a href="#9-基本类型偏执">9. 基本类型偏执</a></li><li><a href="#10-switch-惊悚现身">10. switch 惊悚现身</a></li><li><a href="#11-平行继承体系">11. 平行继承体系</a></li><li><a href="#12-冗余类">12. 冗余类</a></li><li><a href="#13-夸夸其谈未来性">13. 夸夸其谈未来性</a></li><li><a href="#14-令人迷惑的暂时字段">14. 令人迷惑的暂时字段</a></li><li><a href="#15-过度耦合的消息链">15. 过度耦合的消息链</a></li><li><a href="#16-中间人">16. 中间人</a></li><li><a href="#17-狎昵关系">17. 狎昵关系</a></li><li><a href="#18-异曲同工的类">18. 异曲同工的类</a></li><li><a href="#19-不完美的类库">19. 不完美的类库</a></li><li><a href="#20-幼稚的数据类">20. 幼稚的数据类</a></li><li><a href="#21-被拒绝的馈赠">21. 被拒绝的馈赠</a></li><li><a href="#22-过多的注释">22. 过多的注释</a></li></ul></li><li><a href="#四构筑测试体系">四、构筑测试体系</a></li><li><a href="#五重新组织函数">五、重新组织函数</a><ul><li><a href="#1-提炼函数">1. 提炼函数</a></li><li><a href="#2-内联函数">2. 内联函数</a></li><li><a href="#3-内联临时变量">3. 内联临时变量</a></li><li><a href="#4-以查询取代临时变量">4. 以查询取代临时变量</a></li><li><a href="#5-引起解释变量">5. 引起解释变量</a></li><li><a href="#6-分解临时变量">6. 分解临时变量</a></li><li><a href="#7-移除对参数的赋值">7. 移除对参数的赋值</a></li><li><a href="#8-以函数对象取代函数">8. 以函数对象取代函数</a></li><li><a href="#9-替换算法">9. 替换算法</a></li></ul></li><li><a href="#六在对象之间搬移特性">六、在对象之间搬移特性</a><ul><li><a href="#1-搬移函数">1. 搬移函数</a></li><li><a href="#2-搬移字段">2. 搬移字段</a></li><li><a href="#3-提炼类">3. 提炼类</a></li><li><a href="#4-将类内联化">4. 将类内联化</a></li><li><a href="#5-隐藏委托关系">5. 隐藏委托关系</a></li><li><a href="#6-移除中间人">6. 移除中间人</a></li><li><a href="#7-引入外加函数">7. 引入外加函数</a></li><li><a href="#8-引入本地扩展">8. 引入本地扩展</a></li></ul></li><li><a href="#七重新组织数据">七、重新组织数据</a><ul><li><a href="#1-自封装字段">1. 自封装字段</a></li><li><a href="#2-以对象取代数据值">2. 以对象取代数据值</a></li><li><a href="#3-将值对象改成引用对象">3. 将值对象改成引用对象</a></li><li><a href="#4-将引用对象改为值对象">4. 将引用对象改为值对象</a></li><li><a href="#5-以对象取代数组">5. 以对象取代数组</a></li><li><a href="#6-赋值被监视数据">6. 赋值被监视数据</a></li><li><a href="#7-将单向关联改为双向关联">7. 将单向关联改为双向关联</a></li><li><a href="#8-将双向关联改为单向关联">8. 将双向关联改为单向关联</a></li><li><a href="#9-以字面常量取代魔法数">9. 以字面常量取代魔法数</a></li><li><a href="#10-封装字段">10. 封装字段</a></li><li><a href="#11-封装集合">11. 封装集合</a></li><li><a href="#12-以数据类取代记录">12. 以数据类取代记录</a></li><li><a href="#13-以类取代类型码">13. 以类取代类型码</a></li><li><a href="#14-以子类取代类型码">14. 以子类取代类型码</a></li><li><a href="#15-以-statestrategy-取代类型码">15. 以 State/Strategy 取代类型码</a></li><li><a href="#16-以字段取代子类">16. 以字段取代子类</a></li></ul></li><li><a href="#八简化条件表达式">八、简化条件表达式</a><ul><li><a href="#1-分解条件表达式">1. 分解条件表达式</a></li><li><a href="#2-合并条件表达式">2. 合并条件表达式</a></li><li><a href="#3-合并重复的条件片段">3. 合并重复的条件片段</a></li><li><a href="#4-移除控制标记">4. 移除控制标记</a></li><li><a href="#5-以卫语句取代嵌套条件表达式">5. 以卫语句取代嵌套条件表达式</a></li><li><a href="#6-以多态取代条件表达式">6. 以多态取代条件表达式</a></li><li><a href="#7-引入-null-对象">7. 引入 Null 对象</a></li><li><a href="#8-引入断言">8. 引入断言</a></li></ul></li><li><a href="#九简化函数调用">九、简化函数调用</a><ul><li><a href="#1-函数改名">1. 函数改名</a></li><li><a href="#2-添加参数">2. 添加参数</a></li><li><a href="#3-移除参数">3. 移除参数</a></li><li><a href="#4-将查询函数和修改函数分离">4. 将查询函数和修改函数分离</a></li><li><a href="#5-令函数携带参数">5. 令函数携带参数</a></li><li><a href="#6-以明确函数取代参数">6. 以明确函数取代参数</a></li><li><a href="#7-保持对象完整">7. 保持对象完整</a></li><li><a href="#8-以函数取代参数">8. 以函数取代参数</a></li><li><a href="#9-引入参数对象">9. 引入参数对象</a></li><li><a href="#10-移除设值函数">10. 移除设值函数</a></li><li><a href="#11-隐藏函数">11. 隐藏函数</a></li><li><a href="#12-以工厂函数取代构造函数">12. 以工厂函数取代构造函数</a></li><li><a href="#13-封装向下转型">13. 封装向下转型</a></li><li><a href="#14-以异常取代错误码">14. 以异常取代错误码</a></li><li><a href="#15-以测试取代异常">15. 以测试取代异常</a></li></ul></li><li><a href="#十处理概括关系">十、处理概括关系</a><ul><li><a href="#1-字段上移">1. 字段上移</a></li><li><a href="#2-函数上移">2. 函数上移</a></li><li><a href="#3-构造函数本体上移">3. 构造函数本体上移</a></li><li><a href="#4-函数下移">4. 函数下移</a></li><li><a href="#5-字段下移">5. 字段下移</a></li><li><a href="#6-提炼子类">6. 提炼子类</a></li><li><a href="#7-提炼超类">7. 提炼超类</a></li><li><a href="#8-提炼接口">8. 提炼接口</a></li><li><a href="#9-折叠继承体系">9. 折叠继承体系</a></li><li><a href="#10-塑造模板函数">10. 塑造模板函数</a></li><li><a href="#11-以委托取代继承">11. 以委托取代继承</a></li><li><a href="#12-以继承取代委托">12. 以继承取代委托</a></li></ul></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、第一个案例"><a href="#一、第一个案例" class="headerlink" title="一、第一个案例"></a>一、第一个案例</h1><p>如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构这个程序。</p><p>在重构前，需要先构建好可靠的测试环境，确保安全地重构。</p><p>重构需要以微小的步伐修改程序，如果重构过程发生错误，很容易就能发现错误。</p><p><strong>案例分析</strong> </p><p>影片出租店应用程序，需要计算每位顾客的消费金额。</p><p>包括三个类：Movie、Rental 和 Customer。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-062517.png"> </div><br></p><p>最开始的实现是把所有的计费代码都放在 Customer 类中。可以发现，该代码没有使用 Customer 类中的任何信息，更多的是使用 Rental 类的信息，因此第一个可以重构的点就是把具体计费的代码移到 Rental 类中，然后 Customer 类的 getTotalCharge() 方法只需要调用 Rental 类中的计费方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Rental&gt; rentals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addRental</span><span class="params">(Rental rental)</span> </span>&#123;</span><br><span class="line">        rentals.add(rental);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getTotalCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> totalCharge = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Rental rental : rentals) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (rental.getMovie().getMovieType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> Movie.Type1:</span><br><span class="line">                    totalCharge += rental.getDaysRented();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Movie.Type2:</span><br><span class="line">                    totalCharge += rental.getDaysRented() * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Movie.Type3:</span><br><span class="line">                    totalCharge += rental.getDaysRented() * <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalCharge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rental</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> daysRented;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Movie movie;</span><br><span class="line"></span><br><span class="line">    Rental(<span class="keyword">int</span> daysRented, Movie movie) &#123;</span><br><span class="line">        <span class="keyword">this</span>.daysRented = daysRented;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Movie <span class="title">getMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDaysRented</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> daysRented;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Type1 = <span class="number">0</span>, Type2 = <span class="number">1</span>, Type3 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    Movie(<span class="keyword">int</span> type) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMovieType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        Rental rental1 = <span class="keyword">new</span> Rental(<span class="number">1</span>, <span class="keyword">new</span> Movie(Movie.Type1));</span><br><span class="line">        Rental rental2 = <span class="keyword">new</span> Rental(<span class="number">2</span>, <span class="keyword">new</span> Movie(Movie.Type2));</span><br><span class="line">        customer.addRental(rental1);</span><br><span class="line">        customer.addRental(rental2);</span><br><span class="line">        System.out.println(customer.getTotalCharge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>使用 switch 的准则是：只使用 switch 所在类的数据。解释如下：switch 使用的数据通常是一组相关的数据，例如 getTotalCharge() 代码使用了 Movie 的多种类别数据。当这组类别的数据发生改变时，例如增加 Movie 的类别或者修改一种 Movie 类别的计费方法，就需要修改 switch 代码。如果违反了准则，就会有多个地方的 switch 使用了这部分的数据，那么这些 swtich 都需要进行修改，这些代码可能遍布在各个地方，修改工作往往会很难进行。上面的实现违反了这一准则，因此需要重构。</p><p>以下是继承 Movie 的多态解决方案，这种方案可以解决上述的 switch 问题，因为每种电影类别的计费方式都被放到了对应 Movie 子类中，当变化发生时，只需要去修改对应子类中的代码即可。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-062523.png"> </div><br></p><p>有一条设计原则指示应该多用组合少用继承，这是因为组合比继承具有更高的灵活性。例如上面的继承方案，一部电影要改变它的计费方式，就要改变它所属的类，但是对象所属的类在编译时期就确定了，无法在运行过程中改变。（运行时多态可以在运行过程中改变一个父类引用指向的子类对象，但是无法改变一个对象所属的类。）</p><p>策略模式就是使用组合替代继承的一种解决方案。引入 Price 类，它有多种实现。Movie 组合了一个 Price 对象，并且在运行时可以改变组合的 Price 对象，从而使得它的计费方式发生改变。</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-062525.png"> </div><br></p><p>重构后整体的类图和时序图如下：</p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-062531.png"> </div><br></p><p><div align="center"> <img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-07-09-062535.png"> </div><br></p><p>重构后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Rental&gt; rentals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addRental</span><span class="params">(Rental rental)</span> </span>&#123;</span><br><span class="line">        rentals.add(rental);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getTotalCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> totalCharge = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Rental rental : rentals) &#123;</span><br><span class="line">            totalCharge += rental.getCharge();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalCharge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rental</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> daysRented;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Movie movie;</span><br><span class="line"></span><br><span class="line">    Rental(<span class="keyword">int</span> daysRented, Movie movie) &#123;</span><br><span class="line">        <span class="keyword">this</span>.daysRented = daysRented;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> daysRented * movie.getCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Price1</span> <span class="keyword">implements</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Price2</span> <span class="keyword">implements</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imp2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Price3</span> <span class="keyword">implements</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Price price;</span><br><span class="line"></span><br><span class="line">    Movie(Price price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price.getCharge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        Rental rental1 = <span class="keyword">new</span> Rental(<span class="number">1</span>, <span class="keyword">new</span> Movie(<span class="keyword">new</span> Price1()));</span><br><span class="line">        Rental rental2 = <span class="keyword">new</span> Rental(<span class="number">2</span>, <span class="keyword">new</span> Movie(<span class="keyword">new</span> Price2()));</span><br><span class="line">        customer.addRental(rental1);</span><br><span class="line">        customer.addRental(rental2);</span><br><span class="line">        System.out.println(customer.getTotalCharge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、重构原则"><a href="#二、重构原则" class="headerlink" title="二、重构原则"></a>二、重构原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>重构是对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</p><h2 id="为何重构"><a href="#为何重构" class="headerlink" title="为何重构"></a>为何重构</h2><ul><li>改进软件设计</li><li>使软件更容易理解</li><li>帮助找到 Bug</li><li>提高编程速度</li></ul><h2 id="三次法则"><a href="#三次法则" class="headerlink" title="三次法则"></a>三次法则</h2><p>第一次做某件事时只管去做；第二次做类似事情时可以去做；第三次再做类似的事，就应该重构。</p><h2 id="间接层与重构"><a href="#间接层与重构" class="headerlink" title="间接层与重构"></a>间接层与重构</h2><p>计算机科学中的很多问题可以通过增加一个间接层来解决，间接层具有以下价值：</p><ul><li>允许逻辑共享</li><li>分开解释意图和实现</li><li>隔离变化</li><li>封装条件逻辑</li></ul><p>重构可以理解为在适当的位置插入间接层以及在不需要时移除间接层。</p><h2 id="修改接口"><a href="#修改接口" class="headerlink" title="修改接口"></a>修改接口</h2><p>如果重构手法改变了已发布的接口，就必须维护新旧两个接口。可以保留旧接口，让旧接口去调用新接口，并且使用 Java 提供的 @deprecation 将旧接口标记为弃用。</p><p>可见修改接口特别麻烦，因此除非真有必要，否则不要发布接口，并且不要过早发布接口。</p><h2 id="何时不该重构"><a href="#何时不该重构" class="headerlink" title="何时不该重构"></a>何时不该重构</h2><p>当现有代码过于混乱时，应当重写而不是重构。</p><p>一个折中的办法是，将代码封装成一个个组件，然后对各个组件做重写或者重构的决定。</p><h2 id="重构与设计"><a href="#重构与设计" class="headerlink" title="重构与设计"></a>重构与设计</h2><p>软件开发无法预先设计，因为开发过程有很多变化发生，在最开始不可能都把所有情况考虑进去。</p><p>重构可以简化设计，重构在一个简单的设计上进行修修改改，当变化发生时，以一种灵活的方式去应对变化，进而带来更好的设计。</p><h2 id="重构与性能"><a href="#重构与性能" class="headerlink" title="重构与性能"></a>重构与性能</h2><p>为了软代码更容易理解，重构可能会导致性能减低。</p><p>在编写代码时，不用对性能过多关注，只有在最后性能优化阶段再考虑性能问题。</p><p>应当只关注关键代码的性能，并且只有一小部分的代码是关键代码。</p><h1 id="三、代码的坏味道"><a href="#三、代码的坏味道" class="headerlink" title="三、代码的坏味道"></a>三、代码的坏味道</h1><p>本章主要介绍一些不好的代码，也就是说这些代码应该被重构。</p><h2 id="1-重复代码"><a href="#1-重复代码" class="headerlink" title="1. 重复代码"></a>1. 重复代码</h2><blockquote><p>Duplicated Code</p></blockquote><p>同一个类的两个函数有相同表达式，则用 Extract Method 提取出重复代码；</p><p>两个互为兄弟的子类含有相同的表达式，先使用 Extract Method，然后把提取出来的函数 Pull Up Method 推入超类。</p><p>如果只是部分相同，用 Extract Method 分离出相似部分和差异部分，然后使用 Form Template Method 这种模板方法设计模式。</p><p>如果两个毫不相关的类出现重复代码，则使用 Extract Class 方法将重复代码提取到一个独立类中。</p><h2 id="2-过长函数"><a href="#2-过长函数" class="headerlink" title="2. 过长函数"></a>2. 过长函数</h2><blockquote><p>Long Method</p></blockquote><p>函数应该尽可能小，因为小函数具有解释能力、共享能力、选择能力。</p><p>分解长函数的原则：当需要用注释来说明一段代码时，就需要把这部分代码写入一个独立的函数中。</p><p>Extract Method 会把很多参数和临时变量都当做参数，可以用 Replace Temp with Query 消除临时变量，Introduce Parameter Object 和 Preserve Whole Object 可以将过长的参数列变得更简洁。</p><p>条件和循环语句往往也需要提取到新的函数中。</p><h2 id="3-过大的类"><a href="#3-过大的类" class="headerlink" title="3. 过大的类"></a>3. 过大的类</h2><blockquote><p>Large Class</p></blockquote><p>应该尽可能让一个类只做一件事，而过大的类做了过多事情，需要使用 Extract Class 或 Extract Subclass。</p><p>先确定客户端如何使用该类，然后运用 Extract Interface 为每一种使用方式提取出一个接口。</p><h2 id="4-过长的参数列表"><a href="#4-过长的参数列表" class="headerlink" title="4. 过长的参数列表"></a>4. 过长的参数列表</h2><blockquote><p>Long Parameter List</p></blockquote><p>太长的参数列表往往会造成前后不一致，不易使用。</p><p>面向对象程序中，函数所需要的数据通常能在宿主类中找到。</p><h2 id="5-发散式变化"><a href="#5-发散式变化" class="headerlink" title="5. 发散式变化"></a>5. 发散式变化</h2><blockquote><p>Divergent Change</p></blockquote><p>设计原则：一个类应该只有一个引起改变的原因。也就是说，针对某一外界变化所有相应的修改，都只应该发生在单一类中。</p><p>针对某种原因的变化，使用 Extract Class 将它提炼到一个类中。</p><h2 id="6-散弹式修改"><a href="#6-散弹式修改" class="headerlink" title="6. 散弹式修改"></a>6. 散弹式修改</h2><blockquote><p>Shotgun Surgery</p></blockquote><p>一个变化引起多个类修改。</p><p>使用 Move Method 和 Move Field 把所有需要修改的代码放到同一个类中。</p><h2 id="7-依恋情结"><a href="#7-依恋情结" class="headerlink" title="7. 依恋情结"></a>7. 依恋情结</h2><blockquote><p>Feature Envy</p></blockquote><p>一个函数对某个类的兴趣高于对自己所处类的兴趣，通常是过多访问其它类的数据，</p><p>使用 Move Method 将它移到该去的地方，如果对多个类都有 Feature Envy，先用 Extract Method 提取出多个函数。</p><h2 id="8-数据泥团"><a href="#8-数据泥团" class="headerlink" title="8. 数据泥团"></a>8. 数据泥团</h2><blockquote><p>Data Clumps</p></blockquote><p>有些数据经常一起出现，比如两个类具有相同的字段、许多函数有相同的参数，这些绑定在一起出现的数据应该拥有属于它们自己的对象。</p><p>使用 Extract Class 将它们放在一起。</p><h2 id="9-基本类型偏执"><a href="#9-基本类型偏执" class="headerlink" title="9. 基本类型偏执"></a>9. 基本类型偏执</h2><blockquote><p>Primitive Obsession</p></blockquote><p>使用类往往比使用基本类型更好，使用 Replace Data Value with Object 将数据值替换为对象。</p><h2 id="10-switch-惊悚现身"><a href="#10-switch-惊悚现身" class="headerlink" title="10. switch 惊悚现身"></a>10. switch 惊悚现身</h2><blockquote><p>Switch Statements</p></blockquote><p>具体参见第一章的案例。</p><h2 id="11-平行继承体系"><a href="#11-平行继承体系" class="headerlink" title="11. 平行继承体系"></a>11. 平行继承体系</h2><blockquote><p>Parallel Inheritance Hierarchies</p></blockquote><p>每当为某个类增加一个子类，必须也为另一个类相应增加一个子类。</p><p>这种结果会带来一些重复性，消除重复性的一般策略：让一个继承体系的实例引用另一个继承体系的实例。</p><h2 id="12-冗余类"><a href="#12-冗余类" class="headerlink" title="12. 冗余类"></a>12. 冗余类</h2><blockquote><p>Lazy Class</p></blockquote><p>如果一个类没有做足够多的工作，就应该消失。</p><h2 id="13-夸夸其谈未来性"><a href="#13-夸夸其谈未来性" class="headerlink" title="13. 夸夸其谈未来性"></a>13. 夸夸其谈未来性</h2><blockquote><p>Speculative Generality</p></blockquote><p>有些内容是用来处理未来可能发生的变化，但是往往会造成系统难以理解和维护，并且预测未来可能发生的改变很可能和最开始的设想相反。因此，如果不是必要，就不要这么做。</p><h2 id="14-令人迷惑的暂时字段"><a href="#14-令人迷惑的暂时字段" class="headerlink" title="14. 令人迷惑的暂时字段"></a>14. 令人迷惑的暂时字段</h2><blockquote><p>Temporary Field</p></blockquote><p>某个字段仅为某种特定情况而设，这样的代码不易理解，因为通常认为对象在所有时候都需要它的所有字段。</p><p>把这种字段和特定情况的处理操作使用 Extract Class 提炼到一个独立类中。</p><h2 id="15-过度耦合的消息链"><a href="#15-过度耦合的消息链" class="headerlink" title="15. 过度耦合的消息链"></a>15. 过度耦合的消息链</h2><blockquote><p>Message Chains</p></blockquote><p>一个对象请求另一个对象，然后再向后者请求另一个对象，然后…，这就是消息链。采用这种方式，意味着客户代码将与对象间的关系紧密耦合。</p><p>改用函数链，用函数委托另一个对象来处理。</p><h2 id="16-中间人"><a href="#16-中间人" class="headerlink" title="16. 中间人"></a>16. 中间人</h2><blockquote><p> Middle Man</p></blockquote><p>中间人负责处理委托给它的操作，如果一个类中有过多的函数都委托给其它类，那就是过度运用委托，应当 Remove Middle Man，直接与负责的对象打交道。</p><h2 id="17-狎昵关系"><a href="#17-狎昵关系" class="headerlink" title="17. 狎昵关系"></a>17. 狎昵关系</h2><blockquote><p>Inappropriate Intimacy</p></blockquote><p>两个类多于亲密，花费太多时间去探讨彼此的 private 成分。</p><h2 id="18-异曲同工的类"><a href="#18-异曲同工的类" class="headerlink" title="18. 异曲同工的类"></a>18. 异曲同工的类</h2><blockquote><p>Alernative Classes with Different Interfaces</p></blockquote><p>两个函数做同一件事，却有着不同的签名。</p><p>使用 Rename Method 根据它们的用途重新命名。</p><h2 id="19-不完美的类库"><a href="#19-不完美的类库" class="headerlink" title="19. 不完美的类库"></a>19. 不完美的类库</h2><blockquote><p>Incomplete Library Class</p></blockquote><p>类库的设计者不可能设计出完美的类库，当我们需要对类库进行一些修改时，可以使用以下两种方法：如果只是修改一两个函数，使用 Introduce Foreign Method；如果要添加一大堆额外行为，使用 Introduce Local Extension。</p><h2 id="20-幼稚的数据类"><a href="#20-幼稚的数据类" class="headerlink" title="20. 幼稚的数据类"></a>20. 幼稚的数据类</h2><blockquote><p>Data Class</p></blockquote><p>它只拥有一些数据字段，以及用于访问这些字段的函数，除此之外一无长物。</p><p>找出字段使用的地方，然后把相应的操作移到 Data Class 中。</p><h2 id="21-被拒绝的馈赠"><a href="#21-被拒绝的馈赠" class="headerlink" title="21. 被拒绝的馈赠"></a>21. 被拒绝的馈赠</h2><blockquote><p>Refused Bequest</p></blockquote><p>子类不想继承超类的所有函数和数据。</p><p>为子类新建一个兄弟类，不需要的函数或数据使用 Push Down Method 和 Push Down Field 下推给那个兄弟。</p><h2 id="22-过多的注释"><a href="#22-过多的注释" class="headerlink" title="22. 过多的注释"></a>22. 过多的注释</h2><blockquote><p>Comments</p></blockquote><p>使用 Extract Method 提炼出需要注释的部分，然后用函数名来解释函数的行为。</p><h1 id="四、构筑测试体系"><a href="#四、构筑测试体系" class="headerlink" title="四、构筑测试体系"></a>四、构筑测试体系</h1><p>Java 可以使用 Junit 进行单元测试。</p><p>测试应该能够完全自动化，并能检查测试的结果。</p><p>小步修改，频繁测试。</p><p>单元测试的对象是类的方法，而功能测是以客户的角度保证软件正常运行。</p><p>应当集中测试可能出错的边界条件。</p><h1 id="五、重新组织函数"><a href="#五、重新组织函数" class="headerlink" title="五、重新组织函数"></a>五、重新组织函数</h1><h2 id="1-提炼函数"><a href="#1-提炼函数" class="headerlink" title="1. 提炼函数"></a>1. 提炼函数</h2><blockquote><p>Extract Method</p></blockquote><p>将这段代码放进一个独立函数中，并让函数名称解释该函数的用途。</p><h2 id="2-内联函数"><a href="#2-内联函数" class="headerlink" title="2. 内联函数"></a>2. 内联函数</h2><blockquote><p>Inline Method</p></blockquote><p>一个函数的本体与名称同样清楚易懂。</p><p>在函数调用点插入函数本体，然后移除该函数。</p><h2 id="3-内联临时变量"><a href="#3-内联临时变量" class="headerlink" title="3. 内联临时变量"></a>3. 内联临时变量</h2><blockquote><p>Inline Temp</p></blockquote><p>一个临时变量，只被简单表达式赋值一次，而它妨碍了其它重构手法。</p><p>将所有对该变量的引用替换为对它赋值的那个表达式自身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> basePrice = anOrder.basePrice();</span><br><span class="line"><span class="keyword">return</span> basePrice &gt; <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> anOrder.basePrice() &gt; <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h2 id="4-以查询取代临时变量"><a href="#4-以查询取代临时变量" class="headerlink" title="4. 以查询取代临时变量"></a>4. 以查询取代临时变量</h2><blockquote><p>Replace Temp with Query</p></blockquote><p>以临时变量保存某一表达式的运算结果，将这个表达式提炼到一个独立函数中，将所有对临时变量的引用点替换为对新函数的调用。</p><p>Replace Temp with Query 往往是 Extract Method 之前必不可少的一个步骤，因为局部变量会使代码难以提炼。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> basePrice = quantity * itemPrice;</span><br><span class="line"><span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.95</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.98</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (basePrice() &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.95</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.98</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">basePrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> quantity * itemPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-引起解释变量"><a href="#5-引起解释变量" class="headerlink" title="5. 引起解释变量"></a>5. 引起解释变量</h2><blockquote><p>Introduce Explaining Variable</p></blockquote><p>将复杂表达式（或其中一部分）的结果放进一个临时变量， 以此变量名称来解释表达式用途。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">  (browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">  wasInitialized() &amp;&amp; resize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isMacOS = platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isIEBrower = browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> wasResized = resize &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isMacOS &amp;&amp; isIEBrower &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-分解临时变量"><a href="#6-分解临时变量" class="headerlink" title="6. 分解临时变量"></a>6. 分解临时变量</h2><blockquote><p>Split Temporary Variable</p></blockquote><p>某个临时变量被赋值超过一次，它既不是循环变量，也不是用于收集计算结果。</p><p>针对每次赋值，创造一个独立、对应的临时变量，每个临时变量只承担一个责任。</p><h2 id="7-移除对参数的赋值"><a href="#7-移除对参数的赋值" class="headerlink" title="7. 移除对参数的赋值"></a>7. 移除对参数的赋值</h2><blockquote><p> Remove Assigments to Parameters</p></blockquote><p>以一个临时变量取代对该参数的赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span> <span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quentity, <span class="keyword">int</span> yearToDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) inputVal -= <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span> <span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quentity, <span class="keyword">int</span> yearToDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = inputVal;</span><br><span class="line">    <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) result -= <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-以函数对象取代函数"><a href="#8-以函数对象取代函数" class="headerlink" title="8. 以函数对象取代函数"></a>8. 以函数对象取代函数</h2><blockquote><p>Replace Method with Method Object</p></blockquote><p>当对一个大型函数采用 Extract Method 时，由于包含了局部变量使得很难进行该操作。</p><p>将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后可以在同一个对象中将这个大型函数分解为多个小型函数。</p><h2 id="9-替换算法"><a href="#9-替换算法" class="headerlink" title="9. 替换算法"></a>9. 替换算法</h2><blockquote><p>Subsititute Algorithn</p></blockquote><h1 id="六、在对象之间搬移特性"><a href="#六、在对象之间搬移特性" class="headerlink" title="六、在对象之间搬移特性"></a>六、在对象之间搬移特性</h1><h2 id="1-搬移函数"><a href="#1-搬移函数" class="headerlink" title="1. 搬移函数"></a>1. 搬移函数</h2><blockquote><p>Move Method</p></blockquote><p>类中的某个函数与另一个类进行更多交流：调用后者或者被后者调用。</p><p>将这个函数搬移到另一个类中。</p><h2 id="2-搬移字段"><a href="#2-搬移字段" class="headerlink" title="2. 搬移字段"></a>2. 搬移字段</h2><blockquote><p>Move Field</p></blockquote><p>类中的某个字段被另一个类更多地用到，这里的用到是指调用取值设值函数，应当把该字段移到另一个类中。</p><h2 id="3-提炼类"><a href="#3-提炼类" class="headerlink" title="3. 提炼类"></a>3. 提炼类</h2><blockquote><p>Extract Class</p></blockquote><p>某个类做了应当由两个类做的事。</p><p>应当建立一个新类，将相关的字段和函数从旧类搬移到新类。</p><h2 id="4-将类内联化"><a href="#4-将类内联化" class="headerlink" title="4. 将类内联化"></a>4. 将类内联化</h2><blockquote><p>Inline Class</p></blockquote><p>与 Extract Class 相反。</p><h2 id="5-隐藏委托关系"><a href="#5-隐藏委托关系" class="headerlink" title="5. 隐藏委托关系"></a>5. 隐藏委托关系</h2><blockquote><p>Hide Delegate</p></blockquote><p>建立所需的函数，隐藏委托关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Department department;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person manager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果客户希望知道某人的经理是谁，必须获得 Department 对象，这样就对客户揭露了 Department 的工作原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person manager = john.getDepartment().getManager();</span><br></pre></td></tr></table></figure><p>通过为 Peron 建立一个函数来隐藏这种委托关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> department.getManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-移除中间人"><a href="#6-移除中间人" class="headerlink" title="6. 移除中间人"></a>6. 移除中间人</h2><blockquote><p>Remove Middle Man</p></blockquote><p>与 Hide Delegate 相反，本方法需要移除委托函数，让客户直接调用委托类。</p><p>Hide Delegate 有很大好处，但是它的代价是：每当客户要使用受托类的新特性时，就必须在服务器端添加一个简单的委托函数。随着受委托的特性越来越多，服务器类完全变成了一个“中间人”。</p><h2 id="7-引入外加函数"><a href="#7-引入外加函数" class="headerlink" title="7. 引入外加函数"></a>7. 引入外加函数</h2><blockquote><p>Introduce Foreign Method</p></blockquote><p>需要为提供服务的类添加一个函数，但是无法修改这个类。</p><p>可以在客户类中建立一个函数，并以第一参数形式传入一个服务类的实例，让客户类组合服务器实例。</p><h2 id="8-引入本地扩展"><a href="#8-引入本地扩展" class="headerlink" title="8. 引入本地扩展"></a>8. 引入本地扩展</h2><blockquote><p>Introduce Local Extension</p></blockquote><p>和 Introduce Foreign Method 目的一样，但是 Introduce Local Extension 通过建立新的类来实现。有两种方式：子类或者包装类，子类就是通过继承实现，包装类就是通过组合实现。</p><h1 id="七、重新组织数据"><a href="#七、重新组织数据" class="headerlink" title="七、重新组织数据"></a>七、重新组织数据</h1><h2 id="1-自封装字段"><a href="#1-自封装字段" class="headerlink" title="1. 自封装字段"></a>1. 自封装字段</h2><blockquote><p>Self Encapsulate Field</p></blockquote><p>为字段建立取值/设值函数，并用这些函数来访问字段。只有当子类想访问超类的一个字段，又想在子类中将对这个字段访问改为一个计算后的值，才使用这种方式，否则直接访问字段的方式简洁明了。</p><h2 id="2-以对象取代数据值"><a href="#2-以对象取代数据值" class="headerlink" title="2. 以对象取代数据值"></a>2. 以对象取代数据值</h2><blockquote><p>Replace Data Value with Object</p></blockquote><p>在开发初期，往往会用简单的数据项表示简单的情况，但是随着开发的进行，一些简单数据项会具有一些特殊行为。比如一开始会把电话号码存成字符串，但是随后发现电话号码需要“格式化”、“抽取区号”之类的特殊行为。</p><h2 id="3-将值对象改成引用对象"><a href="#3-将值对象改成引用对象" class="headerlink" title="3. 将值对象改成引用对象"></a>3. 将值对象改成引用对象</h2><blockquote><p>Change Value to Reference</p></blockquote><p>将彼此相等的实例替换为同一个对象。这就要用一个工厂来创建这种唯一对象，工厂类中需要保留一份已经创建对象的列表，当要创建一个对象时，先查找这份列表中是否已经存在该对象，如果存在，则返回列表中的这个对象；否则，新建一个对象，添加到列表中，并返回该对象。</p><h2 id="4-将引用对象改为值对象"><a href="#4-将引用对象改为值对象" class="headerlink" title="4. 将引用对象改为值对象"></a>4. 将引用对象改为值对象</h2><blockquote><p>Change Reference to value</p></blockquote><p>以 Change Value to Reference 相反。值对象有个非常重要的特性：它是不可变的，不可变表示如果要改变这个对象，必须用一个新的对象来替换旧对象，而不是修改旧对象。</p><p>需要为值对象实现 equals() 和 hashCode() 方法。</p><h2 id="5-以对象取代数组"><a href="#5-以对象取代数组" class="headerlink" title="5. 以对象取代数组"></a>5. 以对象取代数组</h2><blockquote><p>Replace Array with Object</p></blockquote><p>有一个数组，其中的元素各自代表不同的东西。</p><p>以对象替换数组，对于数组中的每个元素，以一个字段来表示，这样方便操作，也更容易理解。</p><h2 id="6-赋值被监视数据"><a href="#6-赋值被监视数据" class="headerlink" title="6. 赋值被监视数据"></a>6. 赋值被监视数据</h2><blockquote><p>Duplicate Observed Data</p></blockquote><p>一些领域数据置身于 GUI 控件中，而领域函数需要访问这些数据。</p><p>将该数据赋值到一个领域对象中，建立一个 Oberver 模式，用于同步领域对象和 GUI 对象内的重复数据。</p><p><div align="center"> <img src="../pics/e024bd7e-fb4e-4239-9451-9a6227f50b00.jpg" width=""> </div><br></p><h2 id="7-将单向关联改为双向关联"><a href="#7-将单向关联改为双向关联" class="headerlink" title="7. 将单向关联改为双向关联"></a>7. 将单向关联改为双向关联</h2><blockquote><p>Change Unidirectional Association to Bidirectional</p></blockquote><p>当两个类都需要对方的特性时，可以使用双向关联。</p><p>有两个类，分别为订单 Order 和客户 Customer，Order 引用了 Customer，Customer 也需要引用 Order 来查看其所有订单详情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customer != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.customer.removeOrder(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">        <span class="keyword">this</span>.customer.add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Curstomer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orders.remove(order);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orders.add(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，这里让 Curstomer 类来控制关联关系。有以下原则来决定哪个类来控制关联关系：如果某个对象是组成另一个对象的部件，那么由后者负责控制关联关系；如果是一对多关系，则由单一引用那一方来控制关联关系。</p><h2 id="8-将双向关联改为单向关联"><a href="#8-将双向关联改为单向关联" class="headerlink" title="8. 将双向关联改为单向关联"></a>8. 将双向关联改为单向关联</h2><blockquote><p>Change Bidirectional Association to Unidirectional</p></blockquote><p>和 Change Unidirectional Association to Bidirectiona 为反操作。</p><p>双向关联维护成本高，并且也不易于理解。大量的双向连接很容易造成“僵尸对象”：某个对象本身已经死亡了，却保留在系统中，因为它的引用还没有全部完全清除。</p><h2 id="9-以字面常量取代魔法数"><a href="#9-以字面常量取代魔法数" class="headerlink" title="9. 以字面常量取代魔法数"></a>9. 以字面常量取代魔法数</h2><blockquote><p>Replace Magic Number with Symbolic Constant</p></blockquote><p>创建一个常量，根据其意义为它命名，并将字面常量换为这个常量。</p><h2 id="10-封装字段"><a href="#10-封装字段" class="headerlink" title="10. 封装字段"></a>10. 封装字段</h2><blockquote><p>Encapsulate Field</p></blockquote><p>public 字段应当改为 private，并提供相应的访问函数。</p><h2 id="11-封装集合"><a href="#11-封装集合" class="headerlink" title="11. 封装集合"></a>11. 封装集合</h2><blockquote><p>Encapsulate Collection</p></blockquote><p>函数返回集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。如果函数返回集合自身，会让用户得以修改集合内容而集合拥有者却一无所知。</p><h2 id="12-以数据类取代记录"><a href="#12-以数据类取代记录" class="headerlink" title="12. 以数据类取代记录"></a>12. 以数据类取代记录</h2><blockquote><p>Replace Record with Data Class</p></blockquote><h2 id="13-以类取代类型码"><a href="#13-以类取代类型码" class="headerlink" title="13. 以类取代类型码"></a>13. 以类取代类型码</h2><blockquote><p>Replace Type Code with Class</p></blockquote><p>类中有一个数值类型码，但它并不影响类的行为，就用一个新类替换该数值类型码。如果类型码出现在 switch 语句中，需要使用 Replace Conditional with Polymorphism 去掉 switch，首先必须运用 Replace Type Code with Subcalss 或 Replace Type Code with State/Strategy 去掉类型码。</p><p><div align="center"> <img src="../pics/27c2e0b3-8f95-453d-bedc-6398a8566ce9.jpg" width="500"> </div><br></p><h2 id="14-以子类取代类型码"><a href="#14-以子类取代类型码" class="headerlink" title="14. 以子类取代类型码"></a>14. 以子类取代类型码</h2><blockquote><p>Replace Type Code with Subcalsses</p></blockquote><p>有一个不可变的类型码，它会影响类的行为，以子类取代这个类型码。</p><p><div align="center"> <img src="../pics/c41d3977-e0e7-4ee4-93e1-d84f1ae3e20e.jpg" width="500"> </div><br></p><h2 id="15-以-State-Strategy-取代类型码"><a href="#15-以-State-Strategy-取代类型码" class="headerlink" title="15. 以 State/Strategy 取代类型码"></a>15. 以 State/Strategy 取代类型码</h2><blockquote><p>Replace Type Code with State/Strategy</p></blockquote><p>有一个可变的类型码，它会影响类的行为，以状态对象取代类型码。</p><p>和 Replace Type Code with Subcalsses 的区别是 Replace Type Code with State/Strategy 的类型码是动态可变的，前者通过继承的方式来实现，后者通过组合的方式来实现。因为类型码可变，如果通过继承的方式，一旦一个对象的类型码改变，那么就要改变用新的对象来取代旧对象，而客户端难以改变新的对象。但是通过组合的方式，改变引用的状态类是很容易的。</p><p><div align="center"> <img src="../pics/81fd1d6f-a3b2-4160-9a0a-1f7cb50ba440.jpg" width="800"> </div><br></p><h2 id="16-以字段取代子类"><a href="#16-以字段取代子类" class="headerlink" title="16. 以字段取代子类"></a>16. 以字段取代子类</h2><blockquote><p>Replace Subclass with Fields</p></blockquote><p>各个子类的唯一差别只在“返回常量数据”的函数上。</p><p><div align="center"> <img src="../pics/f2e0cee9-ecdc-4a96-853f-d9f6a1ad6ad1.jpg" width="600"> </div><br></p><h1 id="八、简化条件表达式"><a href="#八、简化条件表达式" class="headerlink" title="八、简化条件表达式"></a>八、简化条件表达式</h1><h2 id="1-分解条件表达式"><a href="#1-分解条件表达式" class="headerlink" title="1. 分解条件表达式"></a>1. 分解条件表达式</h2><blockquote><p>Decompose Conditional</p></blockquote><p>对于一个复杂的条件语句，可以从 if、then、else 三个段落中分别提炼出独立函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.befor(SUMMER_START) || data.after(SUMMER_END))</span><br><span class="line">    charge = quantity * winterRate + winterServiceCharge;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    charge = quantity * summerRate;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (notSummer(date))</span><br><span class="line">    charge = winterCharge(quantity);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    charge = summerCharge(quantity);</span><br></pre></td></tr></table></figure><h2 id="2-合并条件表达式"><a href="#2-合并条件表达式" class="headerlink" title="2. 合并条件表达式"></a>2. 合并条件表达式</h2><blockquote><p>Consolidate Conditional Expression</p></blockquote><p>有一系列条件测试，都得到相同结果。</p><p>将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (seniority &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (monthsDisabled &gt; <span class="number">12</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isPartTime) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isNotEligibleForDisability()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-合并重复的条件片段"><a href="#3-合并重复的条件片段" class="headerlink" title="3. 合并重复的条件片段"></a>3. 合并重复的条件片段</h2><blockquote><p>Consolidate Duplicate Conditional Fragments</p></blockquote><p>在条件表达式的每个分支上有着相同的一段代码。</p><p>将这段重复代码搬移到条件表达式之外。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal()) &#123;</span><br><span class="line">    total = price * <span class="number">0.95</span>;</span><br><span class="line">    send();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    total = price * <span class="number">0.98</span>;</span><br><span class="line">    send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal()) &#123;</span><br><span class="line">    total = price * <span class="number">0.95</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    total = price * <span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br><span class="line">send();</span><br></pre></td></tr></table></figure><h2 id="4-移除控制标记"><a href="#4-移除控制标记" class="headerlink" title="4. 移除控制标记"></a>4. 移除控制标记</h2><blockquote><p>Remove Control Flag</p></blockquote><p>在一系列布尔表达式中，某个变量带有“控制标记”的作用。</p><p>用 break 语句或 return 语句来取代控制标记。</p><h2 id="5-以卫语句取代嵌套条件表达式"><a href="#5-以卫语句取代嵌套条件表达式" class="headerlink" title="5. 以卫语句取代嵌套条件表达式"></a>5. 以卫语句取代嵌套条件表达式</h2><blockquote><p>Replace Nested Conditional with Guard Clauses</p></blockquote><p>如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回，这样的单独检查常常被称为“卫语句”（guard clauses）。</p><p>条件表达式通常有两种表现形式。第一种形式是：所有分支都属于正常行为。第二种形式则是：条件表达式提供的答案中只有一种是正常行为，其他都是不常见的情况，可以使用卫语句表现所有特殊情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result;</span><br><span class="line">    <span class="keyword">if</span> (isDead) result = deadAmount();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSeparated) result = separatedAmount();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isRetired) result = retiredAmount();</span><br><span class="line">            <span class="keyword">else</span> result = normalPayAmount();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDead) <span class="keyword">return</span> deadAmount();</span><br><span class="line">    <span class="keyword">if</span> (isSeparated) <span class="keyword">return</span> separatedAmount();</span><br><span class="line">    <span class="keyword">if</span> (isRetired) <span class="keyword">return</span> retiredAmount();</span><br><span class="line">    <span class="keyword">return</span> normalPayAmount();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-以多态取代条件表达式"><a href="#6-以多态取代条件表达式" class="headerlink" title="6. 以多态取代条件表达式"></a>6. 以多态取代条件表达式</h2><blockquote><p>Replace Conditional with Polymorphism</p></blockquote><p>将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。需要先使用 Replace Type Code with Subclass 或 Replace Type Code with State/Strategy 来建立继承结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> EUROPEAN:</span><br><span class="line">            <span class="keyword">return</span> getBaseSpeed();</span><br><span class="line">        <span class="keyword">case</span> AFRICAN:</span><br><span class="line">            <span class="keyword">return</span> getBaseSpeed()- getLoadFactor()* numberOfCoconuts;</span><br><span class="line">        <span class="keyword">case</span> NORWEGIAN_BLUE:</span><br><span class="line">            <span class="keyword">return</span> isNailed ? <span class="number">0</span> : getBaseSpeed(voltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Should be unreachable"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div align="center"> <img src="../pics/1c8432c8-2552-457f-b117-1da36c697221.jpg" width="500"> </div><br></p><h2 id="7-引入-Null-对象"><a href="#7-引入-Null-对象" class="headerlink" title="7. 引入 Null 对象"></a>7. 引入 Null 对象</h2><blockquote><p>Introduce Null Object</p></blockquote><p>将 null 值替换为 null 对象。这样做的好处在于，不需要询问对象是否为空，直接调用就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (customer == <span class="keyword">null</span>) plan = BillingPlan.basic();</span><br><span class="line"><span class="keyword">else</span> plan = customer.getPlan();</span><br></pre></td></tr></table></figure><h2 id="8-引入断言"><a href="#8-引入断言" class="headerlink" title="8. 引入断言"></a>8. 引入断言</h2><blockquote><p>Introduce Assertion</p></blockquote><p>以断言明确表现某种假设。断言只能用于开发过程中，产品代码中不会有断言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getExpenseLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// should have either expense limit or a primary project</span></span><br><span class="line">    <span class="keyword">return</span> (expenseLimit != NULL_EXPENSE) ? expenseLimit :  primaryProject.getMemberExpenseLimit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getExpenseLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Assert.isTrue (expenseLimit != NULL_EXPENSE || primaryProject != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> (expenseLimit != NULL_EXPENSE) ? expenseLimit :  primaryProject.getMemberExpenseLimit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、简化函数调用"><a href="#九、简化函数调用" class="headerlink" title="九、简化函数调用"></a>九、简化函数调用</h1><h2 id="1-函数改名"><a href="#1-函数改名" class="headerlink" title="1. 函数改名"></a>1. 函数改名</h2><blockquote><p>Rename Method</p></blockquote><p>使函数名能解释函数的用途。</p><h2 id="2-添加参数"><a href="#2-添加参数" class="headerlink" title="2. 添加参数"></a>2. 添加参数</h2><blockquote><p>Add Parameter</p></blockquote><p>使函数不需要通过调用获得某个信息。</p><h2 id="3-移除参数"><a href="#3-移除参数" class="headerlink" title="3. 移除参数"></a>3. 移除参数</h2><blockquote><p>Remove Parameter</p></blockquote><p>与 Add Parameter 相反，改用调用的方式来获得某个信息。</p><h2 id="4-将查询函数和修改函数分离"><a href="#4-将查询函数和修改函数分离" class="headerlink" title="4. 将查询函数和修改函数分离"></a>4. 将查询函数和修改函数分离</h2><blockquote><p>Separate Query from Modifier</p></blockquote><p>某个函数即返回对象状态值，又修改对象状态。</p><p>应当建立两个不同的函数，其中一个负责查询，另一个负责修改。任何有返回值的函数，都不应该有看得到的副作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getTotalOutstandingAndSetReadyForSummaries();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getTotalOutstanding();</span><br><span class="line">setReadyForSummaries();</span><br></pre></td></tr></table></figure><h2 id="5-令函数携带参数"><a href="#5-令函数携带参数" class="headerlink" title="5. 令函数携带参数"></a>5. 令函数携带参数</h2><blockquote><p>Parameterize Method</p></blockquote><p>若干函数做了类似的工作，但在函数本体中却包含了不同的值。</p><p>建立单一函数，以参数表达那些不同的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fivePercentRaise();</span><br><span class="line">tenPercentRaise();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise(percentage);</span><br></pre></td></tr></table></figure><h2 id="6-以明确函数取代参数"><a href="#6-以明确函数取代参数" class="headerlink" title="6. 以明确函数取代参数"></a>6. 以明确函数取代参数</h2><blockquote><p>Replace Parameter with Explicit Methods</p></blockquote><p>有一个函数，完全取决于参数值而采取不同行为。</p><p>针对该参数的每一个可能值，建立一个独立函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"height"</span>))&#123;</span><br><span class="line">        height = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"width"</span>))&#123;</span><br><span class="line">        width = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Assert.shouldNeverReachHere();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line">    height = arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line">    width = arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-保持对象完整"><a href="#7-保持对象完整" class="headerlink" title="7. 保持对象完整"></a>7. 保持对象完整</h2><blockquote><p>Preserve Whole Object</p></blockquote><p>从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p><p>改为传递整个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> low = daysTempRange().getLow();</span><br><span class="line"><span class="keyword">int</span> high = daysTempRange().getHigh();</span><br><span class="line">withinPlan = plan.withinRange(low, high);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">withinPlan = plan.withinRange(daysTempRange());</span><br></pre></td></tr></table></figure><h2 id="8-以函数取代参数"><a href="#8-以函数取代参数" class="headerlink" title="8. 以函数取代参数"></a>8. 以函数取代参数</h2><blockquote><p>Replace Parameter with Methods</p></blockquote><p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。</p><p>让参数接收者去除该项参数，而是直接调用前一个函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> basePrice = _quantity * _itemPrice;</span><br><span class="line">discountLevel = getDiscountLevel();</span><br><span class="line"><span class="keyword">double</span> finalPrice = discountedPrice (basePrice, discountLevel);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> basePrice = _quantity * _itemPrice;</span><br><span class="line"><span class="keyword">double</span> finalPrice = discountedPrice (basePrice);</span><br></pre></td></tr></table></figure><h2 id="9-引入参数对象"><a href="#9-引入参数对象" class="headerlink" title="9. 引入参数对象"></a>9. 引入参数对象</h2><blockquote><p>Introduce Parameter Object</p></blockquote><p>某些参数总是很自然地同时出现，这些参数就是 Data Clumps。</p><p>以一个对象取代这些参数。</p><p><div align="center"> <img src="../pics/08738dd0-ae8e-404a-ba78-a6b1b7d225b3.jpg" width="600"> </div><br></p><h2 id="10-移除设值函数"><a href="#10-移除设值函数" class="headerlink" title="10. 移除设值函数"></a>10. 移除设值函数</h2><blockquote><p>Remove Setting Method</p></blockquote><p>类中的某个字段应该在对象创建时被设值，然后就不再改变。</p><p>去掉该字段的所有设值函数，并将该字段设为 final。</p><h2 id="11-隐藏函数"><a href="#11-隐藏函数" class="headerlink" title="11. 隐藏函数"></a>11. 隐藏函数</h2><blockquote><p>Hide Method</p></blockquote><p>有一个函数，从来没有被其他任何类用到。</p><p>将这个函数修改为 private。</p><h2 id="12-以工厂函数取代构造函数"><a href="#12-以工厂函数取代构造函数" class="headerlink" title="12. 以工厂函数取代构造函数"></a>12. 以工厂函数取代构造函数</h2><blockquote><p>Replace Constructor with Factory Method</p></blockquote><p>希望在创建对象时不仅仅是做简单的建构动作。</p><p>将构造函数替换为工厂函数。</p><h2 id="13-封装向下转型"><a href="#13-封装向下转型" class="headerlink" title="13. 封装向下转型"></a>13. 封装向下转型</h2><blockquote><p>Encapsulate Downcast</p></blockquote><p>某个函数返回的对象，需要由函数调用者执行向下转型（downcast）。</p><p>将向下转型动作移到函数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">lastReading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readings.lastElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Reading <span class="title">lastReading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Reading)readings.lastElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-以异常取代错误码"><a href="#14-以异常取代错误码" class="headerlink" title="14. 以异常取代错误码"></a>14. 以异常取代错误码</h2><blockquote><p>Replace Error Code with Exception</p></blockquote><p>某个函数返回一个特定的代码，用以表示某种错误情况。</p><p>改用异常，异常将普通程序和错误处理分开，使代码更容易理解。</p><h2 id="15-以测试取代异常"><a href="#15-以测试取代异常" class="headerlink" title="15. 以测试取代异常"></a>15. 以测试取代异常</h2><blockquote><p>Replace Exception with Test</p></blockquote><p>面对一个调用者可以预先检查的条件，你抛出了一个异常。</p><p>修改调用者，使它在调用函数之前先做检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getValueForPeriod</span><span class="params">(<span class="keyword">int</span> periodNumber)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> values[periodNumber];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getValueForPeriod</span><span class="params">(<span class="keyword">int</span> periodNumber)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (periodNumber &gt;= values.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> values[periodNumber];</span><br></pre></td></tr></table></figure><h1 id="十、处理概括关系"><a href="#十、处理概括关系" class="headerlink" title="十、处理概括关系"></a>十、处理概括关系</h1><h2 id="1-字段上移"><a href="#1-字段上移" class="headerlink" title="1. 字段上移"></a>1. 字段上移</h2><blockquote><p>Pull Up Field</p></blockquote><p>两个子类拥有相同的字段。</p><p>将该字段移至超类。</p><h2 id="2-函数上移"><a href="#2-函数上移" class="headerlink" title="2. 函数上移"></a>2. 函数上移</h2><blockquote><p>Pull Up Method</p></blockquote><p>有些函数，在各个子类中产生完全相同的结果。</p><p>将该函数移至超类。</p><h2 id="3-构造函数本体上移"><a href="#3-构造函数本体上移" class="headerlink" title="3. 构造函数本体上移"></a>3. 构造函数本体上移</h2><blockquote><p>Pull Up Constructor Body</p></blockquote><p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。</p><p>在超类中新建一个构造函数，并在子类构造函数中调用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span>...</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Manager</span>(<span class="title">String</span> <span class="title">name</span>, <span class="title">String</span> <span class="title">id</span>, <span class="title">int</span> <span class="title">grade</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, String id, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, id);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-函数下移"><a href="#4-函数下移" class="headerlink" title="4. 函数下移"></a>4. 函数下移</h2><blockquote><p>Push Down Method</p></blockquote><p>超类中的某个函数只与部分子类有关。</p><p>将这个函数移到相关的那些子类去。</p><h2 id="5-字段下移"><a href="#5-字段下移" class="headerlink" title="5. 字段下移"></a>5. 字段下移</h2><blockquote><p>Push Down Field</p></blockquote><p>超类中的某个字段只被部分子类用到。</p><p>将这个字段移到需要它的那些子类去。</p><h2 id="6-提炼子类"><a href="#6-提炼子类" class="headerlink" title="6. 提炼子类"></a>6. 提炼子类</h2><blockquote><p>Extract Subclass</p></blockquote><p>类中的某些特性只被某些实例用到。</p><p>新建一个子类，将上面所说的那一部分特性移到子类中。</p><h2 id="7-提炼超类"><a href="#7-提炼超类" class="headerlink" title="7. 提炼超类"></a>7. 提炼超类</h2><blockquote><p>Extract Superclass</p></blockquote><p>两个类有相似特性。</p><p>为这两个类建立一个超类，将相同特性移至超类。</p><h2 id="8-提炼接口"><a href="#8-提炼接口" class="headerlink" title="8. 提炼接口"></a>8. 提炼接口</h2><blockquote><p>Extract Interface</p></blockquote><p>若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。</p><p>将相同的子集提炼到一个独立接口中。</p><h2 id="9-折叠继承体系"><a href="#9-折叠继承体系" class="headerlink" title="9. 折叠继承体系"></a>9. 折叠继承体系</h2><blockquote><p>Collapse Hierarchy</p></blockquote><p>超类和子类之间无太大区别。</p><p>将它们合为一体。</p><h2 id="10-塑造模板函数"><a href="#10-塑造模板函数" class="headerlink" title="10. 塑造模板函数"></a>10. 塑造模板函数</h2><blockquote><p>Form Template Method</p></blockquote><p>你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。</p><p>将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类。(模板方法模式)</p><h2 id="11-以委托取代继承"><a href="#11-以委托取代继承" class="headerlink" title="11. 以委托取代继承"></a>11. 以委托取代继承</h2><blockquote><p>Replace Inheritance with Delegation</p></blockquote><p>某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。</p><p>在子类中新建一个字段用以保存超类，调整子类函数，令它改而委托超类，然后去掉两者之间的继承关系。</p><h2 id="12-以继承取代委托"><a href="#12-以继承取代委托" class="headerlink" title="12. 以继承取代委托"></a>12. 以继承取代委托</h2><blockquote><p>Replace Delegation with Inheritance</p></blockquote><p>你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。</p><p>让委托类继承受托类。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>MartinFowler, 福勒, 贝克, 等. 重构: 改善既有代码的设计 [M]. 电子工业出版社, 2011.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一第一个案例&quot;&gt;一、第一个案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#二重构原则&quot;&gt;二、重构原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#定义&quot;&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Github" scheme="https://airpoet.github.io/categories/Github/"/>
    
      <category term="Interview-Notebook" scheme="https://airpoet.github.io/categories/Github/Interview-Notebook/"/>
    
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
      <category term="转载" scheme="https://airpoet.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
