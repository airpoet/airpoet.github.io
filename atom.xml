<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.P的文艺杂谈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://airpoet.github.io/"/>
  <updated>2018-05-28T02:34:32.058Z</updated>
  <id>https://airpoet.github.io/</id>
  
  <author>
    <name>airpoet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux学习笔记-4</title>
    <link href="https://airpoet.github.io/2018/05/28/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
    <id>https://airpoet.github.io/2018/05/28/Linux/Linux学习笔记-4/</id>
    <published>2018-05-27T23:20:32.044Z</published>
    <updated>2018-05-28T02:34:32.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Linux-shell简介"><a href="#1、Linux-shell简介" class="headerlink" title="1、Linux shell简介"></a>1、Linux shell简介</h1><h2 id="1-1、Shell概述"><a href="#1-1、Shell概述" class="headerlink" title="1.1、Shell概述"></a>1.1、Shell概述</h2><p>Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。</p><p>Shell既是一种命令语言，又是一种程序设计语言：</p><p><strong>作为命令语言</strong>，它交互式地解释和执行用户输入的命令；</p><p><strong>作为程序设计语言</strong>，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p><p>Shell它虽然不是Unix/Linux系统内核的一部分，但它调用了系统核心的大部分功能来执行程序、建立文件并以并行的方式协调各个程序的运行。Shell是用户与内核进行交互操作的一种接口，目前最流行的Shell称为bash Shell（Bourne Again Shell）</p><p><strong>Shell是一门编程语言(解释型的编程语言)</strong>，即shell脚本(就是在用linux的shell命令编程)，Shell脚本程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行</p><p>Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本</p><p><strong>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等</strong>，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器，可以通过<strong>cat /etc/shells</strong>命令查看系统中安装的shell，不同的shell可能支持的命令语法是不相同的</p><p><strong>sh是Unix 标准默认的shell</strong>，由Steve Bourne开发，是Bourne Shell的缩写。</p><p><strong>bash是Linux标准默认的shell</strong>，本教程也基于bash讲解。bash由Brian Fox和Chet Ramey共同完成，是Bourne Again Shell的缩写。</p><p>Shell本身支持的命令并不多，内部命令一共有40个，但是它可以调用其他的程序，每个程序就是一个命令，这使得Shell命令的数量可以无限扩展，其结果就是Shell的功能非常强大，完全能够胜任Linux的日常管理工作，如文本或字符串检索、文件的查找或创建、大规模软件的自动部署、更改系统设置、监控服务器性能、发送报警邮件、抓取网页内容、压缩文件等。</p><h2 id="1-2、Shell基本格式"><a href="#1-2、Shell基本格式" class="headerlink" title="1.2、Shell基本格式"></a>1.2、Shell基本格式</h2><p>代码写在普通文本文件中，通常以.sh结尾，虽然不是强制要求，但希望大家最好这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi helloworld.sh</span><br><span class="line">--------------------------</span><br><span class="line"><span class="meta">#!/bin/bash        </span></span><br><span class="line"><span class="comment">## 表示用哪一种shell解析器来解析执行我们的这个脚本程序，这句话只对自执行有效，对于使用sh helloworld.sh无效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span>     <span class="comment">## 注释也可以写在这里</span></span><br></pre></td></tr></table></figure><p>在这里，我们就写好了一个shell脚本，第一行是固定需要的，表明用哪一种shell解析器来执行我们的这个脚本程序。本质上，shell脚本里面的代码都是就是一些<strong>流程控制语句</strong>加一些<strong>特殊语法</strong>再加<strong>shell**</strong>命令**组成。其中，我们可以当做每一个命令就是shell编程当中的关键字。 </p><h2 id="1-3、Shell执行方式"><a href="#1-3、Shell执行方式" class="headerlink" title="1.3、Shell执行方式"></a>1.3、Shell执行方式</h2><p><strong>1</strong> <strong>、sh</strong> <strong>方式或者bash</strong> <strong>方式</strong></p><blockquote><p><strong>sh helloworld.sh</strong>    </p><p><strong>bash helloworld.sh</strong>   ## 直接指定用系统默认的bash shell解释执行</p></blockquote><p><strong>2</strong> <strong>、source</strong> <strong>方式或者.</strong> <strong>方式</strong></p><p><strong>source命令也称为“点命令”</strong>，也就是一个点符号（.）,是bash的内部命令。</p><p>功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句</p><p><strong>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</strong>。</p><p>用法：</p><blockquote><p><strong>.  helloworld.sh</strong> </p><p><strong>source helloworld.sh</strong>   </p></blockquote><p><strong>3</strong> <strong>、直接执行该脚本文件</strong></p><p>可以有两种方式，不过这两种方式的执行，都需要该文件有执行权限</p><p>所以在执行之前，我们要更改他的执行权限</p><blockquote><p>1、  切换到该文件所在的路径然后执行命令：</p><p> <strong>./helloworld.sh</strong></p><p>2、  直接以绝对路径方式执行</p><p> <strong>/home/linux/hellworld.sh</strong></p></blockquote><h2 id="1-4、Shell注释"><a href="#1-4、Shell注释" class="headerlink" title="1.4、Shell注释"></a>1.4、Shell注释</h2><p><strong>单行注释</strong>：Shell脚本中以#开头的代码就是注释  <code># xxx</code></p><p><strong>多行注释</strong>：Shell脚本中也可以使用多行注释：<code>:&lt;&lt;! xxx !</code></p><h1 id="2、Shell基本语法"><a href="#2、Shell基本语法" class="headerlink" title="2、Shell基本语法"></a>2、Shell基本语法</h1><h2 id="2-1、变量"><a href="#2-1、变量" class="headerlink" title="2.1、变量"></a>2.1、变量</h2><h3 id="2-1-1、系统变量"><a href="#2-1-1、系统变量" class="headerlink" title="2.1.1、系统变量"></a>2.1.1、系统变量</h3><p>Linux Shell中的变量分为“系统变量”和“用户自定义变量”</p><p>系统变量可以通过set命令查看，用户环境变量可以通过env查看：</p><blockquote><p>常用系统变量：\$PWD   \$SHELL     \$USER     $HOME </p></blockquote><h3 id="2-1-2、自定义变量"><a href="#2-1-2、自定义变量" class="headerlink" title="2.1.2、自定义变量"></a>2.1.2、自定义变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.注意, 变量中间不能有空格</span></span><br><span class="line">A=123 </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.变量中间有空格的话要加引号</span></span><br><span class="line">- 双引号中间可以引用变量</span><br><span class="line">   a=zs</span><br><span class="line">        b=<span class="string">"this is <span class="variable">$a</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">        this is zs</span><br><span class="line">- 单引号引用变量会原样输出</span><br><span class="line">        b=<span class="string">'this is $a'</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">        this is <span class="variable">$a</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 3. 要在变量后直接连接字符, 要用&#123;&#125;把变量括起来</span></span><br><span class="line"><span class="variable">$&#123;变量名&#125;</span>其它字符  </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;A&#125;</span>ddd</span><br><span class="line">    helloddd</span><br></pre></td></tr></table></figure><h3 id="2-1-3、变量高级用法"><a href="#2-1-3、变量高级用法" class="headerlink" title="2.1.3、变量高级用法"></a>2.1.3、变量高级用法</h3><blockquote><ol><li><p>撤销变量：unset ABC</p></li><li><p>声明静态变量：readonly ABC= ‘abc’     特点是这种变量是只读的，不能unset</p></li><li><p>在一个 .sh 中. 以绝对路径的形式调另一个 .sh</p><ol><li><p>使用export关键字</p><p><strong>export</strong> <strong>A=”A in a.sh”</strong></p><p><strong>意味着把变量提升为当前shell</strong> <strong>进程中的全局环境变量，可供其他子shell</strong> <strong>程序使用，</strong></p><p><strong>A</strong> <strong>变量就成了a.sh</strong> <strong>脚本所在bash</strong> <strong>进程的全局变量，该进程的所有子进程都能访问到变量A</strong></p></li><li><p>通过 <strong>. /root/bin/b.sh</strong> 或  <strong>source /root/bin/b.sh</strong> 来调用</p></li></ol></li><li><p><strong>总结：</strong>        </p><ol><li><strong>a.sh中直接调用b.sh，会让b.sh在A所在的bash进程的“子进程”空间中执行</strong> </li><li><strong>而子进程空间只能访问父进程中用export定义的变量</strong> </li><li><strong>一个shell进程无法将自己定义的变量提升到父进程空间中去</strong> </li><li><strong>source或者“.”号执行脚本时，会让脚本在调用者所在的shell进程空间中执行</strong> </li></ol></li></ol></blockquote><h3 id="2-1-4、反引号赋值"><a href="#2-1-4、反引号赋值" class="headerlink" title="2.1.4、反引号赋值"></a>2.1.4、反引号赋值</h3><blockquote><p><strong>a=`ls -l /root/bin`</strong>  ##反引号，运行里面的命令，并把结果返回给变量a</p><p>另外一种写法： <strong>a=$(ls -l /root/bin)</strong></p></blockquote><h3 id="2-1-5、变量有用技巧"><a href="#2-1-5、变量有用技巧" class="headerlink" title="2.1.5、变量有用技巧"></a>2.1.5、变量有用技巧</h3><table><thead><tr><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>${var}</td><td>变量本来的值</td></tr><tr><td>${var:-word}</td><td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值</td></tr><tr><td>${var:+word}</td><td>如果变量 var 被定义，那么返回word，但不改变 var 的值</td></tr><tr><td>${var:=word}</td><td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word</td></tr><tr><td>${var:?message}</td><td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量   var 是否可以被正常赋值。   若此替换出现在Shell脚本中，那么脚本将停止运行</td></tr></tbody></table><h3 id="2-1-6特殊变量"><a href="#2-1-6特殊变量" class="headerlink" title="2.1.6特殊变量"></a>2.1.6特殊变量</h3><blockquote><p><strong>$?</strong>  <strong>表示上一个命令退出的状态码</strong></p><p><strong>$$</strong>  <strong>表示当前进程编号</strong></p><p><strong>$0</strong> <strong>表示当前脚本名称</strong></p><p><strong>$n</strong> <strong>表示n</strong> <strong>位置的输入参数（n**</strong>代表数字，n&gt;=1<strong> </strong>）**</p><p><strong>$#</strong> <strong>表示参数的个数，常用于循环</strong></p><p><strong>$*</strong>  <strong>和$@ 都表示参数列表</strong> </p></blockquote><p><strong>注意：$*与$@区别</strong> </p><ol><li><p><strong>$*</strong> 和 <strong>$@</strong> 都表示传递给函数或脚本的所有参数** </p></li><li><p><strong>不被双引号” “包含时</strong> </p><p><strong>$*</strong> 和 <strong>$@</strong> 都以\$1 \$2 … \$n 的形式组成参数列表    </p></li><li><p><strong>当它们被双引号”  “包含时</strong></p><ul><li><strong>“$*“ 会将所有的参数作为一个整体，以”\$1 \$2 … \$n”的形式组成一个整串；</strong></li><li><strong>$*</strong> <strong>会将各个参数分开，以”\$1” “\$2” … “\$n” 的形式组成一个参数列表</strong></li></ul></li></ol><h3 id="2-1-7-变量的其他注意点"><a href="#2-1-7-变量的其他注意点" class="headerlink" title="2.1.7 变量的其他注意点"></a>2.1.7 变量的其他注意点</h3><ol><li><p><strong>使用变量</strong></p><p>使用一个定义过的变量, 只需要在变量名前面加 $ 符号</p><p>如果变量后面直接跟上了字符串, 就必须要加花括号</p><p><strong>推荐给所有变量加上花括号, 这个是好的编程习惯</strong></p><p>已定义的<strong>非只读</strong>变量, 可以被重新定义</p></li></ol><h2 id="2-2、运算符"><a href="#2-2、运算符" class="headerlink" title="2.2、运算符"></a>2.2、运算符</h2><h3 id="2-2-1、算数运算符"><a href="#2-2-1、算数运算符" class="headerlink" title="2.2.1、算数运算符"></a>2.2.1、算数运算符</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、Linux-shell简介&quot;&gt;&lt;a href=&quot;#1、Linux-shell简介&quot; class=&quot;headerlink&quot; title=&quot;1、Linux shell简介&quot;&gt;&lt;/a&gt;1、Linux shell简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、Shell概述&quot;&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-2</title>
    <link href="https://airpoet.github.io/2018/05/27/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://airpoet.github.io/2018/05/27/Linux/Linux学习笔记-2/</id>
    <published>2018-05-27T12:14:48.193Z</published>
    <updated>2018-05-27T17:32:47.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-VI文本编辑器"><a href="#1-VI文本编辑器" class="headerlink" title="1.. VI文本编辑器"></a>1.. VI文本编辑器</h1><p>学会使用vi编辑器是学习Linux系统的必备技术之一，因为一般的Linux服务器是没有GUI界面的，Linux运维及开发人员基本上都是通过命令行的方式进行文本编辑或程序编写的。vi编辑器是Linux内置的文本编辑器，几乎所有的类unix系统中都内置了vi编辑器，而其它编辑器则不一定，另外很多软件会调用vi编辑进行内容编写，例如crontab定时任务。较之于其它编辑器或GUI编辑器，vi编辑速度是最快的。VIM是它的增强版本，VI有三种基本工作模式，分别是：</p><p><strong>命令模式</strong>（command mode）、或者叫一般模式</p><p><strong>插入模式</strong>（insert mode）、或者叫编辑模式</p><p><strong>底行模式</strong>（last line mode）、或者叫命令行模式</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-124220.jpg" alt=""></p><h3 id="1-最基本用法"><a href="#1-最基本用法" class="headerlink" title="1. 最基本用法"></a>1. 最基本用法</h3><table><thead><tr><th>1、首先会进入“<strong>一般模式</strong>”，此模式只接受各种命令快捷键，不能编辑文件内容</th></tr></thead><tbody><tr><td>2、按<strong>i</strong>键，就会从一般模式进入编辑模式，此模式下，敲入的都是文件内容</td></tr><tr><td>3、编辑完成之后，按<strong>Esc</strong>键退出编辑模式，回到一般模式</td></tr><tr><td>4、再按<strong>：</strong>，进入“底行命令模式”，输入<strong>wq</strong>命令，回车即可保存退出</td></tr></tbody></table><h3 id="2-移动光标-一般模式"><a href="#2-移动光标-一般模式" class="headerlink" title="2. 移动光标 (一般模式)"></a>2. <strong>移动光标</strong> (一般模式)</h3><table><thead><tr><th style="text-align:left">1、       使用上下左右键可以移动光标</th></tr></thead><tbody><tr><td style="text-align:left">2、       使用<strong>h,j,k,l</strong>，依次是向<strong>左，下，上，右</strong>移动</td></tr><tr><td style="text-align:left">3、       <strong>w</strong>：将光标移动到<strong>下一个单词的首字母</strong>处</td></tr><tr><td style="text-align:left">4、       W：利用空格向后移动光标，就是忽略标点</td></tr><tr><td style="text-align:left">5、       <strong>b</strong>：利用word包括标点<strong>向前移动光标</strong>, 与<strong>w</strong>相对应</td></tr><tr><td style="text-align:left">6、       B：利用空格向前移动光标，忽略标点</td></tr><tr><td style="text-align:left">7、       e：将光标移动到下一个word的尾部，包括符号</td></tr><tr><td style="text-align:left">8、       E: 将光标移动到下一个空格分隔字的尾部</td></tr><tr><td style="text-align:left">9、       <strong>(</strong>：移动到<strong>句子开始</strong></td></tr><tr><td style="text-align:left">10、     <strong>)</strong>：移动到<strong>句子结束</strong></td></tr><tr><td style="text-align:left">11、     <strong>0</strong>：移动光标到<strong>本句句首</strong></td></tr><tr><td style="text-align:left">12、    <strong>$</strong>：移动光标到<strong>本行行尾</strong></td></tr><tr><td style="text-align:left">13、    <strong>{</strong>：移动到段落开始</td></tr><tr><td style="text-align:left">14、    <strong>}</strong>：移动到段落结束</td></tr><tr><td style="text-align:left">15、    H：屏幕顶端</td></tr><tr><td style="text-align:left">16、    L：屏幕底端</td></tr><tr><td style="text-align:left">17、    M：移动到屏幕中央位置</td></tr><tr><td style="text-align:left">18、    <strong>gg</strong>：直接跳到文件的<strong>首行行首</strong></td></tr><tr><td style="text-align:left">19、    <strong>G</strong>：直接跳到文件的<strong>末行行首</strong></td></tr><tr><td style="text-align:left">20、    最强光标移动：   <strong>%</strong> : <strong>匹配括号移动</strong>，包括(, {, [.（你需要把光标先移到括号上）   <strong>*</strong>: <strong>匹配光标当前所在的单词</strong>，移动光标到<strong>下一个</strong>匹配单词   <strong>#</strong>: <strong>匹配光标当前所在的单词</strong>，移动光标到<strong>上一个</strong>匹配单词</td></tr></tbody></table><blockquote><p><strong><em>重点总结</em></strong>: </p><ol><li><code>h l</code> : 左右,             <code>j k</code> : 下上.</li><li><code>w</code>: 下一个单词 ,      <code>b</code>: 上一个单词.</li><li><code>0</code>: 本行行首,           <code>$</code>: 本行行尾</li><li><code>(</code>: 句子开始,           <code>)</code>: 句子结束</li><li><code>{</code>: 段落开始            <code>}</code>: 段落结束</li><li><code>gg</code>: 文件行首          <code>G</code>: 文件行尾</li><li><code>%</code>: 下一个括号         <code>*</code>: 下一个单词      <code>#</code>: 上一个单词</li></ol></blockquote><h3 id="3-常用操作-一般模式-gt-gt-插入模式"><a href="#3-常用操作-一般模式-gt-gt-插入模式" class="headerlink" title="3. 常用操作(一般模式 &gt;&gt; 插入模式)"></a>3. 常用操作(一般模式 &gt;&gt; 插入模式)</h3><table><thead><tr><th>单位</th><th>指令1</th><th>指令2</th></tr></thead><tbody><tr><td>当前位  <u>前一位/后一位</u></td><td><code>i</code>:  在光标前一位开始插入</td><td><code>a</code>: 光标后一位开始插入</td></tr><tr><td>当前行  <u>最前/最后</u></td><td><code>I</code>:  在该行的最前面插入</td><td><code>A</code>: 在该行的最后插入</td></tr><tr><td>当前行  <u>上一行/下一行</u></td><td><code>o</code>: 小o, 当前行的下一行插入空行</td><td><code>O</code>: 大o, 当前内容下移一行, 当前行插入空行</td></tr><tr><td>当前行   <del>删除</del></td><td><code>dd</code>:  删除当前行</td><td><code>3dd</code>: ndd, 删除从当前行开始的 n行</td></tr><tr><td>当前行   复制</td><td><code>yy</code>: 复制光标所在行</td><td><code>3yy</code>: 复制从当前行开始的3行</td></tr><tr><td>粘贴</td><td><code>p</code>: 粘贴到光标所在行的下一行</td><td></td></tr><tr><td><strong>撤销</strong></td><td><code>u</code>: undo  撤销操作, 可一直撤销到最前面</td></tr></tbody></table><p><strong><em>重点总结</em></strong>: </p><blockquote><ol><li><code>i</code> :  当前光标前开始插入;      <code>a</code>: 光标后一位开始插入</li><li><code>I</code>:  在该行的最前面插入;       <code>A</code>: 在该行的最后插入</li><li><code>o</code>: 小o, 当前行的下一行插入空行    <code>O</code>: 大o, 当前内容下移一行, 当前行插入空行</li><li><code>dd</code>:  删除当前行                      <code>3dd</code>: ndd, 删除从当前行开始的 n行</li><li><code>yy</code>: 复制光标所在行                <code>3yy</code>: 复制从当前行开始的3行</li><li><code>p</code>: 粘贴到光标所在行的下一行</li><li><code>u</code>: undo  撤销操作, 可一直撤销到最前面</li></ol></blockquote><h3 id="4-查找并替换"><a href="#4-查找并替换" class="headerlink" title="4. 查找并替换"></a>4. 查找并替换</h3><blockquote><p>在底行命令模式中输入</p></blockquote><table><thead><tr><th style="text-align:left">1. 显示行号   <strong>:set  nu</strong></th></tr></thead><tbody><tr><td style="text-align:left">2. <strong>隐藏行号</strong>   <strong>:set  nonu</strong></td></tr><tr><td style="text-align:left">3 .<strong>查找关键字</strong>   <strong>:/you</strong>       ## 效果：查找文件中出现的you，并定位到第一个找到的地方，按 <strong>n</strong>可以定位到下一个匹配位置（按<strong>N</strong>定位到上一个）   查询的时候被匹配上的字符串会被高亮，可以在命令模式下使用<strong>:noh</strong>取消高亮</td></tr><tr><td style="text-align:left">4. <strong>直接跳转到</strong> 3行  <strong>: 3</strong></td></tr></tbody></table><h3 id="5-替换操作"><a href="#5-替换操作" class="headerlink" title="5. 替换操作"></a>5. <strong>替换操作</strong></h3><table><thead><tr><th style="text-align:left"><code>:1 s/sad/bbb</code>      将第一行的第一个sad替换为bbb</th></tr></thead><tbody><tr><td style="text-align:left"><code>:1,5 s/sad/bbb</code>     将第一行到第五行的第一个sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:1,. s/sad/bbb</code>     将第一行到光标行的第一个sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:.,$ s/sad/bbb</code>     将光标行到缓冲区最后一行的sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:s/sad/bbb</code>       查找光标所在行的第一个sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:s/sad/bbb/g</code>     查找光标所在行的所有sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:%s/sad/bbb</code>     查找文件中所有行第一次出现的sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:%s/sad/bbb/g</code>   查找文件中所有的sad，替换为bbb</td></tr></tbody></table><h3 id="6-屏幕翻滚类命令"><a href="#6-屏幕翻滚类命令" class="headerlink" title="6. 屏幕翻滚类命令"></a>6. 屏幕翻滚类命令</h3><table><thead><tr><th>Ctrl + u：向文件首翻半屏</th></tr></thead><tbody><tr><td>Ctrl + d：向文件尾翻半屏</td></tr><tr><td>Ctrl + f：向文件尾翻一屏</td></tr><tr><td>Ctrl＋b：向文件首翻一屏</td></tr><tr><td>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部</td></tr></tbody></table><h3 id="7-其它的小技巧"><a href="#7-其它的小技巧" class="headerlink" title="7. 其它的小技巧"></a>7. 其它的小技巧</h3><table><thead><tr><th>r         替换光标处一个字符</th></tr></thead><tbody><tr><td>R         进入替换模式，从光标处连续替换</td></tr><tr><td>s         删除当前字符，进入插入模式</td></tr><tr><td>S         删除当前行，进入插入模式   ≈  dd, dd也会删除当前行, 但是不会进入插入模式</td></tr><tr><td>f  s      光标行内向后查找第一个出现的字符s    (<strong>先输f , 再输 s,  向后找 s</strong>)</td></tr><tr><td>F  s      光标行内向前查找第一个出现的字符s   (<strong>先输F , 再输 s,  向前找 s</strong>)</td></tr><tr><td>~         大小写转换，只转换光标处字符</td></tr></tbody></table><h3 id="8-速查网址"><a href="#8-速查网址" class="headerlink" title="8. 速查网址"></a>8. 速查网址</h3><ul><li><a href="https://www.ctolib.com/cheatsheets-Vim-command.html" target="_blank" rel="noopener">vim详解</a></li></ul><hr><h1 id="2-网络管理"><a href="#2-网络管理" class="headerlink" title="2.. 网络管理"></a>2.. 网络管理</h1><h3 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a><code>ifconfig</code>命令</h3><p>ifconfig命令主要用于配置网络接口，如果不加任何参数，则ifconfig命令用于查看当前所有活动网络接口的状态信息，如下图：</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-141519.png" alt="image-20180527221518692"></p><p><strong>eth0</strong> 表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是<code>00:0C:29:D6:C7:0E</code>。</p><p><strong>inet addr</strong> 用来表示网卡的IP地址，此网卡的IP地址是<code>192.168.179.6</code>，广播地址<code>192.168.170.255</code>，掩码地址<code>Mask:255.255.255.0</code>。</p><p><strong>lo</strong>  是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把  httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p><p><strong>ifconfig其他常用使用</strong></p><table><thead><tr><th>-a         显示所有网络接口，包括停用的</th></tr></thead><tbody><tr><td>-s         短格式显示网络信息，同netstat   -i</td></tr><tr><td>-v         显示详细信息，在网络出错的情况下适用</td></tr><tr><td>interface    指定网络接口</td></tr><tr><td>up         启用网络接口</td></tr><tr><td>down      关闭网络接口</td></tr></tbody></table><p><strong>启动关闭指定网卡&amp; 常用操作：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 up   <span class="comment">#启动网卡</span></span><br><span class="line">ifconfig eth0 down <span class="comment">#关闭网卡</span></span><br><span class="line">ifconfig   <span class="comment">#处于激活状态的网络接口</span></span><br><span class="line">ifconfig -a  <span class="comment">#所有配置的网络接口，不论其是否激活</span></span><br><span class="line">ifconfig eth0  <span class="comment">#显示eth0的网卡信息</span></span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-三种通信模式"><a href="#1-三种通信模式" class="headerlink" title="1. 三种通信模式"></a>1. 三种通信模式</h4><p><strong>Vmware中的虚拟机和宿主机进行通信有三种网络方式</strong>，它们分别是：</p><p><strong>Bridged</strong> <strong>（桥接模式）</strong></p><p><strong>NAT</strong> <strong>（网络地址转换模式）</strong></p><p><strong>Host-Only</strong> <strong>（仅主机模式）</strong></p><ol><li><p><strong>Bridged</strong> <strong>（桥接模式）</strong></p><p>桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致</p></li><li><p><strong>Host-Only</strong> <strong>（仅主机模式）宿主</strong></p><p>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是 Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p></li><li><p><strong>NAT</strong>   <strong>模式</strong></p><p>使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-142820.png" alt=""></p></li></ol><h4 id="2-NAT网络模式的配置"><a href="#2-NAT网络模式的配置" class="headerlink" title="2. NAT网络模式的配置"></a><strong>2. NAT网络模式的配置</strong></h4><p><a href="https://airpoet.github.io/2018/05/25/Linux/Linux学习笔记-3/">见Linux学习笔记3, 第8条: Linux虚拟主机集群测试环境基本搭建</a></p><h4 id="3-其它的常用网络管理命令"><a href="#3-其它的常用网络管理命令" class="headerlink" title="3.  其它的常用网络管理命令"></a>3.  其它的常用网络管理命令</h4><ol><li><p><strong>ping</strong>命令:   常用来测试网络连接是否正常</p><blockquote><p>先确定能ping通 <code>ping www.baidu.com</code></p></blockquote></li><li><p><strong>host</strong>命令:   host命令用来进行DNS查询</p><blockquote><p>然后用host命令可以查看到 <code>host www.baidu.com</code></p><p>然后通过浏览器访问该地址：<code>119.75.213.61</code></p></blockquote></li><li><p><strong>netstat</strong>命令:   netstat命令可以显示网络接口的很多统计信息，包括打开的socket和路由表</p><p>以下是常用命令选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a (all)显示所有选项，默认不显示LISTEN相关</span><br><span class="line"></span><br><span class="line">-t (tcp)仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化成数字</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服務状态</span><br><span class="line"></span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line">-r 显示路由信息，路由表</span><br><span class="line">-e 显示扩展信息，例如uid等</span><br><span class="line">-s 按各个协议进行统计</span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><p>1、列出所有端口，包括监听和未监听的：netstat -a</p><p>2、列出所有TCP端口：netstat -at</p><p>3、列出所有UDP端口：netstat -au</p><p>4、<strong>列出所有监听状态的TCP端口：该命令最重要用来查看哪个程序占用了哪个网络端口号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如查看谁占用了 tcp 的80 端口</span></span><br><span class="line">netstat -nltp | grep 80                                            [23:04:54]</span><br><span class="line">tcp        0      0 :::80                       :::*                        LISTEN      3890/httpd</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-防火墙"><a href="#4-防火墙" class="headerlink" title="4. 防火墙"></a>4. 防火墙</h4><p>防火墙根据配置文件/etc/sysconfig/iptables来控制本机的“出、入”网络访问行为</p><p>其对行为的配置策略有四个策略表</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-150724.png" alt=""></p><ol><li><p><strong>基础必备技能</strong> </p><p>| 查看防火墙状态         | service iptables status    |<br>| ———————- | ————————– |<br>| 开启防火墙             | service iptables start     |<br>| 关闭防火墙             | service iptables stop      |<br>| <strong>关闭防火墙开机自启</strong> | <strong>chkconfig iptables off</strong> |<br>| 设置防火墙开机自启     | chkconfig iptables on      |</p></li><li><p>扩展知识 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、列出iptables规则</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="comment"># 列出iptables规则并显示规则编号</span></span><br><span class="line">iptables -L -n --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、列出iptables nat表规则（默认是filter表）</span></span><br><span class="line">iptables -L -n -t nat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、清除默认规则（注意默认是filter表，如果对nat表操作要加-t nat）</span></span><br><span class="line"><span class="comment">#清除所有规则</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启iptables发现规则依然存在，因为没有保存</span></span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存配置</span></span><br><span class="line">service iptables save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、禁止SSH登陆（如果服务器在机房，一定要小心）</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、删除规则</span></span><br><span class="line">iptables -D INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、加入一条INPUT规则开放80端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-Linux系统启动级别管理"><a href="#3-Linux系统启动级别管理" class="headerlink" title="3. Linux系统启动级别管理"></a>3. Linux系统启动级别管理</h1><p>使用runlevel命令可以查看系统运行的级别 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runlevel                                                           [23:12:37]</span><br><span class="line">N 3</span><br></pre></td></tr></table></figure><p>修改系统默认启动级别 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  启动级别在这个路径查看</span></span><br><span class="line">vi /etc/inittab</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="comment">#   0 - halt (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#   1 - Single user mode</span></span><br><span class="line"><span class="comment">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span></span><br><span class="line"><span class="comment">#   3 - Full multiuser mode</span></span><br><span class="line"><span class="comment">#   4 - unused</span></span><br><span class="line"><span class="comment">#   5 - X11</span></span><br><span class="line"><span class="comment">#   6 - reboot (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">id:3:initdefault:</span><br></pre></td></tr></table></figure><blockquote><p>id:<strong>3</strong>:initdefault:               ##  配置默认启动级别</p><p>## <strong>通常将默认启动级别设置为：3</strong></p></blockquote><h1 id="4-用户和组"><a href="#4-用户和组" class="headerlink" title="4. 用户和组"></a>4. 用户和组</h1><h3 id="1-用户和组的概念"><a href="#1-用户和组的概念" class="headerlink" title="1. 用户和组的概念"></a>1. 用户和组的概念</h3><p>Linux是一个多任务多用户的操作系统，当我们在使用<code>ls -l</code>命令的时候我们看到如下信息： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x. 2 root root 4096 5月  24 00:15 <span class="built_in">test</span></span><br><span class="line">-rw-r--r--. 1 root root   58 5月  25 11:00 test.sh</span><br><span class="line">-rwxr-xr-x. 1 root root   35 5月  23 23:55 test.txt</span><br></pre></td></tr></table></figure><p>test：表示文件或者目录，具体的文件类型是由该行最前面的那个符号表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 当为[ *d* ]则是目录</span><br><span class="line">- 当为[ *-* ]则是文件；</span><br><span class="line">- 若是[ *l* ]则表示为链接文档(link file)；</span><br><span class="line">- 若是[ *b* ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</span><br><span class="line">- 若是[ *c* ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置);</span><br></pre></td></tr></table></figure><p><strong>drwxrwxr-x</strong> <strong>：该文件的类型和权限信息</strong></p><p><strong><code>2</code></strong> <strong>：链接数，如果是文件则是1</strong> <strong>，</strong> <strong>如果是文件夹则表示该文件夹下的子文件夹个数</strong> </p><p><strong>第一个root </strong>：文件或者目录的所属者**</p><p><strong>第二个root </strong>：所属用户组**</p><p><strong>4096</strong> <strong>：文件或者目录的大小，是目录的话一般都是4096</strong></p><p>5月  24 00:15：文件的最后编辑时间</p><blockquote><p> 通过以上信息得知，每个文件都设计到用户和组的权限问题</p><p>在Linux中，用户是能够获取系统资源的权限的集合，组是权限的容器</p></blockquote><p><strong>Linux</strong> <strong>用户类型</strong> </p><table><thead><tr><th><strong>用户类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>管理员root</td><td>具有使用系统所有权限的用户,其UID 为0</td></tr><tr><td>系统用户</td><td>保障系统运行的用户,一般不提供密码登录系统,其UID为1-499之间</td></tr><tr><td>普通用户</td><td>即一般用户,其使用系统的权限受限,其UID为500-60000之间.</td></tr></tbody></table><p>与Linux用户信息相关的文件有两个：分别是<strong>/etc/passwd</strong>和 <strong>/etc/shadow</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件/etc/passwd文件的内容，选取第一行：</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line">root:用户名</span><br><span class="line">x:密码占位符，密码保存在shadow文件内</span><br><span class="line">0:用户id，UID</span><br><span class="line">0:组id，GID</span><br><span class="line">root:注释信息</span><br><span class="line">/root:用户家目录</span><br><span class="line">/bin/bash:用户默认使用shell</span><br><span class="line"></span><br><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><p><strong>Linux用户组类型</strong></p><table><thead><tr><th><strong>用户组类型</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td>系统组</td><td style="text-align:left">一般加入一些系统用户</td></tr><tr><td>普通用户组</td><td style="text-align:left">可以加入多个用户</td></tr><tr><td>私有组/基本组</td><td style="text-align:left">当创建用户时,如果没有为其指明所属组，则就为其定义一个私有的用户组，起名称与用户名同名，当把其他用户加入到该组中，则其就变成了普通组</td></tr></tbody></table><p>与Linux用户组信息相关的文件有两个：分别是/etc/group和 /etc/gshadow </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件/etc/group文件内容，选取一个普通组行：</span></span><br><span class="line">hadoop:x:500:</span><br><span class="line">hadoop:组名</span><br><span class="line">x:组密码占位符</span><br><span class="line">500:组id</span><br></pre></td></tr></table></figure><h3 id="2-用户操作"><a href="#2-用户操作" class="headerlink" title="2. 用户操作"></a>2. 用户操作</h3><p>Linux中的用户管理主要涉及到用户账号的添加、删除和修改。所有操作都影响/etc/passwd中的文件内容</p><ol><li><p><strong>添加用户</strong></p><blockquote><p><strong>useradd spark</strong></p><p>usermod -G bigdata spark                           ## 设置组</p><p>usermod -c “mylove spark” spark            ## 添加备注信息</p><p><strong>一步完成</strong>：<strong>useradd -G bigdata -c “mylove” spark</strong></p></blockquote></li><li><p><strong>设置密码</strong> </p><blockquote><p><strong>passwd spark</strong></p><p>根据提示设置密码即可</p></blockquote></li><li><p><strong>修改用户</strong> </p><blockquote><p>修改spark登录名：<strong>usermod -l spark storm</strong></p><p>将spark添加到bigdata和root组：<strong>usermod -G root,bigdata spark</strong></p><p>查看spark的组信息：<strong>groups spark</strong></p></blockquote></li><li><p><strong>删除用户</strong></p><blockquote><p><strong>userdel -r spark</strong></p><p>加一个-r就表示把用户及用户的主目录都删除</p></blockquote></li></ol><h3 id="3-组操作"><a href="#3-组操作" class="headerlink" title="3. 组操作"></a>3. 组操作</h3><p>前面我们知道，组是权限的集合。在linux系统中，每个用户都有一个用户组，没有指定时都默认为私有组，私有组名同用户名一致，建立用户组的好处是系统能对一个用户组中的所有用户的操作权限进行集中管理。组管理涉及组的添加、删除和修改。组的增加、删除和修改实际上就对/etc/group文件的更新 </p><ol><li><p>添加一个叫bigdata的组</p><blockquote><p><strong>groupadd bigdata</strong></p></blockquote></li><li><p>查看系统当前有那些组</p><blockquote><p><strong>cat /etc/group</strong></p></blockquote></li><li><p>将hadoop用户添加到bigdata组中 </p><blockquote><p><strong>usermod -G bigdata spark</strong></p><p>或者</p><p><strong>gpasswd -a spark bigdata</strong></p></blockquote><p><strong>这两个命令的区分记忆技巧：</strong></p><p><strong>命令是什么，就证明对什么做操作，所以最后的参数就是命令的操作对象，中间的可选项表示要干嘛</strong></p></li><li><p>将spark用户从bigdata组删除 </p><blockquote><p><strong>gpasswd -d spark bigdata</strong> </p></blockquote></li><li><p>将bigdata组名修改为bigspark </p><blockquote><p><strong>groupmod -n bigspark bigdata</strong> </p></blockquote></li><li><p>删除组 </p><blockquote><p><strong>groupdel bigdata</strong> </p></blockquote></li></ol><h3 id="4-为用户配置sudoer权限"><a href="#4-为用户配置sudoer权限" class="headerlink" title="4. 为用户配置sudoer权限"></a>4. 为用户配置sudoer权限</h3><p>普通情况下，使用普通用户进行一些简单的操作就OK，但是普通用户和root用户的区别就在于root用户能对系统做任何事，但是普通用户就不行。处处受限。那么假如在某些情况下，普通用户想拥有更大的权限做更多的事情，虽然有权限限制，但也不是不可以。部分操作还是可以赋予更高的权限让普通用户做一次。这就需要给普通用户配置root权限了。意思就是让普通用户使用root权限去做一些操作，这当然是需要配置的。 </p><blockquote><p>用root编辑 <strong>vi /etc/sudoers</strong></p><p>在文件的如下位置，为hadoop添加一行即可</p><p>root ALL=(ALL) ALL</p><p>hadoop ALL=(ALL) ALL</p><p>spark ALL=(ALL) ALL</p><p>然后，hadoop用户和spark用户就可以用sudo来执行系统级别的指令</p><p>[hadoop\@hadoop01 ~]\$ <strong>sudo useradd huangxiaoming</strong></p></blockquote><h3 id="5-切换用户"><a href="#5-切换用户" class="headerlink" title="5. 切换用户"></a>5. 切换用户</h3><p>在linux的系统使用过程当中，免不了会有多个用户来回切换使用。</p><p>所以在此提供切换用户的使用操作：切换用户使用的命令是 </p><blockquote><p><strong>su（switch user）</strong></p><p>从普通用户切换到root用户 , 需要输密码</p><blockquote><p><strong>su root</strong>   或  </p><p><strong>su</strong> </p></blockquote><p>从root用户切换到普通用户, 不需要输密码</p><blockquote><p><strong>su</strong> xxx </p></blockquote></blockquote><h1 id="5-文件权限"><a href="#5-文件权限" class="headerlink" title="5. 文件权限"></a>5. 文件权限</h1><h3 id="1、linux文件权限的描述格式解读"><a href="#1、linux文件权限的描述格式解读" class="headerlink" title="1、linux文件权限的描述格式解读"></a>1、linux文件权限的描述格式解读</h3><p>Linux用 户分为：拥有者、组群(Group)、其他（other），Linux系统中，预设的情況下，系统中所有的帐号与一般身份使用者，以及root的相关信 息， 都是记录在<code>/etc/passwd</code>文件中。每个人的密码则是记录在<code>/etc/shadow</code>文件下。 此外，所有的组群名称记录在<code>/etc/group</code>內</p><p>linux文件的用户权限的分析图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  -rw-r--r--   1 user  staff   651 Oct 12 12:53 .gitmodules</span><br><span class="line"><span class="comment"># ↑╰┬╯╰┬╯╰┬╯</span></span><br><span class="line"><span class="comment"># ┆ ┆  ┆  ╰┈ 0 其他人</span></span><br><span class="line"><span class="comment"># ┆ ┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ g 属组</span></span><br><span class="line"><span class="comment"># ┆ ╰┈┈┈┈ u 属主</span></span><br><span class="line"><span class="comment"># ╰┈┈ 第一个字母 `d` 代表目录，`-` 代表普通文件</span></span><br></pre></td></tr></table></figure><p>d：标识节点类型（d：文件夹   -：文件  l：链接）</p><p>r：可读   w：可写    x：可执行 </p><table><thead><tr><th></th><th><strong>文件</strong></th><th><strong>文件夹</strong></th></tr></thead><tbody><tr><td><strong>r</strong></td><td><strong>可读取内容</strong></td><td><strong>可以ls</strong></td></tr><tr><td><strong>w</strong></td><td><strong>可修改文件的内容</strong></td><td><strong>可以在其中创建或者删除子节点</strong></td></tr><tr><td><strong>x</strong></td><td><strong>能否运行这个文件</strong></td><td><strong>能否cd**</strong>进入这个目录**</td></tr></tbody></table><h3 id="2、-修改文件权限"><a href="#2、-修改文件权限" class="headerlink" title="2、 修改文件权限"></a>2、 修改文件权限</h3><p><strong>chmod命令</strong>  用来变更文件或目录的权限。在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod(选项)(参数)</span><br><span class="line"></span><br><span class="line">r=读取属性　　//值＝4 </span><br><span class="line">w=写入属性　　//值＝2 </span><br><span class="line">x=执行属性　　//值＝1</span><br></pre></td></tr></table></figure><ol><li><p><strong>选项</strong>：</p><p><code>u</code> User，即文件或目录的拥有者；<br><code>g</code> Group，即文件或目录的所属群组；<br><code>o</code> Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；<br><code>a</code> All，即全部的用户，包含拥有者，所属群组以及其他用户；<br><code>r</code> 读取权限，数字代号为“4”;<br><code>w</code> 写入权限，数字代号为“2”；<br><code>x</code> 执行或切换权限，数字代号为“1”；<br><code>-</code> 不具任何权限，数字代号为“0”；<br><code>s</code> 特殊功能说明：变更文件或目录的权限。</p></li><li><p><strong>参数</strong>:</p><p>权限模式：指定文件的权限模式；<br>文件：要改变权限的文件。</p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>修改文件权限</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改</span></span><br><span class="line">chmod g-rw haha.dat<span class="comment">## 表示将haha.dat对所属组的rw权限取消</span></span><br><span class="line">chmod o-rw haha.dat<span class="comment">## 表示将haha.dat对其他人的rw权限取消</span></span><br><span class="line">chmod u+x haha.dat<span class="comment">## 表示将haha.dat对所属用户的权限增加x</span></span><br><span class="line">chmod a-x haha.dat        <span class="comment">## 表示将haha.dat对所用户取消x权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用数字的方式来修改权限(常用)</span></span><br><span class="line">chmod  664  haha.dat</span><br><span class="line">就会修改成   rw-rw-r--</span><br><span class="line">如果要将一个文件夹的所有内容权限统一修改，则可以-R参数</span><br><span class="line">chmod  -R  770  aaa/</span><br></pre></td></tr></table></figure><p><strong>修改文件所有权</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;只有root权限能执行&gt;</span></span><br><span class="line">chown angela  aaa<span class="comment">## 改变所属用户</span></span><br><span class="line">chown :angela  aaa<span class="comment">## 改变所属组</span></span><br><span class="line">chown angela:angela aaa/<span class="comment">## 同时修改所属用户和所属组</span></span><br></pre></td></tr></table></figure><h1 id="6-压缩打包"><a href="#6-压缩打包" class="headerlink" title="6. 压缩打包"></a>6. 压缩打包</h1><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。</p><p>gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多处“.gz”扩展名。</p><ol><li><p>语法</p><blockquote><p>gzip (选项) (参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-a或——ascii：使用ASCII文字模式；</span><br><span class="line">-d或--decompress或----uncompress：解开压缩文件；</span><br><span class="line">-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</span><br><span class="line">-h或——<span class="built_in">help</span>：在线帮助；</span><br><span class="line">-l或——list：列出压缩文件的相关信息；</span><br><span class="line">-L或——license：显示版本与版权信息；</span><br><span class="line">-n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；</span><br><span class="line">-N或——name：压缩文件时，保存原来的文件名称及时间戳记；</span><br><span class="line">-q或——quiet：不显示警告信息；</span><br><span class="line">-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line">-S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；</span><br><span class="line">-t或——<span class="built_in">test</span>：测试压缩文件是否正确无误；</span><br><span class="line">-v或——verbose：显示指令执行过程；</span><br><span class="line">-V或——version：显示版本信息；</span><br><span class="line">-&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；</span><br><span class="line">--best：此参数的效果和指定“-9”参数相同；</span><br><span class="line">--fast：此参数的效果和指定“-1”参数相同。</span><br><span class="line">-num 用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件列表：指定要压缩的文件列表。</p></blockquote></li><li><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把test6目录下的每个文件压缩成.gz文件</span></span><br><span class="line">gzip *</span><br><span class="line"><span class="comment"># 把上例中每个压缩的文件解压，并列出详细的信息</span></span><br><span class="line">gzip -dv *</span><br><span class="line"><span class="comment"># 详细显示例1中每个压缩的文件的信息，并不解压</span></span><br><span class="line">gzip -l *</span><br><span class="line"><span class="comment"># 压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</span></span><br><span class="line">gzip -r log.tar</span><br><span class="line"><span class="comment"># 递归的压缩目录</span></span><br><span class="line">gzip -rv test6</span><br><span class="line"><span class="comment"># 这样，所有test下面的文件都变成了.gz，目录依然存在只是目录里面的文件相应变成了.gz.这就是压缩，和打包不同。因为是对目录操作，所以需要加上-r选项，这样也可以对子目录进行递归了。</span></span><br><span class="line"><span class="comment"># 递归地解压目录</span></span><br><span class="line">gzip -dr test6</span><br></pre></td></tr></table></figure></li></ol><h3 id="bzip"><a href="#bzip" class="headerlink" title="bzip"></a>bzip</h3><p><strong>bzip2命令</strong> 用于创建和管理（包括解压缩）“.bz2”格式的压缩包。</p><ol><li><p>语法</p><blockquote><p>bzip2 (选项) (参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-c或——stdout：将压缩与解压缩的结果送到标准输出；</span><br><span class="line">-d或——decompress：执行解压缩；</span><br><span class="line">-f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；</span><br><span class="line">-h或——<span class="built_in">help</span>：在线帮助；</span><br><span class="line">-k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；</span><br><span class="line">-s或——small：降低程序执行时内存的使用量；</span><br><span class="line">-t或——<span class="built_in">test</span>：测试.bz2压缩文件的完整性；</span><br><span class="line">-v或——verbose：压缩或解压缩文件时，显示详细的信息；</span><br><span class="line">-z或——compress：强制执行压缩；</span><br><span class="line">-V或——version：显示版本信息；</span><br><span class="line">--repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；</span><br><span class="line">--repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件：指定要压缩的文件。</p></blockquote></li><li><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 压缩指定文件filename:</span></span><br><span class="line">bzip2 filename  或   bzip2 -z filename</span><br><span class="line"><span class="comment">## 解压指定的文件filename.bz2:</span></span><br><span class="line">bzip2 -d filename.bz2 或  bunzip2 filename.bz2</span><br><span class="line"><span class="comment"># 压缩解压的时候将结果也输出：</span></span><br><span class="line">bzip2 -v filename  </span><br><span class="line">filename:  0.119:1, 67.200 bits/byte, -740.00% saved, 5 <span class="keyword">in</span>, 42 out.</span><br><span class="line"><span class="comment">#  压缩解压的时候，除了生成结果文件，将原来的文件也保存: </span></span><br><span class="line">bzip2 -k filename</span><br><span class="line"><span class="comment">#  解压到标准输出, 输出文件的内容</span></span><br><span class="line">bzip2 -dc filename.bz2</span><br></pre></td></tr></table></figure></li></ol><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>Linux下的归档使用工具，用来打包和备份。</p><p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p><p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><p> <strong>其实最简单的使用 tar 就只要记忆底下的方式即可：</strong> </p><p><strong>tar.gz 格式:</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]</span><br><span class="line">解压并解包： tar -zxvf [原文件名].tar.gz</span><br><span class="line">注：z代表用gzip算法来压缩/解压。</span><br></pre></td></tr></table></figure><p><strong>tar.bz2格式</strong>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]</span><br><span class="line">解压并解包： tar -jxvf [原文件名].tar.bz2</span><br><span class="line">注：小写j代表用bzip2算法来压缩/解压。</span><br></pre></td></tr></table></figure><hr><p><strong>其实用不到的话就不用看了, 下面的.</strong></p><ol><li><p>语法</p><blockquote><p>tar(选项)(参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-A或--catenate：新增文件到以存在的备份文件；</span><br><span class="line">-B：设置区块大小；</span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line">-d：记录文件的差别；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-t或--list：列出备份文件的内容；</span><br><span class="line">-z或--gzip或--ungzip：通过gzip指令处理备份文件；</span><br><span class="line">-Z或--compress或--uncompress：通过compress指令处理备份文件；</span><br><span class="line">-f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；</span><br><span class="line">-v或--verbose：显示指令执行过程；</span><br><span class="line">-r：添加文件到已经压缩的文件；</span><br><span class="line">-u：添加改变了和现有的文件到已经存在的压缩文件；</span><br><span class="line">-j：支持bzip2解压文件；</span><br><span class="line">-v：显示操作过程；</span><br><span class="line">-l：文件系统边界设置；</span><br><span class="line">-k：保留原有文件不覆盖；</span><br><span class="line">-m：保留文件不被覆盖；</span><br><span class="line">-w：确认压缩文件的正确性；</span><br><span class="line">-p或--same-permissions：用原来的文件权限还原文件；</span><br><span class="line">-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；</span><br><span class="line">-N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；</span><br><span class="line">--exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件或目录：指定要打包的文件或目录列表。</p><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- z：有gzip属性的</span><br><span class="line">- j：有bz2属性的</span><br><span class="line">- Z：有compress属性的</span><br><span class="line">- v：显示所有过程</span><br><span class="line">- O：将文件解开到标准输出</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><ol><li>zip格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩： zip -r [目标文件名].zip [原文件/目录名]</span><br><span class="line">解压： unzip [原文件名].zip</span><br><span class="line">注：-r参数代表递归</span><br></pre></td></tr></table></figure><ol start="2"><li>tar格式（该格式仅仅打包，不压缩）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打包：tar -cvf [目标文件名].tar [原文件名/目录名]</span><br><span class="line">解包：tar -xvf [原文件名].tar</span><br><span class="line">注：c参数代表create（创建），x参数代表extract（解包），v参数代表verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>tar.gz格式</strong>(方式二常用)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：利用前面已经打包好的tar文件，直接用压缩命令。</span></span><br><span class="line">压缩：gzip [原文件名].tar</span><br><span class="line">解压：gunzip [原文件名].tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]</span><br><span class="line">解压并解包： tar -zxvf [原文件名].tar.gz</span><br><span class="line">注：z代表用gzip算法来压缩/解压。</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>tar.bz2格式</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式一：利用已经打包好的tar文件，直接执行压缩命令：</span><br><span class="line">压缩：bzip2 [原文件名].tar</span><br><span class="line">解压：bunzip2 [原文件名].tar.bz2</span><br><span class="line"></span><br><span class="line">方式二：一次性打包并压缩、解压并解包</span><br><span class="line">打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]</span><br><span class="line">解压并解包： tar -jxvf [原文件名].tar.bz2</span><br><span class="line">注：小写j代表用bzip2算法来压缩/解压。</span><br></pre></td></tr></table></figure><ol start="5"><li>jar格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">压缩：jar -cvf [目标文件名].jar [原文件名/目录名]</span><br><span class="line">解压：jar -xvf [原文件名].jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：如果是打包的是Java类库，并且该类库中存在主类，那么需要写一个META-INF/MANIFEST.MF配置文件，内容如下：</span></span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Created-By: 1.6.0_27 (Sun Microsystems Inc.)</span><br><span class="line">Main-class: the_name_of_the_main_class_should_be_put_here</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后用如下命令打包：</span></span><br><span class="line">jar -cvfm [目标文件名].jar META-INF/MANIFEST.MF [原文件名/目录名] 这样以后就能用“java -jar [文件名].jar”命令直接运行主类中的public static void main方法了。</span><br></pre></td></tr></table></figure><ol start="6"><li>7z格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">压缩：7z a [目标文件名].7z [原文件名/目录名]</span><br><span class="line">解压：7z x [原文件名].7z</span><br><span class="line">注：这个7z解压命令支持rar格式，即：</span><br><span class="line"></span><br><span class="line">7z x [原文件名].rar</span><br></pre></td></tr></table></figure><ol start="7"><li><p>其它例子</p><p><a href="http://wangchujiang.com/linux-command/c/tar.html" target="_blank" rel="noopener">参考网址</a></p></li></ol></li></ol><h1 id="7-Linux开关机和重启"><a href="#7-Linux开关机和重启" class="headerlink" title="7. Linux开关机和重启"></a>7. Linux开关机和重启</h1><blockquote><p>开机：开机键</p><p>关机：shutdown，halt，init 0，poweroff</p><p>重启：reboot，init 6</p></blockquote><blockquote><p>Shutdown命令详解：</p><p>shutdown -h now  ## 立刻关机</p><p>shutdown -h +10  ##  10分钟以后关机                     </p><p>shutdown -h 12:00:00  ##12点整的时候关机</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-VI文本编辑器&quot;&gt;&lt;a href=&quot;#1-VI文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;1.. VI文本编辑器&quot;&gt;&lt;/a&gt;1.. VI文本编辑器&lt;/h1&gt;&lt;p&gt;学会使用vi编辑器是学习Linux系统的必备技术之一，因为一般的Linux服
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-1</title>
    <link href="https://airpoet.github.io/2018/05/26/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://airpoet.github.io/2018/05/26/Linux/Linux学习笔记-1/</id>
    <published>2018-05-26T15:37:15.310Z</published>
    <updated>2018-05-27T12:13:44.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-gt-初识Linux"><a href="#1-gt-初识Linux" class="headerlink" title="1&gt;  初识Linux"></a>1&gt;  初识Linux</h2><h3 id="1-Linux介绍"><a href="#1-Linux介绍" class="headerlink" title="1. Linux介绍"></a>1. Linux介绍</h3><p>Linux系统是一套<strong>免费使用</strong>和<strong>自由传播</strong>的<strong>类UNIX操作系统</strong>（主要用在服务器上），是一个基于<strong>POSIX</strong>和<strong>UNIX</strong>的<strong>多用户</strong>、<strong>多任务</strong>、<strong>支持多线程</strong>和<strong>多CPU</strong>的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了UNIX以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p><strong>UNIX：操作系统，是美国AT&amp;T公司贝尔实验室于1969年完成的操作系统，最早由肯·汤普逊（Ken Thompson），丹尼斯·里奇（Dennis Ritchie）开发</strong>。在1971年首次对外发布，刚好在1971，<strong>丹尼斯·里奇（Dennis Ritchie）发明了C语言</strong>，后来在<strong>1973，Unix被他用C语言重新编写</strong>。Unix前身源自于MultiCS，叫UniCS，后来改名叫Unix。</p><p><strong>POSIX</strong>：可移植操作系统接口（英语：Portable Operating System Interface of UNIX，缩写为POSIX），是<strong>IEEE（电气和电子工程师协会）</strong>为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。</p><p><strong>GNU</strong>：1983年，Richard Stallman（理查德·马修·斯托曼）创立GNU计划。<strong>一套完全自由的操作系统</strong>，其内容软件完全以GPL方式发布。这个操作系统是GNU计划的主要目标（发展出一套完整的开放源代码操作系统来取代Unix），名称来自GNU\’s Not Unix!的递归缩写。</p><p><strong>GPL</strong>：一种GNU通用公共许可协议，为保证GNU软件可以自由的使用、复制、修改和发布，所有的GNU软件都有一份在禁止其他人添加任何限制的情况下授权所有权利给任何人的协议条款，是一个被广泛使用的自由软件许可协议条款，保证终端用户运行、学习、分享（复制）及编辑软件之自由，GPL是自由软件和开源软件的最流行许可证，特色表现：</p><p>•取得软件与原始码：您可以根据自己的需求来执行这个自由软件</p><p>•复制：您可以自由的复制该软件</p><p>•修改：您可以将取得的原始码进行程序修改工作，使之适合您的工作</p><p>•再发行：您可以将您修改过的程序，再度的自由发行，而不会与原先的撰写者冲突</p><p>•回馈：您应该将您修改过的程序代码回馈于社群</p><p><strong>==不同许可证的区别==</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-152543.png" alt=""></p><p>1985年，Richard Stallman又创立了自由软件基金会（Free Software Foundation，FSF）来为GNU计划提供技术、法律以及财政支持。</p><p>1990年，GNU计划开发主要项目有Emacs（文本编辑器）、GCC（GUN Compiler Collection，GNU编译器集合）、Bash等，GCC是一套GNU开发的编程语言编译器。还有开发一些UNIX系统的程序库和工具。</p><p><strong>Linux操作系统诞生于1991年10月5日</strong>（这是第一次正式向外公布时间），与UNIX兼容，并在GPL条款下发布。现在，Linux产生了许多不同的Linux发行版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。</p><p>1992年，Linux与其他GUN软件结合，完全自由的GNU/Linux操作系统正式诞生，简称Linux</p><p><strong>==Linux的基本思想有两点==</strong></p><p><strong>第一，一切都是文件</strong></p><p><strong>第二，每个软件都有确定的用途</strong></p><p>与Unix思想十分相近。</p><h3 id="2-Linux特点"><a href="#2-Linux特点" class="headerlink" title="2. Linux特点"></a>2. Linux特点</h3><p>1、分时的多用户、多任务操作系统</p><p>2、多数网络协议支持、方便的远程管理</p><p>3、强大的内存管理和文件系统管理</p><p>4、大量的可用的软件和免费的软件</p><p>5、优良的稳定性和安全性</p><p>6、良好的可移植性和灵活性</p><p>7、可供选择的厂商多</p><h3 id="3-Linux操作系统架构"><a href="#3-Linux操作系统架构" class="headerlink" title="3. Linux操作系统架构"></a>3. Linux操作系统架构</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-152728.png" alt=""></p><p>补充：linux内核必须加上一个”界面”软件，才能让用户去使用，”界面”分两类：</p><p>a、命令行界面CLI SHELL（有很多种，最流行的一种是bash shell）</p><p>b、图形界面GUI SHELL（也有很多种，目前最流行的有两种：gnome和kde）</p><h3 id="4-Linux内核"><a href="#4-Linux内核" class="headerlink" title="4. Linux内核"></a>4. Linux内核</h3><p>严格来讲，Linux不是一个操作系统，Linux只是一个操作系统中的内核。</p><p>内核建立了计算机软件与硬件之间通讯的平台，内核提供系统服务，比如文件管理、虚拟内存、设备I/O、进程管理等。</p><p>内核官网：<a href="http://www.kernel.org/" target="_blank" rel="noopener">[http://www.kernel.org/]{.underline}</a>。目前最新的内核版本：4.13.5</p><p>要注意区分linux发型版本和linux内核版本。两者不是同一个事物</p><p><strong>下面这位是Linux内核的作者：</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-153055.png" alt=""></p><p><strong>这是Linux的logo</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-153046.png" alt="logo"></p><h3 id="5-常见发行版"><a href="#5-常见发行版" class="headerlink" title="5.  常见发行版"></a>5.  常见发行版</h3><p><strong>红帽企业系统（RedHat Enterprise Linux, RHEL）</strong></p><p>全球最大的开源技术厂商，全世界内使用最广泛的Linux发布套件，</p><p>提供性能与稳定性极强的Linux套件系统并拥有完善的全球技术支持。</p><p>官网：<a href="http://www.redhat.com" target="_blank" rel="noopener">[http://www.redhat.com]{.underline}</a></p><p><strong>社区企业操作系统（CentOS）</strong></p><p>最初是将红帽企业系统”重新编译/发布”给用户免费使用而广泛使用，</p><p>当前已正式加入红帽公司并继续保持免费（随RHEL更新而更新）。</p><p>官网：<a href="http://www.centos.org/" target="_blank" rel="noopener">[http://www.centos.org/]{.underline}</a></p><p><strong>红帽用户桌面版（Fedora [Linux]）</strong></p><p>最初由红帽公司发起的桌面版系统套件（目前已经不限于桌面版），</p><p>用户可免费体验到最新的技术或工具，而功能成熟后加入到RHEL中。</p><p>官网：<a href="http://fedora.redhat.com" target="_blank" rel="noopener">[http://fedora.redhat.com]{.underline}</a></p><p><strong>国际化组织的开源操作系统（Debian）</strong></p><p>提供超过37500种不同的自由软件且拥有很高的认可度，</p><p>对于各类内核架构支持性良好，稳定性、安全性强更有免费的技术支持。</p><p>官网：<a href="http://www.debian.org/" target="_blank" rel="noopener">[http://www.debian.org/]{.underline}</a></p><p><strong>基于Debian的桌面版（Ubuntu）</strong></p><p>Ubuntu是一款基于Debian派生的产品，对新款硬件具有极强的兼容能力。</p><p>普遍认为Ubuntu与Fedora都是极其出色的LINUX桌面系统。</p><p>官网：<a href="http://www.ubuntulinux.org/" target="_blank" rel="noopener">[http://www.ubuntulinux.org/]{.underline}</a></p><p>当然还有国内的<strong>国防科技大学发行麒麟kylin</strong>和<strong>中科院发行红旗RedFlag</strong></p><h2 id="2-gt-Linux文件系统"><a href="#2-gt-Linux文件系统" class="headerlink" title="2&gt; Linux文件系统"></a>2&gt; Linux文件系统</h2><h3 id="1-CentOS的目录结构"><a href="#1-CentOS的目录结构" class="headerlink" title="1. CentOS的目录结构"></a>1. CentOS的目录结构</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-113707.png" alt=""></p><h3 id="2-根目录下每个目录的简单解释"><a href="#2-根目录下每个目录的简单解释" class="headerlink" title="2. 根目录下每个目录的简单解释"></a>2. 根目录下每个目录的简单解释</h3><table><thead><tr><th><strong>/**</strong>：**根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中</th></tr></thead><tbody><tr><td><strong>/bin:/usr/bin:</strong> 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等</td></tr><tr><td><strong>/boot**</strong>：**放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可</td></tr><tr><td><strong>/dev**</strong>：**存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt</td></tr><tr><td><strong>/etc**</strong>：**系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/gateways、/etc/resolv.conf、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。注：/etc/X11存放与x windows有关的设置</td></tr><tr><td><strong>/home**</strong>：**系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据</td></tr><tr><td><strong>/lib:/lib64:/usr/lib:/usr/local/lib**</strong>：**系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules</td></tr><tr><td><strong>/lost+fount**</strong>：**系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found</td></tr><tr><td><strong>/mnt:/media**</strong>：**光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载</td></tr><tr><td><strong>/opt**</strong>：**给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE桌面软件，可以将该软件安装在该目录下。以前的Linux系统中，习惯放置在   /usr/local目录下option</td></tr><tr><td><strong>/proc**</strong>：*<em>此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/</em>等process</td></tr><tr><td><strong>/root**</strong>：**系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下</td></tr><tr><td><strong>/sbin:/usr/sbin:/usr/local/sbin**</strong>：**放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。</td></tr><tr><td><strong>/selinux**</strong>：**selinux软件目录，用于保证系统安全</td></tr><tr><td><strong>/srv**</strong>：**服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内service</td></tr><tr><td><strong>/sys**</strong>：**类似于/proc的特殊文件系统，存放内核数据信息</td></tr><tr><td><strong>/tmp**</strong>：**一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</td></tr><tr><td><strong>/usr**</strong>：<strong>应用程序存放目录，   /usr/bin 存放应用程序    /usr/share 存放共享数据   /usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件   /usr/local:存放软件升级包   /usr/share/doc: 系统说明文件存放目录   /usr/share/man: 程序说明文件存放目录，使用man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间   </strong>usr<strong>**：user share resources/unix share resouces</strong></td></tr><tr><td><strong>/var**</strong>：**放置系统执行过程中经常变化的文件，如：   /var/log：随时更改的日志文件   /var/log/message：所有的登录文件存放目录   /var/spool/mail：邮件存放的目录   /var/run：程序或服务启动</td></tr></tbody></table><h4 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h4><ol><li>用户应该将文件存储在自己的主目录及其子目录下</li><li>系统绝大多数设置都在/etc目录下</li><li>不要修改/或者/usr目录下的任何内容，除非你真的清楚你在做什么，也就是说/目录最好和安装好系统之初保持一致</li><li>大多数工具和应用软件程序都安装在/bin，/sbin，/usr/bin，/usr/sbin，/usr/local/bin</li><li>文件或者目录都有唯一的绝对路径，没有盘符的概念</li></ol><h2 id="3-gt-Linux命令终端"><a href="#3-gt-Linux命令终端" class="headerlink" title="3&gt; Linux命令终端"></a>3&gt; Linux命令终端</h2><h3 id="1-Linux-的命令格式：命令选项-命令参数"><a href="#1-Linux-的命令格式：命令选项-命令参数" class="headerlink" title="1. Linux 的命令格式：命令选项  命令参数"></a>1. Linux 的命令格式：命令选项  命令参数</h3><p>注意：三者之间要空格隔开，其中命令选项分为长格式和短格式。</p><p>短格式用’-‘表示，比如：-l，</p><p>长格式用”–”表示，比如：–help，</p><p>也可以使用组合格式，比如：-a -l 等价于-la或者-al </p><h3 id="2-Linux的默认命令提示符："><a href="#2-Linux的默认命令提示符：" class="headerlink" title="2. Linux的默认命令提示符："></a>2. Linux的默认命令提示符：</h3><p>#：管理员用户</p><p>$：普通用户</p><p>PS:  <strong>Linux以回车键表示命令结束，如果 linux命令需要折行输入，那么可以以 <code>\</code>表示每行结束</strong> </p><h2 id="4-gt-常用命令归纳分类"><a href="#4-gt-常用命令归纳分类" class="headerlink" title="4&gt; 常用命令归纳分类"></a>4&gt; 常用命令归纳分类</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th style="text-align:center">文件管理</th><th style="text-align:left">mkdir, rmdir, mv, rm, cp, touch, cat,   tac, echo, more, less, head, tail, file, find, rename, ln, pwd, scp, alias</th></tr></thead><tbody><tr><td style="text-align:center">磁盘管理</td><td style="text-align:left">ls, cd, du, df, mount, unmounts, fdisk</td></tr><tr><td style="text-align:center">文档处理</td><td style="text-align:left">wc, sort, uniq,   cut, sed, awk, grep, vi, diff</td></tr><tr><td style="text-align:center">用户和组</td><td style="text-align:left">useradd,   usermod, passwd, userdel, groupadd, groupdel, chgrp, su</td></tr><tr><td style="text-align:center">文件传输</td><td style="text-align:left">get, put, wget</td></tr><tr><td style="text-align:center">网络通信</td><td style="text-align:left">telnet, nc, ifconfig, ping, netstat, ip,   host</td></tr><tr><td style="text-align:center">备份压缩</td><td style="text-align:left">gzip, bzip2, bunzip2, tar, zip</td></tr><tr><td style="text-align:center">系统管理</td><td style="text-align:left">exit, kill, last, ps, top, free, pstree,   reboot, halt, shutdown, sudo, who, w, whoami, whereis, which, last, whatis</td></tr><tr><td style="text-align:center">系统设置</td><td style="text-align:left">clear, set, unset, hwclock, time, date,</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:left">history, hostname, nohup, service, init, rpm,   ssh, cal, yum</td></tr></tbody></table><h3 id="网站速查"><a href="#网站速查" class="headerlink" title="网站速查"></a>网站速查</h3><p><a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><p><a href="http://www.jb51.net/linux/" target="_blank" rel="noopener">http://www.jb51.net/linux/</a></p><p><a href="https://jaywcjlove.github.io/linux-command" target="_blank" rel="noopener">https://jaywcjlove.github.io/linux-command</a></p><p><strong>ps: 直接在命令行中, 用 man xx, 也可以查看命令信息</strong></p><h2 id="5-gt-常用文件系统命令详解"><a href="#5-gt-常用文件系统命令详解" class="headerlink" title="5&gt; 常用文件系统命令详解"></a>5&gt; 常用文件系统命令详解</h2><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><table><thead><tr><th><strong>cd</strong>   <em>change   directory</em></th><th>常使用方式：   cd   sourcedir   进入用户主目录   cd ~     进入用户主目录   cd -     返回进入此目录之前所在的目录   cd ..     返回上级目录（若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思）   cd ../..    返回上两级目录</th></tr></thead><tbody><tr><td><strong>pwd</strong>   <em>print working directory</em></td><td><code>pwd</code>     显示当前工作目录</td></tr><tr><td><strong>ls</strong>   <em>list：显示目录内容列表</em></td><td>使用格式：<code>ls</code>  选项  目录或文件名       常用选项   <code>-l</code>：详细信息显示   <code>-a</code>：显示所有子目录和文件的信息，包括隐藏文件   <code>-A</code>：类似于“-a”，但不显示“.”和“..”目录的信息   <code>-R</code>：递归显示内容   <code>-h</code>：以友好方式显示文件大小       例子：   ls -l    ## 列出文件详细信息，   也可以写作 ll   ls -lah    ## 以友好方式显示包括隐藏文件的详细信息</td></tr><tr><td><strong>du</strong>   <em>disk usage：显示每个文件和目录的磁盘使用空间</em></td><td>使用格式：<code>du  选项  目录或文件名</code>     常用选项：   -a：统计时包括所有的文件，而不仅仅只统计目录    -h：以更易读的字节单位（K、M等）显示信息   -s：只统计每个参数所占用空间总的大小       例子：   du -ah    ##</td></tr><tr><td><strong>df</strong>   <em>disk free：显示磁盘相关信息</em></td><td>常用选项：   -h：以更易读的字节单位（K、M等）显示信息   -T：显示分区格式       例子：   df -h      ## 显示磁盘信息，以友好方式   df -T -h     ## 以友好格式显示磁盘信息，并且附加磁盘格式</td></tr></tbody></table><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><table><thead><tr><th style="text-align:left"><strong>touch</strong>   创建空文件   或更新文件时间标记</th><th style="text-align:left">使用格式：   <strong>touch</strong>  <strong>文件名</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>file</strong>   查看文件类型</td><td style="text-align:left">使用格式：   <strong>file</strong>  <strong>文件名</strong>       根据文件内容格式判断文件类型。而不是根据后缀名</td></tr><tr><td style="text-align:left"><strong>mkdir</strong>   创建文件夹   make directory</td><td style="text-align:left">使用格式：<strong>mkdir</strong>  选项  参数       常用选项：   <strong>-p</strong>：已级联的方式创建文件夹       例子：   mkdir   -p /root/ma/niu/zhu/dagou ## 上级目录不存在自动创建上一级目录，常用</td></tr><tr><td style="text-align:left"><strong>cp</strong>   复制文件</td><td style="text-align:left">使用格式：   <strong>cp</strong>    <strong>选项</strong>  <strong>源文件或目录…</strong>  <strong>目标文件或目录</strong>       常用选项：   <strong>-r</strong>：<em>递归</em>复制整个目录树   <strong>-p</strong>：保持源文件的属性不变   <strong>-i</strong>：需要覆盖文件或目录时进行提醒</td></tr><tr><td style="text-align:left"><strong>rm</strong>   删除文件或目录</td><td style="text-align:left">使用格式：<strong>rm</strong>  [选项]  文件或目录       常用选项：   <strong>-f</strong>：强行删除文件或目录，不进行提醒   <strong>-i</strong>：删除文件或目录时提醒用户确认   <strong>-r</strong>：递归删除整个目录树       例子：   rm -rf /root/ma/ ## 不提醒递归删除整个目录，<strong>慎用慎用慎用</strong></td></tr><tr><td style="text-align:left"><strong>mv</strong>   <strong>移动文件</strong>   如果与源文件位置一样，则相当于<strong>重命名</strong></td><td style="text-align:left">使用格式：   <strong>mv</strong>  [选项]…  源文件或目录…  目标文件或目录                                       常用选项：   <strong>-f</strong>：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录   <strong>-u</strong>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作</td></tr><tr><td style="text-align:left"><strong>rmdir</strong>   删除空文件夹</td><td style="text-align:left">常用选项：   <strong>-p</strong>或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；   rmdir  -p  /root/aa/bb/cc/dd/ee   删除文件夹ee，如果删除ee后，dd变为空，则删除dd，依次类推</td></tr><tr><td style="text-align:left"><strong>cat</strong>   连接文件并打印到标准输出设备上</td><td style="text-align:left">常用选项：   <strong>-n</strong>或–number：由1开始对所有输出的行数编号       cat /home/hadoop/data.txt  ## 查看文件内容</td></tr><tr><td style="text-align:left"><strong>tac</strong>   <u>倒序</u>输出文件内容</td><td style="text-align:left">tac /home/hadoop/data.txt</td></tr><tr><td style="text-align:left"><strong>echo</strong>   输出指定的字符串或者变量</td><td style="text-align:left">常用选项：   -e：若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：   \a 发出警告声；   \b 删除前一个字符；   \c 最后不加上换行符号；   \f 换行但光标仍旧停留在原来的位置；   \n 换行且光标移至行首；   \r 光标移至行首，但不换行；   \t 插入tab；   \v 与\f相同；   \ 插入\字符；   \nnn 插入nnn（八进制）所代表的ASCII字符；       例子：   echo ‘ma’        ## 输出ma   echo -e ‘ma\n’    ## 打印ma之后换行   echo -ne ‘ma’ ‘zhonghua’  ## 打印完不换行       echo ‘ma’ &gt; ma.dat  ## 覆盖   echo ‘ma’ &gt;&gt; ma.dat  ## 追加   echo $PWD    ## 输出变量内容</td></tr><tr><td style="text-align:left"><strong>head</strong>   在屏幕上显示指定文件的开头若干行   默认显示10行</td><td style="text-align:left">常用选项：   -n&lt;数字&gt;：指定显示头部内容的行数；                           例子：   head -n 5 install.log  ## 显示该文件前五行内容</td></tr><tr><td style="text-align:left"><strong>tail</strong>   在屏幕上显示指定文件的末尾若干行</td><td style="text-align:left">常用选项：   <strong>-f：显示文件最新追加的内容</strong>       例子：   tail file        ## 显示文件file的最后10行   tail +20 file    ## 显示文件file的内容，从第20行至文件末尾   <strong>tail -c 10</strong> file    ## 显示文件file的最后10个字符   tail -f install.log  ## 显示最新追加的内容</td></tr><tr><td style="text-align:left"><strong>more</strong>   显示文件内容，每次显示一屏</td><td style="text-align:left">使用方式：   按Space键：显示文本的下一屏内容。   按Enter键：只显示文本的下一行内容。   按h键：显示帮助屏，该屏上有相关的帮助信息。   按b键：显示上一屏内容。   按q键：退出more命令。</td></tr><tr><td style="text-align:left"><strong>less</strong>   分屏上下翻页浏览文件内容</td><td style="text-align:left">和more使用方式基本类似   按<strong>e</strong>键：向上滚动一行   按<strong>y</strong>键：向下滚动一行   <strong>G</strong>：跳到文件末尾   <strong>gg</strong>：跳到文件首行</td></tr><tr><td style="text-align:left"><strong>ln</strong>   用来为文件创件连接   软链接 -s 和 硬链接</td><td style="text-align:left"><strong>ln</strong> /mnt/cdrom1 /var/www/html/centos/   —&gt;硬链接   <strong>ln -s</strong> /mnt/cdrom2 /var/www/html/centos/  –&gt;软链接-符号链接</td></tr><tr><td style="text-align:left"><strong>alias</strong>   别名</td><td style="text-align:left">查看别名：alias   <strong>定义别名</strong>：<code>alias la=&#39;ll -a</code>   <strong>取消别名</strong>：unalias la</td></tr></tbody></table><h3 id="其它有用的命令"><a href="#其它有用的命令" class="headerlink" title="其它有用的命令"></a>其它有用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">man：显示命令帮助信息</span><br><span class="line">clear：清屏，或者按ctrl + l也行</span><br><span class="line">ctrl + c：退出当前进程</span><br><span class="line">ctrl + z：挂起当前前台进程</span><br><span class="line">whatis：命令是什么</span><br><span class="line">whereis：在标准路径下搜索与名称相关的文件，whereis将所有搜索到的文件都显示</span><br><span class="line"><span class="built_in">which</span>：<span class="built_in">which</span>在设定的搜索路径下进行目录搜索，只显示搜索到的第一个文件</span><br><span class="line">su：切换用户</span><br><span class="line"><span class="built_in">history</span>：显示历史命令</span><br><span class="line">hostname：显示主机名</span><br><span class="line"><span class="built_in">set</span>：查看系统变量</span><br><span class="line">get：下载文件</span><br><span class="line">put：上传文件</span><br><span class="line">sudo：以root用户权限执行一次命令</span><br><span class="line"><span class="built_in">exit</span>：退出登录状态</span><br><span class="line">w：显示当前连接的用户</span><br><span class="line">who：显示当前会话信息</span><br><span class="line">uptime：查看系统运行时间</span><br></pre></td></tr></table></figure><h3 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctrl + u：清除光标前的命令，相当于剪切</span><br><span class="line">ctrl + k：清除光标后的命令，相当于剪切</span><br><span class="line">ctrl + y：粘贴</span><br><span class="line">ctrl + t：把光标前面的那个字符往后挪动一位</span><br><span class="line">ctrl + l：清屏</span><br><span class="line">!!：执行上一次命令</span><br><span class="line">!$：上个命令的最后一个单词</span><br><span class="line">ctrl + w：删除光标前一个单词</span><br><span class="line"><span class="built_in">cd</span> data; cat sed.txt：表示先执行<span class="built_in">cd</span>，然后执行cat，工作目录会切换</span><br><span class="line">(<span class="built_in">cd</span> data; cat sed.txt)：跟上个命令相比，不切换工作目录</span><br><span class="line">|：管道符，表示把前面命令内容的输出当做后面命令的输入</span><br><span class="line">&gt;：表示内容覆盖</span><br><span class="line">&gt;&gt;：表示内容追加</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-gt-初识Linux&quot;&gt;&lt;a href=&quot;#1-gt-初识Linux&quot; class=&quot;headerlink&quot; title=&quot;1&amp;gt;  初识Linux&quot;&gt;&lt;/a&gt;1&amp;gt;  初识Linux&lt;/h2&gt;&lt;h3 id=&quot;1-Linux介绍&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-3</title>
    <link href="https://airpoet.github.io/2018/05/25/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://airpoet.github.io/2018/05/25/Linux/Linux学习笔记-3/</id>
    <published>2018-05-25T00:17:16.157Z</published>
    <updated>2018-05-27T14:50:18.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-系统服务管理"><a href="#1-系统服务管理" class="headerlink" title="1. 系统服务管理"></a>1. 系统服务管理</h3><ol><li>检查本机<code>httpd</code>服务是否开启, 使用命令<code>service httpd status</code></li><li>开启/关闭/重启 httpd服务 <code>service httpd start/stop/restart</code></li><li>查看所有的服务状态 <code>service --status-all</code></li><li>过滤出某个服务<code></code>service –status-all | grep httpd`</li><li>防火墙服务  <code>sevice iptables status/stop/start/restart</code></li></ol><p><strong>配置后台服务进程开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启开机自启http进程</span></span><br><span class="line">-&gt;  chkconfig httpd on</span><br><span class="line"><span class="comment"># 查看httpd的开机自启状态</span></span><br><span class="line">-&gt;  chkconfig --list | grep httpd</span><br><span class="line">httpd    0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>缺省系统运行级别</p><ul><li>0 为停机，机器关闭。</li><li>1 为单用户模式，就像Win9x下的安全模式类似。</li><li>2  为多用户模式，但是没有NFS支持。 </li><li>3  为完整的多用户模式，是标准的运行级。</li><li>4 一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本 电脑的电池用尽时，可以切换到这个模式来做一些设置。</li><li>5  就是X11，进到X Window系统了。</li><li>6  为重启，运行init 6机器就会重启。</li></ul><p>Centos中时区</p><ul><li><p>当前正在使用的时d区文件位于 <code>/etc/localtime</code></p></li><li><p>其他时区文件则位于 <code>/usr/share/zoneinfo</code></p></li><li><p>中国时区使用 <code>/usr/share/zoneinfo/Asia/Shanghai</code></p></li><li><p>更改时区 <code>cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</code></p></li><li><p>如果没有  Asia/Shanghai 时区文件，请使用tzselect命令去生成时区文件，生成好的时区文件就在 <code>/usr/share/zoneinfo</code>目录下</p></li></ul><p><strong>修改系统时间</strong></p><ul><li><code>date</code>  : 直接查看时间</li><li><code>date -s</code>  : 手动设置时间</li><li><code>ntpdate time.windows.www</code>  : 同步时间服务器时间</li></ul><h3 id="2-简单磁盘管理"><a href="#2-简单磁盘管理" class="headerlink" title="2. 简单磁盘管理"></a>2. 简单磁盘管理</h3><ul><li><p>df：列出文件系统的整体磁盘使用量</p><ul><li><p>-h  人性化的列出文件的大小等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; <span class="comment"># df -h /dev/sr0</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sr0        3.7G  3.7G     0 100% /media/cdrom</span><br></pre></td></tr></table></figure></li></ul></li><li><p>du：检查磁盘空间使用量</p></li><li><p>fdisk：用于磁盘分区</p></li></ul><h3 id="3-文件的基本属性-TODO"><a href="#3-文件的基本属性-TODO" class="headerlink" title="3. 文件的基本属性  - TODO"></a>3. 文件的基本属性  - TODO</h3><p><strong>前缀的含义</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录的权限</span></span><br><span class="line">-&gt; <span class="comment"># ll -d /var/www/html/localyum</span></span><br><span class="line"></span><br><span class="line">drwxr-xr-x.  7 root root  4096 5月  25 07:50 autojump</span><br><span class="line">-rw-r--r--.  1 root root 50434 5月  23 10:11 install.log</span><br><span class="line">lrwxrwxrwx. 1 root root   13 5月  25 21:04 localyum -&gt; /media/cdrom/</span><br></pre></td></tr></table></figure><ul><li>当为[ <em>d</em> ]则是目录</li><li>当为[ <em>-</em> ]则是文件；</li><li>若是[ <em>l</em> ]则表示为链接文档(link file)；</li><li>若是[ <em>b</em> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ <em>c</em> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置);</li></ul><p><strong>r、w、x 对于文件和目录的含义</strong> </p><table><thead><tr><th></th><th>权限</th><th>对文件的含义</th><th>对目录的含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td><td>可以查看文件内容</td><td>可以列出目录中的内容</td></tr><tr><td>w</td><td>写权限</td><td>可以修改文件内容</td><td>可以再目录中创建、删除文件</td></tr><tr><td>x</td><td>执行权限</td><td>可以执行文件</td><td>可以进入目录</td></tr></tbody></table><h3 id="4-软件安装-TODO"><a href="#4-软件安装-TODO" class="headerlink" title="4. 软件安装 TODO"></a>4. 软件安装 TODO</h3><h5 id="1-二进制发布包安装-TODO"><a href="#1-二进制发布包安装-TODO" class="headerlink" title="1. 二进制发布包安装 TODO:"></a>1. 二进制发布包安装 TODO:</h5><p>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/c670ec9b-1d33-41cc-bda9-035ce287553c/" target="_blank" rel="noopener">安装jdk</a> , 安装<code>tomcat</code>也一样  TODO: </p><ol><li>通过 ftp工具把 jdk传到 linux服务器</li><li>创建一个  <code>/var/www/html/soft/jdk8</code> 的软链接, 指向服务器中的安装包 —— 这一步失败了</li></ol><p>#####2. 源码编译安装 TODO:</p><p>软件以源码工程的形式发布，需要获取到源码工程后用相应开发工具进行编译打包部署</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/98a384b8-94cb-4521-b919-f502c39ef891/" target="_blank" rel="noopener">安装/卸载 redis</a> </p><p><strong>卸载:</strong> </p><ol><li><p>首先查看redis-server是否启动 </p><p><code>ps aux | grep redis</code></p></li><li><p>有的话, 关闭这些进程 </p><p><code>kill -9 进程pid</code></p></li><li><p>删除redis相应的文件夹就可以了。</p><p><code>find / -name redis</code></p></li></ol><p><strong>安装:</strong> </p><ol><li><p>拷贝到/usr/local, 解压, 删掉原安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-3.0.0.tar.gz </span><br><span class="line">rm redis-3.0.0.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>检查运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测一下是否可以安装</span></span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>安装到指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/root/apps/redis install</span><br></pre></td></tr></table></figure></li><li><p>拷贝配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis-3.0.0/redis.conf  /usr/<span class="built_in">local</span>/redis/bin</span><br></pre></td></tr></table></figure></li><li><p>启动</p><ol><li><p>前端模式  <code>bin/redis-server</code></p></li><li><p>后端模式启动 </p><p>修改<code></code>redis.conf<code>配置文件，</code>daemonize yes` 以后端模式启动</p></li></ol></li><li><p>: TODO</p></li></ol><h5 id="3-RPM发布包"><a href="#3-RPM发布包" class="headerlink" title="3. RPM发布包"></a>3. RPM发布包</h5><p>软件已经按照RedHat（Redhat Package Manager）的包管理工具规范RPM进行打包发布，需要获取到相应的软件RPM发布包，然后用rpm命令进行安装</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/fc7f21e7-7a67-4133-8c69-4c2c98510f9f/" target="_blank" rel="noopener">Mysql安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm安装命令</span></span><br><span class="line">1、安装包：rpm -ivh 包名</span><br><span class="line">参数：</span><br><span class="line">-i ：安装的意思</span><br><span class="line">-v ：可视化</span><br><span class="line">-h ：显示安装进度</span><br><span class="line">另外在安装一个rpm包时常用的附带参数有：</span><br><span class="line">--force 强制安装，即使覆盖属于其他包的文件也要安装</span><br><span class="line">--nodeps 当要安装的rpm包依赖其他包时，即使其他包没有安装，也要安装这个包</span><br><span class="line"></span><br><span class="line">2、升级包：rpm -Uvh filename</span><br><span class="line">-U 升级</span><br><span class="line"></span><br><span class="line">3、卸载包rpm -e filename （这里的filename是通过rpm的查询功能所查询到的）</span><br><span class="line"></span><br><span class="line">4、查询一个包是否安装：rpm -q  包名（这里的包名，是不带有平台信息以及后缀名的）</span><br><span class="line"></span><br><span class="line">5.查询当前安装的所有rpm包：rpm -qa</span><br><span class="line">查询当前安装的和sql相关的包：rpm -qa | grep <span class="string">'sql'</span></span><br><span class="line">查询sqlite安装路径：rpm -ql sqlite</span><br></pre></td></tr></table></figure><h3 id="5-设置本地-网络yum源"><a href="#5-设置本地-网络yum源" class="headerlink" title="5. 设置本地/网络yum源"></a>5. 设置本地/网络yum源</h3><ol><li><p>首先检查虚拟机的 CD/DVD驱动器是否有挂载iso镜像文件</p></li><li><p>找到挂载源的位置 在 /dev/sr0下, 将其挂载到/mnt下创建的cdrom文件夹下</p><p><code>mount -t iso9660 -o ro /dev/sr0 /mnt/cdrom</code></p></li><li><p>配置开机挂载 , <code>vi /etc/fstab</code>, 增加一行</p><p><code>/dev/cdrom   /mnt/cdrom   iso9660 defaults   0 0</code></p></li><li><p>创建软连接, 设置可以通过web访问</p><p><code>ln -s /mnt/cdrom/ /var/www/html/yumsorurce</code></p></li><li><p>修改<code>etc/yum.repos.d</code>中的文件<code>entOS-Media.repo</code>中的<code>enabled=1</code>, 开启从本地寻找, 因为文件中, 原本就配置了<code>baseurl:  file:///media/cdrom/</code>, 而我们自己创建了<code>media/cdrom</code>这个目录, 所以就可以从这里面读取了</p></li><li><p>执行<code>yum repolist</code>, 发现已经能读取出media中的repo了, 大功告成</p><p><code>c6-media     CentOS-6 - Media      6,575</code></p></li><li><p>tips: 个人觉得还是配置个网络源比较好, 比如163/阿里的. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作步骤</span></span><br><span class="line"><span class="comment"># 1.备份原来的Base源</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载网易/阿里源 到/etc/yum.repos.d下, 替换掉原本的</span></span><br><span class="line"><span class="comment"># 网易源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS6-Base-163.repo</span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum使用</span></span><br><span class="line">yum update 􏻦􏻧􏷉􏷊升级系统</span><br><span class="line">yum install -y xxx  直接安装, 不用确认</span><br><span class="line">􏻈yum update ~ 􏻦􏻧􏸻􏹺􏷜 升级指定软件包</span><br><span class="line">yum remove ~ 􏺌􏷎􏸻􏹺􏷜􏷕 卸载指定软件</span><br></pre></td></tr></table></figure></li><li><p>挂载, 配置源的其他说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于挂载</span></span><br><span class="line"><span class="comment"># lrwxrwxrwx. 1 root root           3 5月  25 16:47 cdrom -&gt; sr0</span></span><br><span class="line">cdrom其实是sr0的软链接, 因此直接找sr0即可</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载的基本语法</span></span><br><span class="line">mont -t  iso9660  -o ro(只读) /dev/sr0  /mnt/cdrom</span><br><span class="line">(挂载类型)   (挂载方式)  (挂载源)  (挂载点)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载的语法</span></span><br><span class="line">umount /mnt/cdrom </span><br><span class="line"></span><br><span class="line">如果卸载时遇到 umount: /mnt/cdrom: device is busy.</span><br><span class="line">解决方式:</span><br><span class="line">1. 查找哪个进程在用:  fuser /mnt/cdrom</span><br><span class="line">2. 查找进程: ps -ef | grep 进程号</span><br><span class="line">3. 插死进程: <span class="built_in">kill</span> -9 进程号, 如果是root用户, 可能会断开连接, 需要重连</span><br><span class="line">4. 然后继续 umount, 如果不行, 就强制卸载 umount -f /mnt/cdrom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于etc/yum.repos.d 中文件的说明</span></span><br><span class="line">      CentOS-Base.repo：有网的环境下默认使用这个，这个是第一优先级。因为没网，所以修改文件名，设置成备份文件。这样系统就会使用第二优先级的文件。</span><br><span class="line">      CentOS-Media.repo：没网的环境下使用这个，在上图中会发现他默认配置了4个路径，第4个yumsource是我自己加的。意思是说，如果系统检测yum使用了离线安装，那么会从上到下从这4个路径中查找安装软件。所以我们只要把光盘挂载在这四个目录下的任意一个目录即可。同时，该配置文件默认是不启用的，如果想使用需要修改倒数第二行的enabled为1，否则该文件无效。</span><br><span class="line">      </span><br><span class="line"><span class="comment"># /mnt &amp; /media 目录的区别</span></span><br><span class="line">media：挂载一些移动设备，例如光盘，U盘等。</span><br><span class="line">mnt：  挂载一些硬盘等设备。所以我们的光盘应该挂载在media目录下，从yum给的默认配置文件也能看出。</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-进程相关"><a href="#6-进程相关" class="headerlink" title="6. 进程相关"></a>6. 进程相关</h3><h5 id="1-ps命令"><a href="#1-ps命令" class="headerlink" title="1. ps命令"></a>1. ps命令</h5><p>ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。 </p><p><u>常用选项</u>包括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -</span><br><span class="line">1、-a显示所有用户的进程</span><br><span class="line">2、-u显示用户名和启动时间</span><br><span class="line">3、-x显示所有进程，包括没有控制终端的进程</span><br><span class="line">4、-e显示所有进程，包括没有控制终端的进程，较x选项，信息更为简略</span><br><span class="line">5、-l显示进程详细信息，按长格式显示</span><br></pre></td></tr></table></figure><p><u>常用组合</u></p><table><thead><tr><th><strong>ps -au</strong> 显示所有用户进程，并给出用户名和启动时间等详细信息</th></tr></thead><tbody><tr><td><strong>ps -aux</strong> 显示所有用户进程，包括没有控制终端的进程，并给出用户和和启动埋单等详细信息</td></tr><tr><td><strong>ps -el</strong> 按长格式显示进程详细信息</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上述命令可能出现的字段含义</span></span><br><span class="line">USER: 进程所有者</span><br><span class="line">PID: 进程号</span><br><span class="line">PPID: 进程的父进程ID</span><br><span class="line">%CPU:  CPU占用率</span><br><span class="line">C: 进程的CPU占用率</span><br><span class="line">%MEM: 内存占用率</span><br><span class="line">VSZ: 表示如果一个程序完全驻留在内存的话需要占用多少内存空间;</span><br><span class="line">RSS: 指明了当前实际占用了多少内存;</span><br><span class="line">TTY: 终端的次要装置号码 (minor device number of tty)</span><br><span class="line">F：进程的标志</span><br><span class="line">S：进程的状态</span><br><span class="line">STAT: 该进程程的状态，有以下值</span><br><span class="line">D: 不可中断的静止</span><br><span class="line">R: 正在执行中</span><br><span class="line">S: 静止状态</span><br><span class="line">T: 暂停执行</span><br><span class="line">Z: 不存在但暂时无法消除</span><br><span class="line">W: 没有足够的记忆体分页可分配</span><br><span class="line">&lt;: 高优先序的进程</span><br><span class="line">N: 低优先序的进程</span><br><span class="line">L: 有记忆体分页分配并锁在记忆体内</span><br><span class="line">PRI：进程的优先权</span><br><span class="line">NI：进程的Nice值</span><br><span class="line">ADDR：进程的地址空间</span><br><span class="line">SZ：进程占用内存的大小</span><br><span class="line">WCHAN：进程当前是否在运行</span><br><span class="line">TTY：进程所属终端</span><br><span class="line">START: 进程开始时间</span><br><span class="line">TIME: 执行的运行时间</span><br><span class="line">COMMAND：所执行的指令</span><br><span class="line">CMD：进程的命令</span><br></pre></td></tr></table></figure><h5 id="2-kill-pidof-pkill-命令"><a href="#2-kill-pidof-pkill-命令" class="headerlink" title="2. kill / pidof / pkill 命令"></a>2. kill / pidof / pkill 命令</h5><p>有时候某个进程可能会长期占用CPU资源或无法正常执行或超出运行时间等，此时可能希望人工干预直接将进程杀死，这时候kill命令可以派上用场</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、<span class="built_in">kill</span> pid 直接杀死进程，但不能保证一定能杀死</span><br><span class="line">2、<span class="built_in">kill</span> -9 pid 强制杀死进程</span><br><span class="line">3、pidof命令用于查看某个进程的进程号（例如：pidof mysqld）</span><br><span class="line">4、pkill命令可以按照进程名杀死进程。pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用<span class="built_in">kill</span>来杀掉</span><br></pre></td></tr></table></figure><h5 id="3-进程切换"><a href="#3-进程切换" class="headerlink" title="3. 进程切换"></a>3. 进程切换</h5><p>前台进程指的是进程在执行时会将命令行阻塞，直到进程执行完毕；后台进程指的是进程在执行时不会阻塞当前命令行，而是在系统后台执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、ctrl + c 终止进程</span><br><span class="line">2、ctrl + z 挂起进程</span><br><span class="line">3、fg命令将进程转换到前台执行</span><br><span class="line">4、bg命令将进程转换到后台执行</span><br><span class="line">5、jobs命令查看任务</span><br></pre></td></tr></table></figure><h5 id="4-top命令"><a href="#4-top命令" class="headerlink" title="4. top命令"></a>4. top命令</h5><p>top 命令可以定期显示所有正在运行和实际运行并且更新到列表中，它显示出 CPU 的使用、内存的使用、交换内存、缓存大小、缓冲区大小、过程控制、用户和更多命令。它也会显示内存和 CPU 使用率过高的正在运行的进程。</p><p>按q键退出查看.</p><h5 id="5-pstree命令"><a href="#5-pstree命令" class="headerlink" title="5. pstree命令"></a>5. pstree命令</h5><p>将进程间的关系以树结构的形式展示，能清楚看各进程之间的父子关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pstree ：以树状形式显示进程</span><br><span class="line">pstree -p ： 以树状形式显示进程，并且显示进程号</span><br></pre></td></tr></table></figure><h5 id="6-JPS命令"><a href="#6-JPS命令" class="headerlink" title="6. JPS命令"></a>6. JPS命令</h5><p>JPS命令是JDK提供的一个检查系统是否启动了JVM进程的一个进程。不是linux系统自带的。主要任务就是用来检查java进程的。</p><h3 id="7-计划任务"><a href="#7-计划任务" class="headerlink" title="7. 计划任务"></a>7. 计划任务</h3><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>计划任务在Linux的体现主要分为at和crontab，其中：</p><ul><li><strong>at</strong>：通过at命令安排任务在某一时刻执行一次</li><li><strong>crontab</strong>：通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</li></ul><h5 id="命令服务管理crontab"><a href="#命令服务管理crontab" class="headerlink" title="命令服务管理crontab"></a>命令服务管理crontab</h5><p>在CentOS系统上，crontab服务的名称叫做<strong>crond</strong></p><ol><li><p>安装</p><p><code>yum -y install crontabs</code></p></li><li><p>服务操作说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service crond start <span class="comment">#启动服务</span></span><br><span class="line">service crond stop   <span class="comment">#关闭服务</span></span><br><span class="line">service crond restart <span class="comment">#重启服务</span></span><br><span class="line">service crond reload <span class="comment">#重新载入配置</span></span><br><span class="line">service crond status <span class="comment">#服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crontab服务是否已设置为开机启动，执行命令：</span></span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入开机自动启动：</span></span><br><span class="line">chkconfig --level 35 crond on</span><br></pre></td></tr></table></figure></li></ol><h5 id="crontab功能使用"><a href="#crontab功能使用" class="headerlink" title="crontab功能使用"></a>crontab功能使用</h5><ul><li><p>命令格式    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file</span><br><span class="line">crontab [-u user] [ -e | -l | -r ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab 参数说明：</span></span><br><span class="line">-u user：用来设定某个用户的crontab服务，例如，”-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</span><br><span class="line">file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。</span><br><span class="line">-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</span><br><span class="line">-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</span><br><span class="line">-r：删除定时任务配置，从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</span><br><span class="line">-i：在删除用户的crontab文件时给确认提示。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令示例：</span></span><br><span class="line">crontab file [-u user]<span class="comment">## 用指定的文件替代目前的crontab。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须掌握：</span></span><br><span class="line">crontab -l [-u user]<span class="comment">## 列出用户目前的crontab. </span></span><br><span class="line">crontab -e [-u user]<span class="comment">## 编辑用户目前的crontab.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过crontab添加的计划任务都会存储在/var/spool/cron/目录里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前服务状态</span></span><br><span class="line">service crond status</span><br><span class="line"><span class="comment"># 操作服务</span></span><br><span class="line">/sbin/service crond start    //启动服务</span><br><span class="line">/sbin/service crond stop     //关闭服务</span><br><span class="line">/sbin/service crond restart  //重启服务</span><br><span class="line">/sbin/service crond reload   //重新载入配置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开机启动服务</span></span><br><span class="line">ntsysv  <span class="comment"># 退出时, 按tab切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机自动启动</span></span><br><span class="line">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure></li><li><p>配置说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本格式 : </span></span><br><span class="line">*　　*　　*　　*　　*　　<span class="built_in">command</span> </span><br><span class="line">分　 时　 日　 月　 周　 命令 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个小时的第几分钟执行该任务. 其它的类似</span></span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示  </span><br><span class="line"></span><br><span class="line">第2列表示小时0～23（0表示0点） 7-9表示：8点到10点之间</span><br><span class="line">第3列表示日期1～31 </span><br><span class="line">第4列表示月份1～12 </span><br><span class="line">第5列标识号星期0～6（0表示星期天） </span><br><span class="line">第6列要运行的命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记住几个特殊符号的含义:</span></span><br><span class="line">“*”代表取值范围内的数字,</span><br><span class="line">“/”代表”每”,</span><br><span class="line">“-”代表从某个数字到某个数字,</span><br><span class="line">“,”分开几个离散的数字</span><br></pre></td></tr></table></figure></li><li><p>配置示例 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *　　*　　*　　*　　*　　command </span></span><br><span class="line"><span class="comment"># 分　 时　 日　 月　 周　 命令 </span></span><br><span class="line"></span><br><span class="line">*/1 * * * * date &gt;&gt; /root/date.txt</span><br><span class="line">上面的例子表示每分钟执行一次date命令</span><br><span class="line">可用 tail -f查看</span><br><span class="line"></span><br><span class="line">30 21 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每晚的21:30重启apache</span><br><span class="line"></span><br><span class="line">45 4 1,10,22 * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache</span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart </span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache</span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache</span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache</span><br><span class="line"></span><br><span class="line">* */1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子每一小时重启apache</span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子每月的4号与每周一到周三的11点重启apache</span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart </span><br><span class="line">上面的例子一月一号的4点重启apache</span><br></pre></td></tr></table></figure></li><li><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/5e22b58a-8b06-41e5-ad17-6fe24502cc0d/" target="_blank" rel="noopener">更详细的见这里</a></p></li></ul><h3 id="8-Linux虚拟主机集群测试环境基本搭建"><a href="#8-Linux虚拟主机集群测试环境基本搭建" class="headerlink" title="8. Linux虚拟主机集群测试环境基本搭建"></a>8. Linux虚拟主机集群测试环境基本搭建</h3><h4 id="1-第一台虚拟主机的静态ip配置-针对于mac环境"><a href="#1-第一台虚拟主机的静态ip配置-针对于mac环境" class="headerlink" title="1. 第一台虚拟主机的静态ip配置(针对于mac环境)"></a>1. 第一台虚拟主机的静态ip配置(针对于mac环境)</h4><ol><li><p>执行<code>ifconfig</code>命令, 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">shixuanji@x:~|⇒  ifconfig</span><br><span class="line">lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384</span><br><span class="line">options=1203&lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&gt;</span><br><span class="line">inet 127.0.0.1 netmask 0xff000000</span><br><span class="line">inet6 ::1 prefixlen 128</span><br><span class="line">inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280</span><br><span class="line">stf0: flags=0&lt;&gt; mtu 1280</span><br><span class="line">EHC29: flags=0&lt;&gt; mtu 0</span><br><span class="line">EHC26: flags=0&lt;&gt; mtu 0</span><br><span class="line">XHC20: flags=0&lt;&gt; mtu 0</span><br><span class="line">en0: flags=8823&lt;UP,BROADCAST,SMART,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 60:03:08:a1:ac:ee</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect (&lt;unknown <span class="built_in">type</span>&gt;)</span><br><span class="line">status: inactive</span><br><span class="line">p2p0: flags=8802&lt;BROADCAST,SIMPLEX,MULTICAST&gt; mtu 2304</span><br><span class="line">ether 02:03:08:a1:ac:ee</span><br><span class="line">media: autoselect</span><br><span class="line">status: inactive</span><br><span class="line">awdl0: flags=8902&lt;BROADCAST,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1484</span><br><span class="line">ether 72:25:b2:c8:2a:03</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: inactive</span><br><span class="line">en1: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=60&lt;TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:00</span><br><span class="line">media: autoselect &lt;full-duplex&gt;</span><br><span class="line">status: inactive</span><br><span class="line">en2: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=60&lt;TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:01</span><br><span class="line">media: autoselect &lt;full-duplex&gt;</span><br><span class="line">status: inactive</span><br><span class="line">bridge0: flags=8822&lt;BROADCAST,SMART,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=63&lt;RXCSUM,TXCSUM,TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:00</span><br><span class="line">Configuration:</span><br><span class="line">id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0</span><br><span class="line">maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200</span><br><span class="line">root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0</span><br><span class="line">ipfilter disabled flags 0x2</span><br><span class="line">member: en1 flags=3&lt;LEARNING,DISCOVER&gt;</span><br><span class="line">        ifmaxaddr 0 port 10 priority 0 path cost 0</span><br><span class="line">member: en2 flags=3&lt;LEARNING,DISCOVER&gt;</span><br><span class="line">        ifmaxaddr 0 port 11 priority 0 path cost 0</span><br><span class="line">media: &lt;unknown <span class="built_in">type</span>&gt;</span><br><span class="line">status: inactive</span><br><span class="line">utun0: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 2000</span><br><span class="line">inet6 fe80::2ed8:c28:27b2:f5d2%utun0 prefixlen 64 scopeid 0xd</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">vmnet1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:01</span><br><span class="line">inet 172.16.63.1 netmask 0xffffff00 broadcast 172.16.63.255</span><br><span class="line">vmnet8: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:08</span><br><span class="line">inet 192.168.170.1 netmask 0xffffff00 broadcast 192.168.170.255</span><br><span class="line">en4: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=3&lt;RXCSUM,TXCSUM&gt;</span><br><span class="line">ether 00:0e:c6:cc:ae:d7</span><br><span class="line">inet6 fe80::1c60:7fe2:3947:4ec0%en4 prefixlen 64 secured scopeid 0x11</span><br><span class="line">inet 192.168.63.148 netmask 0xffffff00 broadcast 192.168.63.255</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect (100baseTX &lt;full-duplex,flow-control&gt;)</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure></li><li><p><strong>找到最后的<code>vmnet8</code>,   其中的 <code>inet</code> 就是虚拟主机的网段,  配置虚拟主机的静态ip的时候,  就配置此网段内的. 广播地址 <code>broadcast</code>也是虚拟主机NAT的广播地址, 配置时可以不填</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmnet8: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:08</span><br><span class="line">inet 192.168.170.1 netmask 0xffffff00 broadcast 192.168.170.255</span><br></pre></td></tr></table></figure></li><li><p><strong>修改虚拟机网卡配置<code>vi /etc/sysconfig/network-scripts/ifcfg-eth</code>, 做如下配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:D6:C7:0E</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=bebc1b63-4f20-405a-860a-32d0d8211582</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static<span class="comment"># ip类型</span></span><br><span class="line">IPADDR=192.168.170.6<span class="comment"># ip地址, 与 vmnet8 在同一网段</span></span><br><span class="line">NETMASK=255.255.255.0    <span class="comment"># 子网掩码</span></span><br><span class="line">GATEWAY=192.168.170.2    <span class="comment"># 网关, 跟 ip在同一网段</span></span><br><span class="line">DNS1=192.168.170.2<span class="comment"># 与 ip 同一网段 </span></span><br><span class="line">DNS2=8.8.8.8    <span class="comment"># google的 dns</span></span><br></pre></td></tr></table></figure></li><li><p>重启网络服务</p><p><code>service network restart</code></p></li></ol><h4 id="2-复制原本的虚拟主机"><a href="#2-复制原本的虚拟主机" class="headerlink" title="2. 复制原本的虚拟主机"></a>2. 复制原本的虚拟主机</h4><ol><li>复制虚拟主机1到2</li><li><p>按照原虚拟主机的root用户名&amp;密码登录2</p><h4 id="3-修改新机网卡"><a href="#3-修改新机网卡" class="headerlink" title="3. 修改新机网卡"></a>3. 修改新机网卡</h4></li><li><p>修改网卡<code>vi /etc/udev/rules.d/70-persistent-net.rules</code>, 删除<code>eth0</code>所在的整个段落, 把下面的<code>eth1</code>改为<code>eth0</code>, 保存退出</p></li><li>修改网卡配置<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>, 如果有<code>UUID, HARDDR</code>, 删掉,  <code>IPADDR</code>改为与原虚拟主机不同的地址, 但要在同一网段, <code>BOOTPROTO</code>改为<code>static</code><h4 id="4-修改新机hostname"><a href="#4-修改新机hostname" class="headerlink" title="4. 修改新机hostname"></a>4. 修改新机hostname</h4></li></ol><p>​    修改<strong><em>hostname</em></strong>,  <code>/etc/sysconfig/network</code>, 把<code>HOSTNAME</code>改为要修改的名字</p><h4 id="5-免密登录"><a href="#5-免密登录" class="headerlink" title="5. 免密登录"></a>5. 免密登录</h4><ol><li>新机生成自己公钥 <code>ssh-kepygen</code>, 注意: 如果原本主机中已经生成, 此处在提示<code>verwrite (y/n)?</code>的时候要选择y, 才会重新生成覆盖</li><li><p>把新主机公钥发送给其它机器 <code>ssh-copy-id root@xxx(其它主机ip)</code>, 此命令相当于 下面2条命令的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt; authorized_keys</span><br><span class="line">scp -r authorized_keys root@192.168.123.202:/root/.ssh/</span><br></pre></td></tr></table></figure></li><li><p>其他主机也把公钥发给新主机, 此时就可以实现主机间的免密登录了.</p></li></ol><h4 id="6-功能增强-可选"><a href="#6-功能增强-可选" class="headerlink" title="6. 功能增强(可选)"></a>6. 功能增强(可选)</h4><ol><li>可以在 每台机器中设置<strong><em>host</em></strong>别名, <code>vi /etc/hosts</code>,  加上<code>xxx.xxx.xx.xxx  cts1/2/3...</code>, 这样在访问其他主机时, 可以直接用别名替代域名</li><li>如果是用的<code>zsh</code>的<strong><em>shell</em></strong>,  可以在所有主机的 <code>~.zshrc</code>中, 添加<code>alias login1=&#39;ssh root@cts1&#39; &gt;&gt; ~/.zshrc</code>, 这样可以直接 用 <code>login1</code>登录到对应的主机.</li></ol><hr><h3 id="9-安装-使用-zsh-amp-oh-my-zsh-amp-相关插件"><a href="#9-安装-使用-zsh-amp-oh-my-zsh-amp-相关插件" class="headerlink" title="9. 安装, 使用 zsh &amp; oh-my-zsh &amp;相关插件"></a>9. 安装, 使用 zsh &amp; oh-my-zsh &amp;相关插件</h3><h4 id="主骨架安装-amp-介绍"><a href="#主骨架安装-amp-介绍" class="headerlink" title="主骨架安装&amp;介绍"></a>主骨架安装&amp;介绍</h4><ol><li><p>安装zsh套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh -y</span><br></pre></td></tr></table></figure></li><li><p>安装 oh-my-zsh套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>zsh 的一些基本配置操作, <a href="#zsh常用插件安装">常用插件安装见这里!</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看oh-my-zsh 的主题</span></span><br><span class="line">ls ~/.oh-my-zsh/themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以更改为random, 这样会随机显示, 很有乐趣, 直接输入zsh也会切换</span></span><br><span class="line">vi ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"random"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加plugin, 按照对应方式安装</span></span><br><span class="line">plugins=(git ... ... )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置zsh为默认的shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加alias 到 ~/.zshrc</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> zshconfig=<span class="string">'vi ~/.zshrc'</span></span><br><span class="line"><span class="built_in">alias</span> vimconfig=<span class="string">'vi ~/.vimrc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 oh-my-zsh</span></span><br><span class="line">uninstall_oh_my_zsh zsh</span><br></pre></td></tr></table></figure></li><li><p><strong>zsh 的一些骚气操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 兼容 bash, 这个就不用说了</span><br><span class="line">2. 输入某条命令, 比如 cat, 然后用上下键, 可以翻阅所有执行过的命令</span><br><span class="line">3. 各种补全, 输入任何命令, 按 2下 tab键, 下面会出现所有可能的补全, 可以 tab, 或 上下左右切换.</span><br><span class="line">4. 比如要杀掉进程java, 原来是需要  ps aux | grep java, 查进程的 PID，然后<span class="built_in">kill</span> PID; 现在只需要 <span class="built_in">kill</span> java, 然后按下 tab, java会被替换为 对应的 PID, 点回车, <span class="built_in">kill</span> !</span><br><span class="line">5. 目录浏览和跳转, 输入 d, 可以列出在这个回话中访问过的目录列表, 再输入列表前的序号, 即可直接跳转.</span><br><span class="line">6. 在当前目录下输入 .. 或 ... , 或者直接输入目录名, 都可以直接跳转, 甚至都不需要使用 <span class="built_in">cd</span>命令了.</span><br><span class="line">7. 通配符搜索：ls -l */.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find，文件太多就歇菜了.</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">zsh主题介绍</a>, <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">zsh插件介绍</a></p></li></ol><hr><h4 id="zsh常用插件安装"><a href="#zsh常用插件安装" class="headerlink" title="zsh常用插件安装"></a><strong>zsh常用插件安装</strong></h4><h5 id="安装-zsh-autosuggestions"><a href="#安装-zsh-autosuggestions" class="headerlink" title="安装 zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener">安装 <code>zsh-autosuggestions</code></a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">方式1: </span><br><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到.zshrc, 这样就不用每次source了</span></span><br><span class="line">添加 <span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh 到 .zshrc 尾部</span><br><span class="line">plugins=() 中添加上 zsh-autosuggestions, 用空格隔开即可</span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">方式2: 官方建议</span><br><span class="line"><span class="comment"># 少了添加source到 ~/.zshrc这一步, 猜想是会按照默认的路径加载? </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.Add the plugin to the list of plugins for Oh My Zsh to load:</span></span><br><span class="line">plugins=(zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.Start a new terminal session.</span></span><br></pre></td></tr></table></figure><p>#####<a href="https://github.com/wting/autojump" target="_blank" rel="noopener">安装 <code>autojump</code></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/joelthelion/autojump.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装脚本</span></span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成在~/下面有.autojump目录, 在.zshrc中加一句</span></span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来可以愉悦的使用 j 了</span></span><br></pre></td></tr></table></figure><h5 id="安装-zsh-syntax-highlighting"><a href="#安装-zsh-syntax-highlighting" class="headerlink" title="安装 zsh-syntax-highlighting "></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener">安装 <strong><code>zsh-syntax-highlighting</code></strong> </a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到 ~/.zshrc 目录, 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># source the script 到 ~/.zshrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前 shell生效</span></span><br><span class="line"><span class="built_in">source</span> ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-系统服务管理&quot;&gt;&lt;a href=&quot;#1-系统服务管理&quot; class=&quot;headerlink&quot; title=&quot;1. 系统服务管理&quot;&gt;&lt;/a&gt;1. 系统服务管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;检查本机&lt;code&gt;httpd&lt;/code&gt;服务是否开启, 使用命令&lt;cod
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
