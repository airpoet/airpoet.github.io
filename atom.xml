<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A.P的文艺杂谈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://airpoet.github.io/"/>
  <updated>2018-06-03T10:06:14.531Z</updated>
  <id>https://airpoet.github.io/</id>
  
  <author>
    <name>airpoet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop学习笔记-3 HDFS 原理剖析</title>
    <link href="https://airpoet.github.io/2018/06/03/Hadoop/Study/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-HDFS%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>https://airpoet.github.io/2018/06/03/Hadoop/Study/Hadoop学习笔记-3-HDFS原理剖析/</id>
    <published>2018-06-03T09:12:34.396Z</published>
    <updated>2018-06-03T10:06:14.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HDFS体系结构"><a href="#1-HDFS体系结构" class="headerlink" title="1.  HDFS体系结构"></a>1.  HDFS体系结构</h1><p>主从。。。</p><h2 id="2-NameNode"><a href="#2-NameNode" class="headerlink" title="2.NameNode"></a>2.NameNode</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>[x] 是整个文件系统的管理节点。它维护着整个文件系统的文件目录树，文件/目录的元信息和每个文件对应的数据块列表。接收用户的操作请求。 </p></li><li><p>[x] <strong>在<code>hdfs-site.xml</code>中的<code>dfs.namenode.name.dir</code>属性</strong> </p></li><li><p>[x] 文件包括： </p><ul><li><p>[x] 文件包括:</p><p><strong>①fsimage</strong>:元数据镜像文件。存储某一时段<code>NameNode</code>内存元数据信息。</p><p><strong>②edits</strong>:操作日志文件。</p><p><strong>③fstime</strong>:保存最近一次<code>checkpoint</code>的时间</p><p><strong>以上这些文件是保存在linux的文件系统中。</strong></p></li></ul></li></ul><ol><li><p>查看 <code>NameNode中</code> <code>fsimage</code> 的内容 </p><ul><li><p>查看 <strong>fsimage镜像文件</strong>内容<code>Usage: bin/hdfs oiv [OPTIONS] -i INPUTFILE -o  OUTPUTFILE</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用离线的查看器 输出到网页查看</span></span><br><span class="line">oiv -i hadoopdata/namenode/current/fsimage_0000000000000000250 -o 0000000000000000250</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另起一个窗口查看</span></span><br><span class="line">hadoop fs -ls -R webhdfs://127.0.0.1:5978</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以知道数据存在那个哪个 fsimage 镜像中</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-HDFS体系结构&quot;&gt;&lt;a href=&quot;#1-HDFS体系结构&quot; class=&quot;headerlink&quot; title=&quot;1.  HDFS体系结构&quot;&gt;&lt;/a&gt;1.  HDFS体系结构&lt;/h1&gt;&lt;p&gt;主从。。。&lt;/p&gt;
&lt;h2 id=&quot;2-NameNode&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Hadoop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>▍《回答》 -北岛</title>
    <link href="https://airpoet.github.io/2018/06/03/Poetry/%E5%9B%9E%E7%AD%94/"/>
    <id>https://airpoet.github.io/2018/06/03/Poetry/回答/</id>
    <published>2018-06-03T06:40:41.275Z</published>
    <updated>2018-06-03T06:42:39.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><br></p><p>卑鄙是卑鄙者的通行证，<br>高尚是高尚者的墓志铭，<br>看吧，在那镀金的天空中，<br>飘满了死者弯曲的倒影。</p><p><br></p><p>冰川纪过去了，<br>为什么到处都是冰凌？<br>好望角发现了，<br>为什么死海里千帆相竞？</p><p><br></p><p>我来到这个世界上，<br>只带着纸、绳索和身影，<br>为了在审判之前，<br>宣读那些被判决的声音。</p><p><br></p><p>告诉你吧，世界<br>我–不–相–信！<br>纵使你脚下有一千名挑战者，<br>那就把我算作第一千零一名。</p><p><br></p><p>我不相信天是蓝的，<br>我不相信雷的回声，<br>我不相信梦是假的，<br>我不相信死无报应。</p><p><br></p><p>如果海洋注定要决堤，<br>就让所有的苦水都注入我心中，<br>如果陆地注定要上升，<br>就让人类重新选择生存的峰顶。</p><p><br></p><p>新的转机和闪闪星斗，<br>正在缀满没有遮拦的天空。<br>那是五千年的象形文字，<br>那是未来人们凝视的眼睛。</p><p><br></p><p>作者 / 北岛</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;卑鄙是卑鄙者的通行证，&lt;br&gt;高尚是高尚者的墓志铭，&lt;br&gt;看吧，在那镀金的天空中，&lt;br&gt;飘满了死者弯曲的倒影。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;冰川纪过去了，&lt;br
      
    
    </summary>
    
      <category term="文艺" scheme="https://airpoet.github.io/categories/%E6%96%87%E8%89%BA/"/>
    
      <category term="诗歌" scheme="https://airpoet.github.io/categories/%E6%96%87%E8%89%BA/%E8%AF%97%E6%AD%8C/"/>
    
    
      <category term="诗歌" scheme="https://airpoet.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop学习笔记-2 HDFS基础入门</title>
    <link href="https://airpoet.github.io/2018/06/02/Hadoop/Study/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-HDFS%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://airpoet.github.io/2018/06/02/Hadoop/Study/Hadoop学习笔记-2-HDFS基础入门/</id>
    <published>2018-06-02T07:07:33.222Z</published>
    <updated>2018-06-03T09:11:56.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop的核心组件-之-HDFS"><a href="#Hadoop的核心组件-之-HDFS" class="headerlink" title="Hadoop的核心组件 之 HDFS"></a>Hadoop的核心组件 之 HDFS</h1><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><h3 id="1-HDFS是什么"><a href="#1-HDFS是什么" class="headerlink" title="1. HDFS是什么:"></a>1. HDFS是什么:</h3><ul><li>分布式文件系统</li></ul><h3 id="2-HDFS-设计思想"><a href="#2-HDFS-设计思想" class="headerlink" title="2. HDFS 设计思想"></a>2. HDFS 设计思想</h3><ul><li>分而治之,  切分存储, 当一个文件过大的时候, 一个节点存储不了, 采用切分存储</li><li><strong>分块存储</strong>: 每一个块叫做 block<ul><li>如果一个8T的数据, 这个怎么分合适???<ul><li>设置分块的时候要<strong>考虑</strong>一个事情 : <strong>负载均衡</strong></li><li>块的大小不能太大, 太大会造成负载不均衡</li><li><strong>hadoop2.x</strong> 中默认的切分的<strong>块的大小</strong>是: <strong>128M</strong>, 1.x中默认的是64M</li><li>如果一个文件<strong>不足128M, 也会单独存一个快</strong>, <strong>快的大小就是存储数据的实际大小</strong></li></ul></li><li>这个分块存储思想中, 如果一个块的存储节点宕机了, 这个时候, 数据的安全性得不到保证了</li></ul></li><li>HDFS中默认块的存储采用<strong>备份机制</strong><ul><li><strong>默认的备份个数是3个</strong>(总共存的, 存到datanode上的, namenode不存),  之前自己配的是2个, 所有备份相同地位是相同的.</li><li>相同的数据块的备份一定存储在不同的节点上</li><li>如果节点总共2个,  <code>dfs.replication=3</code> 副本个数是3个,  实际存储2个, 另一个进行<strong>记账</strong>,  当集群节点个数大于3个时, 会复制这个副本, 最终达到3个</li><li>假设集群中的节点4个, 副本3个, 有一个副本的机器宕机了, 这个时候发现副本的个数 小于 设定的个数,  就会进行<strong>复制, 达到3个副本</strong>,</li><li>如果 <em>这个时候</em>, 刚才宕机的节点又恢复了, 这个时候集群副本个数为4了,  集群会等待一段时间, 如果发现还是4个, 就会<strong>删除</strong>一个副本, <strong>达到3个</strong>(<u>设定值</u>)</li><li>备份越多越好吗?<ul><li>理论上副本数越多, 数据安全性越高</li><li>但是副本数越多, 会占用过多的存储资源, 会造成集群的维护变得越困难<ul><li>100 个节点, 50个副本,  在这50个副本中, 随时都有可能宕机, hdfs就需要维护副本</li></ul></li><li>一般情况下, 3个就可以了</li><li>hadoop是基于廉价的pc机设计的, 会造成机器随时可能宕机</li></ul></li></ul></li><li>HDFS的<strong>目录结构</strong><ul><li>hdfs的目录结构与linux 操作系统类似,  以 <code>/</code>为跟节点,  我们将这个目录🌲称为<code>抽象目录树</code></li><li>因为<strong>hdfs的目录结构</strong>代表的是所有数据节点的<strong>抽象出来的目录</strong>,  不代表任何一个节点<ul><li>hdfs:  /hadoop.zip   500M  被分成4个块存储</li><li>hdfs中存储的数据块 是有编号的, blk_1,  blk_2, blk_3,  blk_4</li><li>/spark.zip  300M  3个块, blk_5  blk_6  blk_7</li><li>底层存储的时候, 每一个block都有一个唯一的id</li><li>hdfs的数据底层存储的时候吗, 还是存在真正的物理节点上.</li></ul></li></ul></li></ul><h3 id="3-HDFS-的整体结构"><a href="#3-HDFS-的整体结构" class="headerlink" title="3. HDFS 的整体结构"></a>3. HDFS 的整体结构</h3><p><strong>主从结构:  一个主节点,  多个从节点</strong></p><h4 id="namenode"><a href="#namenode" class="headerlink" title="namenode:"></a>namenode:</h4><ul><li>用于存储元数据, 包括: <ul><li>抽象目录树</li><li>存储数据和block的对应关系</li><li>block存储的位置</li></ul></li><li>处理客户端的读写请求<ul><li>读: 下载</li><li>写: 上传</li></ul></li></ul><h4 id="datanode"><a href="#datanode" class="headerlink" title="datanode"></a>datanode</h4><ul><li>负责真正的数据存储, 存储数据的block</li><li>真正处理读写</li></ul><h4 id="secondarynamenode"><a href="#secondarynamenode" class="headerlink" title="secondarynamenode:"></a>secondarynamenode:</h4><ul><li>冷备份节点: 助理<ul><li>当namenode宕机的时候,  secondarynamenode不能主动切换为 namenode, 但是 secondarynamenode中存储的数据与namenode相同.</li></ul></li><li>主要作用: <ul><li>namenode宕机的时候, 帮助namenode恢复</li><li>帮助namenode做一些事情, 分担namenode的压力</li></ul></li></ul><h3 id="4-HDFS优缺点"><a href="#4-HDFS优缺点" class="headerlink" title="4. HDFS优缺点:"></a>4. HDFS优缺点:</h3><ul><li><p>优点: </p><ol><li><p>可构建在廉价机器上, 成本低,  通过多副本提高可靠性, 提供了容错和恢复机制</p></li><li><p>高容错性</p><ul><li>容错性: 数据访问上, 一个节点数据丢失, 不影响整体的数据访问</li><li>数据自动保存多个副本, 副本丢失后, 自动恢复, 最终恢复到用户配置的副本个数</li></ul></li><li><p>适合批处理, 适合离线数据处理</p><ul><li>移动计算而非数据, 数据位置暴露给计算框架</li></ul></li><li><p>适合大数据处理</p><ul><li>GB,  TB 甚至 PB 级数据, 百万规模以上的文件数量, 10k+ 节点规模</li></ul></li><li><p>流式文件访问, 不支持数据修改, hdfs用于数据存储</p><ul><li>一次性写入, 多次读取, 保证数据一致性</li></ul></li></ol></li></ul><ul><li><p><strong>缺点:</strong> </p><ol><li>不支持低延迟的数据访问, 不支持 <strong>实时/近实时</strong> 数据访问, 因为涉及到多轮<code>RPC</code>调用<ol><li>向 NameNode 寻址..</li><li>拿到地址后， 向 DataNode 请求数据..</li></ol></li><li><strong>不擅长存储大量的小文件</strong>–kb级别的<ul><li>寻址时间可能大于读取数据的时间, 不划算<ul><li>进行数据访问的时候先找元数据</li><li>元数据是和block对应的, 1个block块对应一条元数据</li><li>1000w个1kb的文件, 存了1000w个块 — 1000w元数据</li><li>在进行数据访问的时候可能花了 1s 的时间, 总体上不划算</li></ul></li><li>这样会造成元数据存储量过大, 增加namenode的压力<ul><li>在hdfs中一般情况下, 一条元数据大小 150byte 左右</li><li>1000w条元数据 — 1000w * 150,  1.5G左右</li></ul></li></ul></li><li><strong>不支持文件内容修改</strong>, 仅<strong>仅支持</strong>文件<strong>末尾追加</strong> <code>append</code>， 一个文件同时只能有一个写者，<strong>不支持并发操作</strong></li></ol></li></ul><h3 id="5-HDFS-的-常用命令"><a href="#5-HDFS-的-常用命令" class="headerlink" title="==5. HDFS 的 常用命令:=="></a>==5. HDFS 的 常用命令:==</h3><p><strong>HDFS归根结底就是一个文件系统,  类似于 linux,  需要用命令来操作</strong></p><h4 id="1-hapdoop-fs-命令"><a href="#1-hapdoop-fs-命令" class="headerlink" title="1. hapdoop fs 命令"></a>1. <code>hapdoop fs</code> 命令</h4><blockquote><p><code>hadoop fs</code> /  <code>hdfs dfs</code> 效果是一样的</p><p>在hadoop中查看, 只有绝对路径的访问方式</p></blockquote><ol><li><p>查看帮助</p><ul><li><code>hadoop fs -help</code> 查看所有 <code>hadoop fs</code>的帮助</li><li><code>hadoop fs -help ls</code> 查看 <code>fs</code>下的 <code>ls</code>的帮助</li></ul></li><li><p><strong>列出根目录</strong>: <code>hadoop fs -ls /</code></p><ul><li><code>hadoop fs -ls -R /</code> 递归展示</li><li><code>hadoop fs -ls -R -h /</code>友好展示， 展示文件大小单位</li><li><strong>如果不指定目录， 会默认找当前用户xx对应的<code>/user/xx</code>的目录</strong></li></ul></li><li><p><strong>递归创建 -mkdir -p</strong>:  </p><ul><li><code>hadoop fs -mkdir -p /aa/bb/cc/dd</code></li><li>不加 -p  为普通创建</li></ul></li><li><p><strong>创建空文件<code>-touchz</code></strong></p><ul><li>类似于 Linux 下的 touch</li></ul></li><li><p><strong>上传  put</strong>: <code>[-put [-f][-p] [-l] &lt;localsrc&gt; ... &lt;dst&gt;]</code></p><ul><li>上传一个: <code>hadoop fs -put hadoop-2.7.6.tar.gz /ss</code></li><li>上传多个: <code>hadoop fs -put aa.txt bb.txt /ss</code></li></ul></li><li><p><strong>下载 get</strong></p><ul><li><code>hadoop fs -get hdfs路径 本地路径</code></li></ul></li><li><p><strong>合并下载</strong></p><ul><li><code>hadoop fs -getmerge /ss/aa.txt /ss/bb.txt /home/ap/cc.txt</code></li><li>会将最后一个路径之前8的当做需要合并的文件, 最后一个路径中指定的文件就是合并生成的文件</li></ul></li><li><p><strong>查看文件内容 cat</strong></p><ul><li><code>-cat</code> 查看文件内容</li><li><code>-text</code>也是类似</li></ul></li><li><p><strong>删除文件  rm</strong></p><ul><li><del>rm -rf (错误的)</del></li><li>rm -r(递归)  -f(强制)</li><li>文件<code>hadoop fs -rm -f /ss/aa.txt</code></li><li>文件夹 <code>hadoop fs -rm -f -r /aa</code></li></ul></li><li><p><strong>mv 修改名字, 移动</strong></p><ul><li><p>移动的文件<strong>从 hdfs 到 hdfs</strong></p></li><li><p><code>hadoop fs -mv  ..  ..</code></p></li></ul></li><li><p><strong>cp 复制</strong></p><ul><li><code>hadoop fs -cp /hdfsfile /hdfsfile</code>: 从 hdfs 复制到 hdfs<ul><li>参数 <strong>-p</strong>  ： 复制后<strong>保持文件的原本属性</strong>, 时间戳， 权限等<ul><li><code>Passing -p preserves status [topax] (timestamps, ownership, permission, ACLs, XAttr).</code></li></ul></li><li>参数 <strong>-f</strong>   :   已有同名文件的话， 直接<strong>覆盖</strong></li></ul></li></ul></li><li><p><strong>在末尾追加</strong>: <code></code>-appendToFile 本地文件  hdfs文件` </p><ul><li>将本地文件bb.txt 追加到 htfd的 /aa/aa.txt 上<ul><li><code>hadoop fs -appendToFile aa.txt /ss/bb.txt</code></li></ul></li><li>从命令行追加 , 但是不知道怎么结束， 先存疑？？<ul><li><code></code>hadoop fs -appendToFile - /a.txt`</li></ul></li><li>这个追加是在原始块的末尾追加的. 会改变集群上的文件</li><li>如果超过128M才会进行切分,  但这个命令<em>一般不会使用</em></li></ul></li><li><p><strong>查看文件，文件夹数量  count</strong></p><ul><li><code>DIR_COUNT FILE_COUNT CONTENT_SIZE FILE_NAME</code></li><li><p><code>8            3         176.5 K     /tmp</code></p></li><li><p><code>hadoop fs -count -h /tmp</code>:  -h 是友好展示</p></li><li><code>hdfs dfs -count -h /tmp</code>:  与上面效果一样</li><li><code>hdfs dfs -count -q -h /tmp</code>:  查看文件配额， 具体看 help</li></ul></li><li><p><strong><code>du</code>：</strong> <strong>展示文件大小</strong>， 如果参数是文件夹， 则展示文件夹下文件的大小</p><ul><li><code>hadoop fs -du -h  /tmp</code></li><li><code>hadoop fs -du -s -h  /tmp</code>: s 应该是  sum 的意思， 展示所有文件大小的总和</li></ul></li><li><p><strong>展示文件最后1kb内容</strong><code>-tail</code></p><ul><li><p>Show the last 1KB of the file.</p></li><li><p><code></code> hadoop fs -tail /dd.txt`</p></li><li><code>-f  Shows appended data as the file grows.</code></li><li>应用场景： <strong>监控日志</strong></li></ul></li><li><p><strong>修改文件权限 chmod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 直接使用十进制数字修改 </span></span><br><span class="line">[ap@cs2]~/<span class="built_in">test</span>% hadoop fs -ls /</span><br><span class="line">drwxr-xr-x   - ap supergroup          0 2018-06-01 08:55 /aa</span><br><span class="line"><span class="comment"># -R：  /aa 目录下所有的文件递归修改权限</span></span><br><span class="line">[ap@cs2]~/<span class="built_in">test</span>% hadoop fs -chmod -R 777 /aa</span><br><span class="line">[ap@cs2]~/<span class="built_in">test</span>% hadoop fs -ls /</span><br><span class="line">drwxrwxrwx   - ap supergroup          0 2018-06-01 08:55 /aa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 针对用户组修改，注意，修改2个不同组权限， 用，隔开</span></span><br><span class="line">hadoop fs -chmod u+x,g+x /a.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 最常用的文件权限， 是  644(-rw-r--r--) 和 755(-rwxr-xr-x) </span></span><br><span class="line">文件创建默认就是644</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. u+x 与 +x 的区别</span></span><br><span class="line">前者指定加在哪组用户上，  后者是所有组都加</span><br></pre></td></tr></table></figure></li><li><p><strong>修改用户权限 chown</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -chown -R 用户名:组名  hdfs目录/文件</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="2-hdfs-dfsadmin命令"><a href="#2-hdfs-dfsadmin命令" class="headerlink" title="2. hdfs dfsadmin命令"></a>2. <strong><code>hdfs dfsadmin</code>命令</strong></h4><p> 管理员对当前节点的一些操作</p><ul><li><strong><code>hdfs dfsadmin -report</code>  报告当前的一些状态</strong><ul><li>-live  活跃的   </li><li>-dead  死的</li><li>-decommissioning  退役的</li></ul></li><li>**<code>hdfs dfsadmin -safemode</code> 安全模式<ul><li>系统刚启动的时候， 会有30秒的安全模式开启状态， 过了30秒就关了</li><li>enter 进入</li><li>leave 离开</li><li>get  查看</li></ul></li><li><strong><code>hdfs dfsadmin</code> 设置配额</strong><ul><li><code>-setQuota</code> ： 配额是限定的文件&amp;文件夹的数量<ul><li>A quota of 1 would force the directory to remain empty.</li><li>空文件本身算一个文件</li><li><code>bin/hdfs dfsadmin -setQuota 10 lisi</code></li></ul></li><li><code>-clrQuota</code></li><li><code>-setSpaceQuota</code>： 空间配额限定的是大小<ul><li><code>bin/hdfs dfsadmin -setSpaceQuota 4k /lisi/</code></li></ul></li><li><code>-clrSpaceQuota</code></li><li><code>hdfs dfs -count -q -h /user</code>:  加上 -q 是查看配额</li></ul></li></ul><hr><h4 id="3-httpFS访问"><a href="#3-httpFS访问" class="headerlink" title="3.  httpFS访问"></a>3.  httpFS访问</h4><p>使用 REST 的形式， 可以在浏览器上直接访问集群， 可以在非 Linux 平台访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 编辑文件httpfs-env.sh</span><br><span class="line"># 打开此句注释, 使用内嵌的 tomcat</span><br><span class="line">export HTTPFS_HTTP_PORT=14000</span><br><span class="line"></span><br><span class="line"># 编辑文件core-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">编辑文件hdfs-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">重新启动namenode，执行 sbin/httpfs.sh start</span><br><span class="line"># 执行命令</span><br><span class="line">curl -i "http://cs1:14000/webhdfs/v1?user.name=root&amp;op=LISTSTATUS"</span><br></pre></td></tr></table></figure><p><a href="http://hadoop.apache.org/docs/r2.6.0/hadoop-project-dist/hadoop-hdfs/WebHDFS.html" target="_blank" rel="noopener">更多命令参考</a></p><hr><p><strong>相关知识点</strong></p><ul><li><p>这些命令<strong>在集群中的任何节点都可以做</strong>, hdfs文件系统中, 看到的目录结构只是一个抽象目录, 实际存储在集群中的节点上</p><ul><li>aa.txt ,  大小150M,   <code>hadoop fs -put aa.txt /</code></li><li>会在根目录下看到 /aa.txt,  但是 aa.txt 真实存储的时候, 会先进行分块, 分2块, 进行存储, 假设集群中5个存储节点,  这2个块存储在哪个节点,  由namenode进行分配</li><li>图形界面点进去, 可以看到存储的块</li></ul></li><li><p><strong>Linux的权限管理命令</strong>: </p><ol><li>修改 文件/文件夹 权限的 <code>chmod</code>: <ol><li>可读: r ,  =4        </li><li>可写: w,  =2</li><li>可执行: x,  =1<ol><li>最大权限是7</li><li>-rw-rw-r–</li><li>文件属性 d:目录  -:文件  l:链接</li><li>第一组: 本用户,  第二组: 本组用户,  第三组: 其它用户</li></ol></li></ol></li></ol><ul><li>chmod  711 </li><li>改一个文件夹下所有文件权限为711 <code>chmod -R 711 目录</code></li></ul><ol><li>修改文件所属用户和组 <code>chown</code><ul><li><code>chown -R root:root  ss/</code>把ss的文件夹全部改成root用户和root组</li></ul></li></ol></li></ul><hr><p>​    </p><h3 id="6-通过-Java-API的方式操作-HDFS"><a href="#6-通过-Java-API的方式操作-HDFS" class="headerlink" title="6. 通过 Java API的方式操作 HDFS"></a>6. 通过 Java API的方式操作 HDFS</h3><p>。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop的核心组件-之-HDFS&quot;&gt;&lt;a href=&quot;#Hadoop的核心组件-之-HDFS&quot; class=&quot;headerlink&quot; title=&quot;Hadoop的核心组件 之 HDFS&quot;&gt;&lt;/a&gt;Hadoop的核心组件 之 HDFS&lt;/h1&gt;&lt;h2 id=&quot;H
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Hadoop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>HashMap的实现原理</title>
    <link href="https://airpoet.github.io/2018/06/02/Java/HashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://airpoet.github.io/2018/06/02/Java/HashMap的实现原理/</id>
    <published>2018-06-02T02:25:19.841Z</published>
    <updated>2018-06-02T03:22:52.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是HashMap"><a href="#1-什么是HashMap" class="headerlink" title="1.什么是HashMap"></a>1.什么是HashMap</h1><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-02-024247.jpg" alt=""></p><p><strong>Hash</strong>: 散列将一个任意的长度通过某种(hash函数)算法转换成一个固定值</p><p><strong>Map</strong>: 地图,  (x,y)存储</p><p>底层就是一个数组结构, 数组中的每一项又是一个链表, 当新建一个HashMap的时候, 就会初始化一个数组</p><p><strong>总结</strong>: 通过 hash 出来值, 然后通过值定位到某个 map, 然后value 存储到这个 map中, <strong>value只不过是 key 的附属.</strong></p><hr><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h1><h3 id="先给出结论"><a href="#先给出结论" class="headerlink" title="先给出结论"></a>先给出结论</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构:"></a>数据结构:</h4><ul><li>底层是数组</li><li><code>Entry</code> 就是数组中的元素</li><li>每个<code>Map.Entry</code>其实就是一个<code>key-value</code>对,  它持有一个指向下一个元素的引用<code>Entry&lt;K,V&gt; next;</code>, 这就构成了链表</li></ul><h4 id="存取实现"><a href="#存取实现" class="headerlink" title="存取实现:"></a>存取实现:</h4><ul><li><strong>存储<code>put</code></strong> :<ul><li><strong>过程</strong><ul><li>先根据 <code>key</code> 的 <code>hashCode</code> 重新计算 <code>hash</code> 值, 根据 <code>hash</code> 值得到这个元素在数组中的位置(下标)</li><li>如果数组该位置上已经存放有其他元素了,  那么在这个位置上的元素将以链表的形式存放, 新加入的放在链头, 最先加入的放在链尾.  </li><li>如果数组该位置上没有元素, 就直接将该元素放到数组中的该位置上.</li></ul></li><li><strong>注意点</strong><ul><li>当系统决定存储 <code>HashMap</code> 中的 <code>key-value</code> 对时，完全没有考虑 <code>Entry</code> 中的 <code>value</code>，仅仅只是根据 <code>key</code>来计算并决定每个<code>Entry</code>的存储位置。当系统决定了 <code>key</code>的存储位置之后，<code>value</code>随之保存在那里即可。</li><li>对于于任意给定的对象，只要它的 <code>hashCode()</code>返回值相同，那么程序调用 <code>hash(int h)</code>方法所计算得到的<code>hash</code> 码值总是相同的。</li><li>本质上就是<strong>把 <code>hash</code> 值对数组长度取模运算</strong>， 这样一来，<strong>元素的分布相对来说是比较均匀的</strong></li><li>但是系统是用的<strong>位运算</strong>， 方法更巧妙， 消耗更小</li></ul></li></ul></li><li><strong>读取<code>get</code></strong><ul><li><strong>过程</strong><ul><li>首先计算 <code>key</code> 的 <code>hashCode</code>，找到数组中对应位置的某一元素，然后通过<code>key</code> 的 <code>equals</code> 方法在对应位置的链表中找到需要的元素。</li></ul></li></ul></li></ul><h4 id="存储实现总结"><a href="#存储实现总结" class="headerlink" title="存储实现总结:"></a>存储实现总结:</h4><ul><li><p><strong>HashMap</strong> 在底层将 <strong>key-value</strong> 当成一个<u>整体</u>进行处理，这个整体就是一个 <strong>Entry</strong> 对象。</p></li><li><p><strong>HashMap</strong> 底层采用一个 <strong>Entry[]</strong> 数组来保存所有的 <strong>key- value</strong> 对，当需要<strong><em>存储</em></strong>一个 <strong>Entry</strong> 对象时，会根据 <strong>hash</strong> 算法来<u>决定其在数组中的存储位置</u>，在根据 <strong>equals</strong> 方法<u>决定其在该数组位置上的链表中的存储位置</u>；</p></li><li>当需要<strong><em>取出</em></strong>一个 <strong>Entry</strong> 时，也会根据 <strong>hash</strong> 算法<u>找到其在数组中的存储位置</u>，再根据 <strong>equals</strong> 方法<u>从该位置上的链表中取出</u>该 <strong>Entry</strong>。</li></ul><hr><h1 id="3-HashMap-的性能参数"><a href="#3-HashMap-的性能参数" class="headerlink" title="3.  HashMap 的性能参数"></a>3.  HashMap 的性能参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桶表默认容量 16,  必须是 2 的倍数， 便于后面的 位运算</span></span><br><span class="line"><span class="comment"> * 控制hashcode 不超16范围, a.hashcode = xx % 16 (hashcode 取模 桶个数)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> * 桶表最大 2^30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容因子（负载因子）: 0.75</span></span><br><span class="line"><span class="comment"> * 扩容: 每次2倍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表: hash算法值相同的时候, 会把值相同的放在一个链表上, 链表上的元素个数</span></span><br><span class="line"><span class="comment"> * 超过8个时, 链表转化为二叉树, 提升查询效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小于6个， 又变回链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-什么是HashMap&quot;&gt;&lt;a href=&quot;#1-什么是HashMap&quot; class=&quot;headerlink&quot; title=&quot;1.什么是HashMap&quot;&gt;&lt;/a&gt;1.什么是HashMap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://p6i5vzkfk.bkt
      
    
    </summary>
    
      <category term="Java" scheme="https://airpoet.github.io/categories/Java/"/>
    
      <category term="知识点" scheme="https://airpoet.github.io/categories/Java/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>▍《无题》 -隐居的事</title>
    <link href="https://airpoet.github.io/2018/06/02/Poetry/%E6%97%A0%E9%A2%98/"/>
    <id>https://airpoet.github.io/2018/06/02/Poetry/无题/</id>
    <published>2018-06-01T17:10:33.894Z</published>
    <updated>2018-06-03T06:41:26.290Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><br>在淮海中路看油画，要把天空调弱</p><p>让油菜花暗下去，看眉式清秀之人离开身体</p><p>穿过街巷中涂抹过的人群，悄悄投了水。  </p><p><br>在淮海中路1411号，春光遮蔽了暗疾</p><p>鸟鸣带来逼仄和飞行感，一个人的身体像麻绳</p><p>裸露在新鲜空气中，骨头开裂出花朵。  </p><p><br>眼底的云又白又黑，膝盖的青色愈爱愈深</p><p>穿过死后潭水的寂静，背部长出的鱼鳞</p><p>一年比一年薄，月亮一日比一日旧。  </p><p><br>与春风交换身体，与素不相识之人抱头痛哭</p><p>与我，许下再死一次的诺言，这么多年了</p><p>她说，我爱你依旧，胜过画中人。 </p><p> <br></p><p>作者 / 隐居的事</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;br&gt;在淮海中路看油画，要把天空调弱&lt;/p&gt;
&lt;p&gt;让油菜花暗下去，看眉式清秀之人离开身体&lt;/p&gt;
&lt;p&gt;穿过街巷中涂抹过的人群，悄悄投了水。  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;在淮海中路1411号，春光
      
    
    </summary>
    
      <category term="文艺" scheme="https://airpoet.github.io/categories/%E6%96%87%E8%89%BA/"/>
    
      <category term="诗歌" scheme="https://airpoet.github.io/categories/%E6%96%87%E8%89%BA/%E8%AF%97%E6%AD%8C/"/>
    
    
      <category term="诗歌" scheme="https://airpoet.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop相关书籍</title>
    <link href="https://airpoet.github.io/2018/06/02/Hadoop/Overview/Hadoop%E7%9B%B8%E5%85%B3%E4%B9%A6%E7%B1%8D/"/>
    <id>https://airpoet.github.io/2018/06/02/Hadoop/Overview/Hadoop相关书籍/</id>
    <published>2018-06-01T16:20:33.728Z</published>
    <updated>2018-06-01T16:57:11.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop框架体系相关书籍推荐"><a href="#Hadoop框架体系相关书籍推荐" class="headerlink" title="Hadoop框架体系相关书籍推荐"></a>Hadoop框架体系相关书籍推荐</h1><h2 id="1-Hadoop权威指南-第四版"><a href="#1-Hadoop权威指南-第四版" class="headerlink" title="1. [Hadoop权威指南] 第四版"></a>1. [Hadoop权威指南] 第四版</h2><blockquote><p> <strong>顾名思义, 很权威</strong>  </p></blockquote><p>🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-01-162303.jpg" alt=""></p><p>🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘🐘</p><h2 id="2-HBase权威指南"><a href="#2-HBase权威指南" class="headerlink" title="2. [HBase权威指南]"></a>2. [HBase权威指南]</h2><blockquote><p> 祝你🐴到成功</p></blockquote><p>🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-01-163622.jpg" alt=""></p><p>🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴🐴</p><h2 id="3-Hive编程指南"><a href="#3-Hive编程指南" class="headerlink" title="3. [Hive编程指南]"></a>3. [Hive编程指南]</h2><blockquote><p>小蜜蜂, 嗡嗡嗡.</p></blockquote><p>🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-01-163954.jpg" alt=""></p><p>🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝🐝</p><h2 id="4-zookeeper分布式过程协同技术详解"><a href="#4-zookeeper分布式过程协同技术详解" class="headerlink" title="4. [zookeeper分布式过程协同技术详解]"></a>4. [zookeeper分布式过程协同技术详解]</h2><blockquote><p>这是个啥动物?? 🐱??</p></blockquote><p>🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-01-164208.jpg" alt=""></p><p>🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱🐱</p><hr><h1 id="以上书籍下载地址"><a href="#以上书籍下载地址" class="headerlink" title="以上书籍下载地址"></a>以上书籍下载地址</h1><h5 id="有效期至-2018年06月08日"><a href="#有效期至-2018年06月08日" class="headerlink" title="有效期至 2018年06月08日"></a><strong>有效期至 2018年06月08日</strong></h5><p><a href="https://pan.baidu.com/s/1s8YK-Xbjpd738inPLSczRA" target="_blank" rel="noopener">百度网盘下载</a> </p><p>密码:  <code>tm0c</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop框架体系相关书籍推荐&quot;&gt;&lt;a href=&quot;#Hadoop框架体系相关书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;Hadoop框架体系相关书籍推荐&quot;&gt;&lt;/a&gt;Hadoop框架体系相关书籍推荐&lt;/h1&gt;&lt;h2 id=&quot;1-Hadoop权
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="学习资源" scheme="https://airpoet.github.io/categories/Hadoop/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
      <category term="书籍" scheme="https://airpoet.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop学习笔记-1 简介&amp;安装</title>
    <link href="https://airpoet.github.io/2018/05/31/Hadoop/Study/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-%E7%AE%80%E4%BB%8B&amp;%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://airpoet.github.io/2018/05/31/Hadoop/Study/Hadoop学习笔记-1-简介&amp;环境搭建/</id>
    <published>2018-05-31T02:08:21.006Z</published>
    <updated>2018-06-02T07:11:09.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="1-有一个很大的-4T-的文件-文件中存储的是ip-每行存储一个-要求求出出现此处最多的那个ip"><a href="#1-有一个很大的-4T-的文件-文件中存储的是ip-每行存储一个-要求求出出现此处最多的那个ip" class="headerlink" title="1. 有一个很大的(4T)的文件,  文件中存储的是ip, 每行存储一个, 要求求出出现此处最多的那个ip"></a>1. 有一个很大的(4T)的文件,  文件中存储的是ip, 每行存储一个, 要求求出出现此处最多的那个ip</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">如果这个文件是小文件：</span><br><span class="line">io流+集合</span><br><span class="line">实现思路：</span><br><span class="line">创建一个流进行文件读取</span><br><span class="line">读取出来的数据存储到map集合中  key：ip    value:次数</span><br><span class="line">统计逻辑：</span><br><span class="line">判断读取的ip是否已经存在在map中</span><br><span class="line">存在：取出value+<span class="number">1</span></span><br><span class="line">不存在：将ip作为key   <span class="number">1</span>作为value</span><br><span class="line">怎么求ip出现次数最多的</span><br><span class="line">遍历map    遍历key，取出value找出最大值  value最大的key就是要找的ip</span><br><span class="line">我的文件足够大：大到一台机器装不下     </span><br><span class="line">数组   集合  变量------&gt;基于内存的</span><br><span class="line">怎么办？？？？？</span><br><span class="line">服务器的<span class="number">2</span>T</span><br><span class="line"><span class="number">1</span>.在最早的时候我们的思维模式就是纵向扩展，增加单个节点的性能    <span class="number">8</span>T</span><br><span class="line">摩尔定律：硬件性能<span class="number">18</span>-<span class="number">24</span>个月会提升一倍</span><br><span class="line"><span class="number">4</span>T------<span class="number">2</span>h</span><br><span class="line"><span class="number">4</span>T------<span class="number">1</span>h    前提是数据量不发生改变</span><br><span class="line">但是往往数据量的变化速度远远大于服务器性能的提升速度</span><br><span class="line">经过<span class="number">18</span>个月</span><br><span class="line">服务器性能提升了一倍</span><br><span class="line">数据量------提升了<span class="number">10</span>倍</span><br><span class="line"><span class="number">4</span>T------<span class="number">2</span>h</span><br><span class="line"><span class="number">40</span>t-----<span class="number">20</span>h   目前只需要<span class="number">10</span>h</span><br><span class="line">纵向扩展不可行？</span><br><span class="line">横向扩展：如果一台机器处理不了数据   使用多台机器</span><br><span class="line"><span class="number">4</span>T------<span class="number">2</span>h</span><br><span class="line"><span class="number">4</span>t----<span class="number">4</span>个机器----<span class="number">0.5</span>小时</span><br><span class="line">分而治之的思想：</span><br><span class="line">一个机器计算性能有限  这个时候可以使用多台机器共同计算  每台机器承担一部分计算量</span><br><span class="line">最终实现：</span><br><span class="line"><span class="number">1</span>.先将这个足够大的文件进行切分  切分成了多个小文件</span><br><span class="line"><span class="number">2</span>.将多个小文件分发给多个机器进行统计每个ip出现的次数   每个求出出现次数最多的ip</span><br><span class="line"><span class="number">3</span>.合并求出最终的最大值</span><br></pre></td></tr></table></figure><hr><h4 id="2-有两个很大的文件-两个文件中存储的都是url-求出两个文件中相同的url"><a href="#2-有两个很大的文件-两个文件中存储的都是url-求出两个文件中相同的url" class="headerlink" title="2. 有两个很大的文件, 两个文件中存储的都是url,  求出两个文件中相同的url"></a>2. 有两个很大的文件, 两个文件中存储的都是url,  求出两个文件中相同的url</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">如果文件是小文件：</span><br><span class="line">io流+集合（set）</span><br><span class="line">实现逻辑：</span><br><span class="line"><span class="number">1</span>.先创建两个文件读取流，用来读取两个文件</span><br><span class="line"><span class="number">2</span>.创建两个集合set1    set2</span><br><span class="line"><span class="number">3</span>.进行文件读取并分别set1   set2中</span><br><span class="line"><span class="number">4</span>.循环遍历其中一个set1，判断set1中取出的每个url是否在set2中  set2.contains(url)</span><br><span class="line">大文件的时候怎么办？</span><br><span class="line">我们也采用分而治之的思想：将两个大文件都进行切分，每个大文件都切成多个小文件</span><br><span class="line">一个大任务=<span class="number">4</span>*<span class="number">4</span>个小任务</span><br><span class="line">这样虽然可以达到目的但是效率太低？怎么办？</span><br><span class="line">排序，切分（规则同一）   最终将任务减少到<span class="number">4</span>个</span><br><span class="line">但是大文件排序仍然是一个非常消耗性能的事情，如果不需要排序就可做到这个效果尽量不要排序</span><br><span class="line">怎么办？</span><br><span class="line">hash算法的目的----》给每一个对象生成一个“唯一”的hash值<span class="number">0</span>-Integer_MAX</span><br><span class="line">是否可以运用hash算法解决这个问题</span><br><span class="line">url.hashCode()%分段的个数   两个文件分段规则一定相同吗？</span><br><span class="line">url.hashCode()肯定一样</span><br><span class="line">分段个数一定相同吗？可以不一样  如果不一样的话  必须成倍数关系</span><br><span class="line">最终的解决方案：</span><br><span class="line">分而治之+分段规则</span><br><span class="line">分段：分区</span><br></pre></td></tr></table></figure><hr><h4 id="3-有一个很小的文件-存储的都是url-每行一个-怎样快速判断给定的一个url是否在这个文件中"><a href="#3-有一个很小的文件-存储的都是url-每行一个-怎样快速判断给定的一个url是否在这个文件中" class="headerlink" title="3. 有一个很小的文件, 存储的都是url, 每行一个, 怎样快速判断给定的一个url是否在这个文件中"></a>3. 有一个很小的文件, 存储的都是url, 每行一个, 怎样快速判断给定的一个url是否在这个文件中</h4><p><strong>小文件</strong>:  IO + 集合(set)</p><ol><li>创建io 和 集合</li><li>进行文件读取放在 set集合中</li><li>set.contains(url) ==&gt;  true:存在,  false: 不存在</li></ol><p><strong>大文件:</strong>  </p><p>思路1:  用hashCode() 进行分区, 然后用要查找的 url 取模定位 </p><ul><li>但是这样定位到了还是要一个个找</li></ul><p><strong>思路2:</strong> </p><ul><li>数组的查询性能比较高, 数组可以通过下标</li><li><p><strong>基数排序</strong></p><ol><li>数组的索引代表的是数据的原始值, 数组中存储的值, 是原始值出现的次数</li><li>放到对应下标的位置,  值只存出现的次数</li><li>如果数组中对应的下表存储的值为0, 代表此下标的值没有出现过, 就不需要输出</li><li><strong>缺点:</strong> <ul><li>数据范围过大时, 数组长度不好创建</li><li>数组的类型不好确定</li><li>如果数据比较分散时, 会造成资源浪费</li></ul></li><li><u>练习: 写一个基数排序, 随机生成的20个数, 运用基数排序排序</u></li></ol></li></ul><ul><li><p>对于本题</p><ul><li>不需要统计次数, 存在标记为1, 不存在就是0</li><li>所以存的时候最好用boolean存,  用位数组 <code>bit[]</code></li><li>可以设计多个hash算法, 用来校验某一种hashCode相同的情况</li><li><strong>影响误判率3要素</strong>: hash算法个数 k - 数据量n - 数组长度 m</li><li><strong>布隆过滤器 </strong>公式: k = 0.7*(m/n), 此时的误判率最小</li></ul></li></ul><hr><h1 id="大数据基本介绍"><a href="#大数据基本介绍" class="headerlink" title="大数据基本介绍"></a>大数据基本介绍</h1><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul><li>数据就是数值，也就是我们通过观察、实验或计算得出的结果。数据有很多种，最简单的就是数字。</li><li>数据也可以是文字、图像、声音等。数据可以用于科学研究、设计、查证等。</li></ul><h3 id="结构划分"><a href="#结构划分" class="headerlink" title="结构划分:"></a>结构划分:</h3><ul><li>结构化<ul><li>半结构化</li><li>非结构化</li></ul></li></ul><h3 id="大数据特点-4V"><a href="#大数据特点-4V" class="headerlink" title="大数据特点:  4V"></a>大数据特点:  4V</h3><ol><li><h5 id="数据量大"><a href="#数据量大" class="headerlink" title="数据量大"></a>数据量大</h5><blockquote><p>1 Byte =8 bit<br>1 KB = 1,024 Bytes = 8192 bit<br>1 MB = 1,024 KB = 1,048,576 Bytes<br>1 GB = 1,024 MB = 1,048,576 KB<br>1 TB = 1,024 GB = 1,048,576 MB   （普通用户数据级别）<br>1 PB = 1,024 TB = 1,048,576 GB（企业级数据级别）<br>1 EB = 1,024 PB = 1,048,576 TB<br>1 ZB = 1,024 EB = 1,048,576 PB（全球数据总量级别）</p></blockquote></li><li><p>数据增长速度快</p></li><li><p>数据种类多</p><ul><li>文字 图片  音频 视频..</li></ul></li><li>数据的价值密度低  整体价值高</li></ol><h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><ol><li>公司中的自己的业务数据  淘宝  京东</li><li>第三方</li><li>爬虫  爬数据</li></ol><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><ol><li>缺失数据的处理<ul><li>考虑缺失数据是否影响整体的业务逻辑  不影响 删除</li><li>如果是和钱相关的数据    —-慎重   不能轻易删除  </li></ul></li><li>敏感数据<ul><li>脱敏处理 – 加密</li></ul></li></ol><h3 id="数据价值"><a href="#数据价值" class="headerlink" title="数据价值"></a>数据价值</h3><ul><li>人物画像<ul><li>根据根据用户数据给用户做一个全方位的分析画像   属性：  人脉  消费水平   性格特点<ul><li>….</li></ul></li></ul></li></ul><hr><h1 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h1><h3 id="集群"><a href="#集群" class="headerlink" title="集群:"></a>集群:</h3><ul><li>多个机器共同协作完成同一个任务, 每一个机器叫做节点,  多个机器共同组成的群体叫做集群</li><li>集群中的每个节点之间通过局域网或其他方式通讯</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式:"></a>分布式:</h3><ul><li>分而治之 ,  一个任务呗分成多个子任务模块, 每个任务跑在不同的节点上</li><li>原来一个人干的事情, 现在大家分工劳动</li><li>分布式的文件系统 ,  分布式数据库,  分布式计算系统</li></ul><h3 id="负载均衡-Nginx"><a href="#负载均衡-Nginx" class="headerlink" title="负载均衡: Nginx"></a>负载均衡: Nginx</h3><ul><li>每个节点分配到的任务基本均衡</li><li>负载均衡是跟每个节点自身的配置等匹配的</li><li>不存在绝对的均衡</li></ul><hr><h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>一个分布式的开源框架</li><li>支持成千上万的节点, 每个节点依靠本地的计算和存储</li><li>在应用层面提供高可用性</li><li>将硬件错误看成一个常态</li></ul><h3 id="Hadoop的模块"><a href="#Hadoop的模块" class="headerlink" title="Hadoop的模块"></a>Hadoop的模块</h3><ul><li><strong>Common</strong> <ul><li>支持其他 Hadoop 模块的公共实用程序</li><li>封装: 工具类, RPC框架</li></ul></li><li><strong>HDFS</strong><ul><li>Hadoop的分布式文件系统, 负责海量数据的存储</li><li>将文件切分成指定大小的数据块并以多副本的存储形式存储在多个机器上</li><li>数据切分, 多副本, 容错等操作对用户是透明的</li><li><strong>架构</strong>: 主从架构 ( Java进程)<ul><li>主: namenode  一个</li><li>从: datenode   多个</li><li>助理: SecondaryNamenode 分担主进程的压力</li></ul></li></ul></li><li><strong>YARN</strong><ul><li>集群的资源调度框架,  负责集群的资源管理</li><li>架构: 主从架构<ul><li>主: ResourceManager  – 负责统筹资源</li><li>从: NodeManager</li></ul></li></ul></li><li><strong>MapReduce</strong><ul><li>分布式计算框架,  有计算任务的时候才会有响应的进程</li></ul></li></ul><h3 id="Hadoop的搭建"><a href="#Hadoop的搭建" class="headerlink" title="Hadoop的搭建"></a>Hadoop的搭建</h3><h4 id="搭建前的准备"><a href="#搭建前的准备" class="headerlink" title="搭建前的准备"></a>搭建前的准备</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">搭建准备：</span><br><span class="line">1）ip配置</span><br><span class="line"></span><br><span class="line">2）主机名   vi /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">3）主机映射</span><br><span class="line"></span><br><span class="line">4）关闭防火墙和sellinux</span><br><span class="line">    service iptables stop</span><br><span class="line">    vi /etc/selinux/config</span><br><span class="line">    SELINUX=disabled</span><br><span class="line"></span><br><span class="line">5）将系统的启动级别改为3</span><br><span class="line">vi /etc/inittab</span><br><span class="line"></span><br><span class="line">6）创建普通用户，并为普通用户添加sudolers权限</span><br><span class="line">    创建用户：useradd 用户名</span><br><span class="line">    passwd 用户名</span><br><span class="line">    vi /etc/sudoers</span><br><span class="line">    hadoop  ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line">7）配置免密登录</span><br><span class="line">   先切换到普通用户</span><br><span class="line">   1）生成秘钥</span><br><span class="line">   ssh-keygen</span><br><span class="line">   2)发送秘钥</span><br><span class="line">   ssh-copy-id hadoop(主机名)</span><br><span class="line">   验证：ssh hadoop</span><br><span class="line">   </span><br><span class="line">8）安装jdk</span><br><span class="line">    卸载jdk：</span><br><span class="line">    rpm -qa|grep jdk</span><br><span class="line">    rpm -e java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64 --nodeps</span><br><span class="line"></span><br><span class="line">9）时间同步   伪分布式不需要   分布式需要，必须做</span><br><span class="line"></span><br><span class="line">10)选择安装版本：</span><br><span class="line">    不选太陈旧的版本也不选最新的版本</span><br><span class="line">    2.7.6</span><br><span class="line">    </span><br><span class="line">11)安装</span><br><span class="line">    一定切换用户    普通用户</span><br></pre></td></tr></table></figure><h4 id="方式1-伪分布式"><a href="#方式1-伪分布式" class="headerlink" title="方式1:  伪分布式"></a>方式1:  伪分布式</h4><p><strong>所有进程全部运行在同一个节点上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">1）上传</span><br><span class="line">2）解压</span><br><span class="line">3）修改配置文件</span><br><span class="line">配置文件的目录：HADOOP_HOME/etc/hadoop</span><br><span class="line">    需要修改6个配置文件：</span><br><span class="line">    1）hadoop-env.sh</span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/home/hadoop/jdk1.8.0_73/</span><br><span class="line">    </span><br><span class="line">    2)core-site.xml</span><br><span class="line">    核心配置文件</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://hadoop:9000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    3)hdfs-site.xml</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">     4)yarn-site.xml</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">     </span><br><span class="line">     5)mapred-site.xml</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">         &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">   </span><br><span class="line">                                      </span><br><span class="line"> 6)slaves   配置的是从节点的信息</span><br><span class="line"> </span><br><span class="line"> 7)配置环境变量</span><br><span class="line"> <span class="built_in">export</span> JAVA_HOME=/home/hadoop/jdk1.8.0_73</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop/hadoop-2.7.6</span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"><span class="built_in">source</span> /etc/rpofile</span><br><span class="line">验证  hadoop  version</span><br><span class="line"></span><br><span class="line">8)先进行格式化</span><br><span class="line">hadoop namenode -format</span><br><span class="line">9)启动</span><br><span class="line">        start-all.sh</span><br><span class="line">        不建议   建议以下命令：</span><br><span class="line">        start-dfs.sh</span><br><span class="line">        start-yarn.sh</span><br><span class="line"></span><br><span class="line">10）验证</span><br><span class="line">        jps   6个进程</span><br><span class="line">        3909 Jps</span><br><span class="line">        3736 ResourceManager</span><br><span class="line">        3401 DataNode</span><br><span class="line">        3306 NameNode</span><br><span class="line">        3836 NodeManager</span><br><span class="line">        3597 SecondaryNameNode</span><br><span class="line"></span><br><span class="line">页面：</span><br><span class="line">        hdfs：namenode的ip：50070</span><br><span class="line">        yarn:resourcemanager的ip：8088</span><br></pre></td></tr></table></figure><hr><h4 id="方式2-完全分布式"><a href="#方式2-完全分布式" class="headerlink" title="方式2:  完全分布式"></a>方式2:  完全分布式</h4><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/c3f4c3b9-249e-42cf-87e4-fb5db3bb37e2/" target="_blank" rel="noopener">参考文档</a></p><p><strong>各个节点的安装的普通用户名必须相同  密码也得相同, 每个节点都需要操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">搭建准备：</span><br><span class="line"><span class="number">1</span>）ip配置</span><br><span class="line"><span class="number">2</span>）主机名   vi /etc/sysconfig/network</span><br><span class="line"><span class="number">3</span>）主机映射</span><br><span class="line"><span class="number">4</span>）关闭防火墙和sellinux</span><br><span class="line">service iptables stop</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="number">5</span>）将系统的启动级别改为<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>）创建普通用户，并为普通用户添加sudolers权限</span><br><span class="line">创建用户：useradd 用户名</span><br><span class="line"> passwd 用户名</span><br><span class="line"> vi /etc/sudoers</span><br><span class="line"> hadoop  ALL=(ALL)       ALL</span><br><span class="line"><span class="number">7</span>）配置免密登录</span><br><span class="line">先切换到普通用户</span><br><span class="line">每台机器都需要执行下面的操作</span><br><span class="line">各个节点之间都做一下</span><br><span class="line">    a. 生成秘钥 ssh-keygen</span><br><span class="line">    b. 发送秘钥  ssh-copy-<span class="function">id <span class="title">hadoop</span><span class="params">(主机名)</span></span></span><br><span class="line"><span class="function">c. 验证：各个节点之间都需要做相互验证</span></span><br><span class="line"><span class="function">ssh hadoop01</span></span><br><span class="line"><span class="function">ssh hadoop02</span></span><br><span class="line"><span class="function">ssh hadoop03</span></span><br><span class="line"><span class="function">8）安装jdk</span></span><br><span class="line"><span class="function">卸载jdk：</span></span><br><span class="line"><span class="function">rpm -qa|grep jdk</span></span><br><span class="line"><span class="function">rpm -e java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64 --nodeps</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">9）时间同步   伪分布式不需要   分布式需要，必须做</span></span><br><span class="line"><span class="function">1)不能联网的时候    手动指定   date -s 时间  或者手动搭建一个时间服务器</span></span><br><span class="line"><span class="function">2）能联网的时候    找一个公网中的公用的时间服务器  所有节点的时间和公网中的时间服务器保持一致</span></span><br><span class="line"><span class="function">ntpdate 公网的时间服务器地址</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">完全分布式必须要做  每个节点都需要执行</span></span><br><span class="line"><span class="function">10) 选择安装版本：</span></span><br><span class="line"><span class="function">不选太陈旧的版本也不选最新的版本</span></span><br><span class="line"><span class="function">2.7.6</span></span><br><span class="line"><span class="function">11) 安装</span></span><br><span class="line"><span class="function">一定切换用户    普通用户</span></span><br><span class="line"><span class="function">先在一个节点上执行所有的修改  在远程发送到其他节点</span></span><br><span class="line"><span class="function">                1）上传</span></span><br><span class="line"><span class="function">                2）解压d</span></span><br><span class="line"><span class="function">                3）配置环境变量</span></span><br><span class="line"><span class="function">                4）修改配置文件</span></span><br><span class="line"><span class="function">                    6个配置文件</span></span><br><span class="line"><span class="function">                    集群规划</span></span><br><span class="line"><span class="function">                    ....</span></span><br><span class="line"><span class="function">                    ....</span></span><br><span class="line"><span class="function">                    </span></span><br><span class="line"><span class="function">                5)远程发送</span></span><br><span class="line"><span class="function">                scp -r hadoop-2.7.6 hadoop02:$PWD</span></span><br><span class="line"><span class="function">                scp -r hadoop-2.7.6 hadoop03:$PWD</span></span><br><span class="line"><span class="function">                </span></span><br><span class="line"><span class="function">                scp -r /home/ap/apps/hadoop-2.7.6/etc/hadoop ap@cs1:/home/ap/apps/hadoop-2.7.6/etc</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                远程发送/etc/pofile</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                执行source /etc/pofile</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                6）进行格式化     必须在namenode的节点（hdfs的主节点）</span></span><br><span class="line"><span class="function">                hadoop namenode -format</span></span><br><span class="line"><span class="function">            不配置目录默认/tmp  临时目录   可以随时回收的</span></span><br><span class="line"><span class="function">                7)启动</span></span><br><span class="line"><span class="function">                启动hdfs    start-dfs.sh  在任意节点都可以</span></span><br><span class="line"><span class="function">                启动yarn     start-yarn.sh   在yarn的主节点执行</span></span><br><span class="line"><span class="function">                jps命令查看</span></span><br><span class="line"><span class="function">                网页：</span></span><br><span class="line"><span class="function">                hdfs:     hadoop01:50070</span></span><br><span class="line"><span class="function">                yarn      hadoop03:8088</span></span><br><span class="line"><span class="function">                    </span></span><br><span class="line"><span class="function">                    </span></span><br><span class="line"><span class="function">测试yarn集群是否启动成功 <span class="params">(提交MapReduce例子程序试跑)</span></span></span><br><span class="line"><span class="function">ls apps/hadoop-2.7.6/share/hadoop/mapreduce</span></span><br><span class="line"><span class="function">bin/hadoop jar hadoop-mapreduce-examples-2.6.5.jar  pi 5 5</span></span><br></pre></td></tr></table></figure><h3 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h3><h4 id="搭建过程中"><a href="#搭建过程中" class="headerlink" title="搭建过程中"></a>搭建过程中</h4><ol><li>主机找不到<ol><li>/etc/sysconfig/network     /etc/hosts</li><li>重启机器</li></ol></li><li>何时化的时候报错<ul><li>配置文件错误,  根据错误去相应文件进行调整, 修改完毕后, 重新格式化直到格式化成功</li></ul></li></ol><h4 id="启动过程中"><a href="#启动过程中" class="headerlink" title="启动过程中"></a>启动过程中</h4><h4 id="某些进程启动不了"><a href="#某些进程启动不了" class="headerlink" title="某些进程启动不了"></a>某些进程启动不了</h4><h5 id="措辞1-暴力"><a href="#措辞1-暴力" class="headerlink" title="措辞1: 暴力"></a>措辞1: 暴力</h5><ul><li>全部关闭集群重新启动<ul><li>stop-dfs.sh     在任意节点执行</li><li>stop-yarn.sh  在yarn的主节点启动</li><li>重新启动, 直接启动就可以了</li><li>start-dfs.sh</li><li>start-yarn.sh</li></ul></li></ul><h5 id="措施2-单独启动某些进程"><a href="#措施2-单独启动某些进程" class="headerlink" title="措施2: 单独启动某些进程"></a>措施2: 单独启动某些进程</h5><p>单独启动<code>hdfs</code>的相关进程</p><ul><li>hadoop-daemon.sh  start  hdfs 过程</li><li>hadoop-daemon.sh  start namenode</li><li>hadoop-daemon.sh start secondarynamenode</li></ul><p>单独启动<code>yarn</code>的相关命令</p><ul><li>yarn-daemon.sh start yarn 的相关过程</li><li>yarn-daemon.sh start resourcemanager</li></ul><h3 id="搭建过程中的注意事项"><a href="#搭建过程中的注意事项" class="headerlink" title="==搭建过程中的注意事项=="></a>==搭建过程中的注意事项==</h3><ol><li><p>集群的<strong>只能成功的格式化一次,</strong>  不成功的要一直到格式化成功, <strong>成功后就不能再次格式化</strong></p><ul><li><p><strong>格式化的过程中</strong>: 创建出来<strong>namenode</strong>存储的相关目录</p><ul><li><p>version文件: 记录仪集群的版本信息的,  每格式化一次, 就会产生一个新的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespaceID=1163449973</span><br><span class="line">clusterID=CID-47f10077-2aef-4df6-a364-1a735515a100   <span class="comment">#记录集群的版本信息的</span></span><br><span class="line">cTime=0</span><br><span class="line">storageType=NAME_NODE</span><br><span class="line">blockpoolID=BP-1527239677-192.168.75.162-1527817150436</span><br><span class="line">layoutVersion=-63</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动hdfs的时候</strong>:  生成<strong>datanode</strong>的相关数据信息</p><ul><li><p>version: 记录datanode 相关版本的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clusterID=CID-47f10077-2aef-4df6-a364-1a735515a100</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ul><li>两个文件中的<code>clusterID</code>相同的时候, datanode 才会认为是同一个集群的</li></ul><ol start="2"><li><p><strong>想要重复格式化, 分3步走</strong></p><ol><li><p>停止所有服务</p></li><li><p>删除 namenode 的数据目录</p><blockquote><p><code>rm -rf /home/ap/data/hadoopdata/name</code></p></blockquote></li><li><p>删除 datanode 的数据目录</p><blockquote><p><code>rm -rf /home/ap/data/hadoopdata/data</code></p></blockquote></li><li><p>此时才可以重新格式化,  否则会造成 datanode 启动不了, 注意, 关闭防火墙, 关闭vpn</p></li><li><p>也可以一步到位</p><blockquote><p><code>rm -rf /home/ap/data</code> </p><p>再重新格式化</p></blockquote></li></ol></li></ol><ol start="3"><li><p>集群搭建过程中<strong>环境变量的配置</strong>(jdk. hadoop…)</p><ul><li>在Linux中修改环境变量的地方有3个<ul><li>/etc/profile  系统环境变量, 针对所有用户的</li><li>~/.bashrc     用户环境变量</li><li>~/.bash_profile  用户环境变量</li></ul></li><li>这3个配置文件的加载顺序<ul><li>/etc/profile  &gt; .bashrc  &gt;   .bash_profile</li></ul></li><li>生效: 最后一次加载的生效</li></ul></li></ol><ol start="4"><li><p><strong>时间同步</strong>问题</p><ul><li>只要是完全分布式的, 多个节点之间一定要做时间同步,</li><li>目的:<ul><li>要和 北京/上海 时间保持一致?    no</li><li>集群背部各个节点之间时间保持一致  yes</li></ul></li><li>why ? <ul><li>集群内部各个节点之间需要通信, 尤其是datanode 和 namenode之间, 他们之间的通信依靠<strong>心跳机制</strong>, 他们之间的心跳存在一个时间控制, 这个时间是 <strong>630s</strong>, 他们之前需要做时间同步</li></ul></li></ul></li></ol><hr><h1 id="集群的安装模式"><a href="#集群的安装模式" class="headerlink" title="集群的安装模式"></a>集群的安装模式</h1><h3 id="1-单机模式"><a href="#1-单机模式" class="headerlink" title="1. 单机模式"></a>1. 单机模式</h3><ul><li>直接解压的方式, 什么都不配置, 并且在一个节点上</li><li>没有分布式文件系统, 所有的文件都是来自本地, 只能对本地的文件进行读写</li><li>几乎没人用, 测试时偶尔会用</li></ul><h3 id="2-伪分布式"><a href="#2-伪分布式" class="headerlink" title="2. 伪分布式"></a>2. 伪分布式</h3><ul><li>可以看做跑在一个节点上的完全分布式</li><li>有分布式文件系统, 只不过这个文件系统只有一个节点</li></ul><h3 id="3-完全分布式"><a href="#3-完全分布式" class="headerlink" title="==3. 完全分布式=="></a>==3. 完全分布式==</h3><p><strong><a href="https://app.yinxiang.com/shard/s37/nl/7399077/c3f4c3b9-249e-42cf-87e4-fb5db3bb37e2/" target="_blank" rel="noopener">参考文档</a></strong> </p><p><strong>规划</strong></p><p><strong>目前疑点:</strong>  NodeManager是根据什么配置到每台机器上的??</p><p>根据表征, 可能是根据 slave文件</p><table><thead><tr><th>主机名 / IP</th><th>HDFS</th><th>YARN</th></tr></thead><tbody><tr><td>cts1 / 192.168.56.131</td><td>NameNode</td><td>空的</td></tr><tr><td>cts2 / 192.168.56.132</td><td>DataNode</td><td>NodeManager</td></tr><tr><td>cts3 / 192.168.56.133</td><td>DataNode + Secondary NameNode</td><td>NodeManager</td></tr><tr><td>cts4 / 192.168.56.134</td><td>DataNode</td><td>NodeManager +ResourceManager</td></tr></tbody></table><ul><li>hdfs 为例 : 在宏观看就是一个大的节点, 后台采用的硬件配置是三天机器的硬件配置之和, 但是对用户来讲完全感觉不到</li><li>在完全分布式中, 有主节点, 有从节点</li><li>主节点 namenode只有一个, 从节点有多个, 真实生产中, namenode会单独做一个节点</li><li>如果集群中namenode宕机,  整个集群还可以使用吗?  不可以<ul><li>namenode: 主要作用存储<strong>元数据</strong> (管理数据的数据, 存储的就是datanode存储数据的描述)</li><li>datanode: 负责集群中真正处理数据存存储的</li></ul></li><li>如果namenode 宕机, 集群无法使用, 这也是完全分布式的一大缺点, 存在单点故障问题</li><li>一般生产中不太使用,  学习, 测试, 节点个数比较少的时候, 有时候也会使用这种模式</li><li>节点数目越多, namenode宕机的可能性越大, 压力太大</li><li>助理secondarynamenode: 只是一个助理, 只是分担namenode的压力, 但是不能代替</li><li>架构:<ul><li>一主多从</li></ul></li></ul><h3 id="4-高可用"><a href="#4-高可用" class="headerlink" title="==4. 高可用=="></a>==4. 高可用==</h3><ul><li>概念: 集群可以持续对外提供服务,  做到 7*24 小时不间断</li><li>依赖于zookeeper,  搭建放在 zookeeper课程之后</li><li>集群架构: <ul><li>双主多从</li></ul></li><li>有<strong>2个 namenode</strong>, 但是在同一时间只能有一个是 活跃的 namenode, 我们把这个活跃的namenode 成为 active 的, 另外一个是处理热备份状态,  我们将这个节点叫 <code>standby</code>, 但是<strong>2个主节点</strong>存储的<strong>元数据</strong>是一模一样的, 当 <code>active namenode</code>宕机的时候, standby的namenode 可以立马切换为 active 的namenode, 对外提供服务, 就可以做到 <strong>集群持续对外提供服务</strong>的功能</li><li>如果过一段时间, 宕机的 namenode 又活过来了, 宕机的 namenode 只能是变成 standby 的</li><li><strong>缺陷</strong>: 在同一时间中, 集群中只有一个active 的 namenode,  也就是说 <strong>集群中有主节点能力的节点 只有一个</strong>, 如果集群中, 节点个数过多(1000) 的时候, 会造成namenode的崩溃, namenode存储的是元数据,  元数据过多的时候, 会造成namenode的崩溃(<strong>两个都崩溃</strong>),  没有真正的分担namenode 的压力</li><li><strong>实际生产多使用高可用</strong></li></ul><h3 id="5-联邦机制"><a href="#5-联邦机制" class="headerlink" title="5. 联邦机制"></a>5. 联邦机制</h3><ul><li>同一个集群中可以有多个主节点, 这些主节点的地位是一样的.</li><li><strong>同一时间, 可以有多个活跃的 namenode</strong></li><li>这些 namenode 共同使用集群中所有的 datanode, 每个namenode 只负责管理集群中的 datanode上的一部分数据</li><li>一般超大集群搭建的时候:  <strong>联邦 + 高可用</strong></li><li><strong>超大集群使用</strong></li><li>每个namenode进行数据管理靠的Block Pool ID相同 </li><li>不同的namenode管理的数据Block Pool ID  不同</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;h3 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h3&gt;&lt;h
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Hadoop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop体系概览</title>
    <link href="https://airpoet.github.io/2018/05/31/Hadoop/Overview/Hadoop%E4%BD%93%E7%B3%BB%E6%A6%82%E8%A7%88/"/>
    <id>https://airpoet.github.io/2018/05/31/Hadoop/Overview/Hadoop体系概览/</id>
    <published>2018-05-30T16:46:03.290Z</published>
    <updated>2018-06-02T11:02:01.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop核心组件"><a href="#Hadoop核心组件" class="headerlink" title="Hadoop核心组件"></a>Hadoop核心组件</h1><h2 id="1-分布式文件系统HDFS"><a href="#1-分布式文件系统HDFS" class="headerlink" title="1. 分布式文件系统HDFS"></a>1. 分布式文件系统HDFS</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li>将文件切分成指定大小的数据块并以多副本的存储形式存储在多个机器上</li><li>数据切分, 多副本, 容错等操作对用户是透明的</li></ul><h3 id="1-2-图示"><a href="#1-2-图示" class="headerlink" title="1.2 图示"></a>1.2 图示</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-165029.png" alt="image-20180531005029275"></p><h3 id="1-3-HDFS架构"><a href="#1-3-HDFS架构" class="headerlink" title="1.3  HDFS架构"></a>1.3  HDFS架构</h3><ul><li><strong>Datanode 定期向 Namenode 发 Hearbeat</strong></li><li><strong>元数据信息： 多份备份</strong></li></ul><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-02-064845.jpg" alt=""></p><h3 id="1-4-HDFS的-IO-操作"><a href="#1-4-HDFS的-IO-操作" class="headerlink" title="1.4 HDFS的 IO 操作"></a>1.4 HDFS的 IO 操作</h3><ul><li>上面的是<strong>读</strong><ul><li>客户端先向 NameNode 寻址</li><li>然后再找 DataNode 拿数据</li></ul></li><li>下面的是<strong>写</strong><ul><li><strong>HDFS</strong> 不支持修改， 没有 leader 角色， <strong>不支持并发写</strong>， 只能支持非并发的追加</li><li>HBase 支持并发写和修改</li></ul></li><li><strong>删除</strong>： 删除的是<strong>元数据</strong>（索引信息）<ul><li>Datanode 会定期向 Namenode <strong>发送心跳</strong>， <strong>同步信息</strong>， 当 Namenode 发现 Datanode 上没有自己存储的信息时，就会把这部分信息删除掉。</li></ul></li></ul><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-02-065117.png" alt="image-20180602145116939"></p><h3 id="1-5-HDFS-副本存放策略"><a href="#1-5-HDFS-副本存放策略" class="headerlink" title="1.5 HDFS 副本存放策略"></a>1.5 HDFS 副本存放策略</h3><ul><li><strong>复制因子为3时的 存放策略</strong><ul><li>如果写入者在一个 datanode 上， 则把一份拷贝放在本地机器上， 否则随机放到一个 datande 上</li><li>另一个副本放在不同的（远程）机架的节点上， 最后一个副本存放在同一个机架的不同节点上</li><li>这一策略削减了机架间的写入流量，通常提高了写入性能</li></ul></li><li>复制因子大于3， 则随机确定第4个和其它的副本位置，同时将每个拷贝的数目保持在上限以下(基本上是<code>(副本数 - 1) / racks + 2</code>)。</li></ul><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-06-02-093751.png" alt="image-20180602173750873"></p><h2 id="2-资源调度系统-YARN"><a href="#2-资源调度系统-YARN" class="headerlink" title="2. 资源调度系统 YARN"></a>2. 资源调度系统 YARN</h2><h3 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h3><ul><li>YARN:  Yet Another Resource Negotiator</li><li>负责整个集群资源的管理和调度</li><li>YAEN特点: 扩展性 &amp; 容错性 &amp; 多框架资源统一调度</li></ul><h3 id="2-2-图示"><a href="#2-2-图示" class="headerlink" title="2.2 图示"></a>2.2 图示</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-165444.png" alt="image-20180531005443543"></p><h2 id="3-分布式计算框架-MapReduce"><a href="#3-分布式计算框架-MapReduce" class="headerlink" title="3. 分布式计算框架 MapReduce"></a>3. 分布式计算框架 MapReduce</h2><h3 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1 基本概念"></a>3.1 基本概念</h3><ul><li>源于Google的MapReduce论文, 论文发表于2004年12月</li><li>MapReduce是Google MapReduce的克隆版</li><li>MapReduce的特点: 扩展性 &amp; 容错性 &amp; 海量数据离线处理</li></ul><h3 id="3-2-图示"><a href="#3-2-图示" class="headerlink" title="3.2 图示"></a>3.2 图示</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-165821.png" alt="image-20180531005821191"></p><hr><h1 id="Hadoop优势"><a href="#Hadoop优势" class="headerlink" title="Hadoop优势"></a>Hadoop优势</h1><h3 id="1-高可靠性"><a href="#1-高可靠性" class="headerlink" title="1.  高可靠性"></a>1.  高可靠性</h3><ul><li>数据存储: 数据块多副本</li><li>数据计算: 重新调度作业计算</li></ul><h3 id="2-高扩展性"><a href="#2-高扩展性" class="headerlink" title="2.  高扩展性"></a>2.  高扩展性</h3><ul><li>存储/计算资源不够时, 可以横向的线性扩展机器</li><li>一个集群中可以包含数以千计的节点</li></ul><h3 id="3-其它"><a href="#3-其它" class="headerlink" title="3.  其它"></a>3.  其它</h3><ul><li>存储在廉价机器上, 降低成本</li><li>成熟的生态圈</li></ul><hr><h1 id="Hadoop的发展史"><a href="#Hadoop的发展史" class="headerlink" title="Hadoop的发展史"></a>Hadoop的发展史</h1><p><a href="http://www.infoq.com/cn/articles/hadoop-ten-years-interpretation-and-development-forecast" target="_blank" rel="noopener">见文章: Hadoop十年解读与发展预测</a></p><p><a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop官网</a></p><hr><h1 id="Hadoop生态系统"><a href="#Hadoop生态系统" class="headerlink" title="Hadoop生态系统"></a>Hadoop生态系统</h1><h3 id="1-图示"><a href="#1-图示" class="headerlink" title="1. 图示"></a>1. 图示</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-171338.png" alt="image-20180531011337987"></p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul><li>开源,  社区活跃</li><li>囊括了大数据处理的方方面面</li><li>成熟的生态圈</li></ul><hr><h1 id="Hadoop常用发行版及选型"><a href="#Hadoop常用发行版及选型" class="headerlink" title="Hadoop常用发行版及选型"></a>Hadoop常用发行版及选型</h1><ul><li>Apache Hadoop</li><li><strong>CDH : Cloudera Distributed Hadoop</strong>  （国内用的比较多）</li><li>HDP : Hortonworks Data Platform  </li></ul><blockquote><p><strong>使用:</strong></p><p>CDH使用占比 60-70</p><p>hadoop:  hadoop-2.6.0-cdh5.7.0  </p><p>hive : hive-1.1.0-cdh5.7.0</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop核心组件&quot;&gt;&lt;a href=&quot;#Hadoop核心组件&quot; class=&quot;headerlink&quot; title=&quot;Hadoop核心组件&quot;&gt;&lt;/a&gt;Hadoop核心组件&lt;/h1&gt;&lt;h2 id=&quot;1-分布式文件系统HDFS&quot;&gt;&lt;a href=&quot;#1-分布式文件系
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/categories/Hadoop/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Hadoop/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hadoop" scheme="https://airpoet.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Java基础增强-2 并发编程</title>
    <link href="https://airpoet.github.io/2018/05/30/Java/Java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA-2/"/>
    <id>https://airpoet.github.io/2018/05/30/Java/Java基础增强-2/</id>
    <published>2018-05-30T06:28:56.938Z</published>
    <updated>2018-05-31T02:05:38.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-多线程基本知识"><a href="#1-多线程基本知识" class="headerlink" title="1. 多线程基本知识"></a>1. 多线程基本知识</h2><h3 id="1-1-多线程运行的原理"><a href="#1-1-多线程运行的原理" class="headerlink" title="1.1 多线程运行的原理"></a>1.1 多线程运行的原理</h3><blockquote><p>原理：CPU 在线程中做时间片的切换。</p></blockquote><p><strong>一个(多核中的一个) CPU</strong> 在在运行程序的过程中<strong>某个时刻点上</strong>，<strong>只能运行一个</strong>程序。而 CPU 可以在 <strong>多个程序之间进行高速的切换 (轮询制)</strong>。而切换频率和速度太快，导致人的肉眼看不到。</p><h3 id="1-2-实现线程的两种方式"><a href="#1-2-实现线程的两种方式" class="headerlink" title="1.2 实现线程的两种方式"></a>1.2 实现线程的两种方式</h3><ol><li>继承 Thread</li><li><strong>声明实现Runnable接口</strong></li><li>还可以实现Callable接口 </li></ol><h3 id="1-3-线程的状态图解"><a href="#1-3-线程的状态图解" class="headerlink" title="1.3 线程的状态图解"></a>1.3 线程的状态图解</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-063904.jpg" alt=""></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-064204.jpg" alt="Attachment.jpeg"> </p><ol><li><strong>新建状态（New）</strong>：新创建了一个线程对象。</li><li><strong>就绪状态（Runnable）</strong>：线程对象创建后，其他线程调用了该对象的 <code>start()</code>方法。该状态 的线程位于可运行线程池中，变得可运行，等待获取 CPU 的使用权。</li><li><strong>运行状态（Running）</strong>：就绪状态的线程获取了 CPU，执行程序代码。</li><li><strong>阻塞状态（Blocked）</strong>：阻塞状态是线程因为某种原因放弃 CPU 使用权，暂时停止运行。 直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul><li><strong>等待阻塞</strong>：运行的线程执行 <code>wait()</code>方法，JVM 会把该线程放入等待池中。(wait 会释 放持有的锁)</li><li><strong>同步阻塞</strong>：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池中。</li><li><strong>其他阻塞</strong>：运行的线程执行 sleep()或 join()方法，或者发出了 I/O 请求时，JVM 会把 该线程置为阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O 处理完毕 时，线程重新转入就绪状态。（注意：sleep 是不会释放持有的锁）</li></ul></li><li><strong>死亡状态（Dead）</strong>：线程执行完了或者因异常退出了 run()方法，该线程结束生命周期。</li></ol><h3 id="1-4-几个重要的方法的区别："><a href="#1-4-几个重要的方法的区别：" class="headerlink" title="1.4 几个重要的方法的区别："></a>1.4 几个重要的方法的区别：</h3><blockquote><p><strong><code>sleep(timeout)</code></strong>：当前线程进入阻塞状态，暂停执行一定时间，不会释放锁标记</p><p><strong><code>join()</code></strong>：join()方法会使当前线程等待调用 <code>join()</code>方法的线程结束后才能继续执行</p><p><strong><code>yield()</code></strong>：调用该方法的线程重回可执行状态，不会释放锁标记，可以理解为交出 CPU 时间片， 但是不一定有效果，因为有可能又被马上执行。该方法的真正作用是使具有相同或者更高优 先级的方法得到执行机会。</p><p><strong><code>wait(timeout)</code></strong>：wait 方法通常和 <code>notify()</code>/<code>notifyAll()</code>搭配使用，当前线程暂停执行，会释放锁 标记。进入对象等待池。直到调用 <code>notify()</code>方法之后，线程被移动到锁标记等待池。只有锁 标记等待池的线程才能获得锁</p></blockquote><h3 id="1-5-Join的用法"><a href="#1-5-Join的用法" class="headerlink" title="1.5 Join的用法"></a>1.5 Join的用法</h3><p><strong>联合线程:</strong></p><p>线程的join方法表示一个线程等待另一个线程完成后才执行。有人也把这种方式称为联合线程，就是说把当前线程和当前线程所在的线程联合成一个线程。join方法被调用之后，线程对象处于阻塞状态。</p><p>适用于A线程需要等到B线程执行完毕,再拿B线程的结果再继续运行A线程.</p><p>说人话: A线程需要拿到B线程的执行结果,才能继续往下.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Join</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">"This is join: "</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"begin..."</span>);</span><br><span class="line">        Join joinThread = <span class="keyword">new</span> Join();<span class="comment">//创建join线程对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main: "</span> +i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="comment">//启动join对象</span></span><br><span class="line">                joinThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>)&#123;</span><br><span class="line">                System.out</span><br><span class="line">                        .println(<span class="string">"------------------------------------------"</span>);</span><br><span class="line">                joinThread.join();<span class="comment">//在此处强制运行该线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">===================执行结果===================</span><br><span class="line">begin...</span><br><span class="line">main: <span class="number">0</span></span><br><span class="line">main: <span class="number">1</span></span><br><span class="line">main: <span class="number">2</span></span><br><span class="line">main: <span class="number">3</span></span><br><span class="line">main: <span class="number">4</span></span><br><span class="line">main: <span class="number">5</span></span><br><span class="line">main: <span class="number">6</span></span><br><span class="line">main: <span class="number">7</span></span><br><span class="line">main: <span class="number">8</span></span><br><span class="line">main: <span class="number">9</span></span><br><span class="line">main: <span class="number">10</span></span><br><span class="line">main: <span class="number">11</span></span><br><span class="line">main: <span class="number">12</span></span><br><span class="line">main: <span class="number">13</span></span><br><span class="line">This is join: <span class="number">0</span></span><br><span class="line">main: <span class="number">14</span></span><br><span class="line">This is join: <span class="number">1</span></span><br><span class="line">This is join: <span class="number">2</span></span><br><span class="line">This is join: <span class="number">3</span></span><br><span class="line">main: <span class="number">15</span></span><br><span class="line">This is join: <span class="number">4</span></span><br><span class="line">main: <span class="number">16</span></span><br><span class="line">main: <span class="number">17</span></span><br><span class="line">main: <span class="number">18</span></span><br><span class="line">main: <span class="number">19</span></span><br><span class="line">main: <span class="number">20</span></span><br><span class="line">------------------------------------------</span><br><span class="line">This is join: <span class="number">5</span></span><br><span class="line">This is join: <span class="number">6</span></span><br><span class="line">This is join: <span class="number">7</span></span><br><span class="line">This is join: <span class="number">8</span></span><br><span class="line">This is join: <span class="number">9</span></span><br><span class="line">This is join: <span class="number">10</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">This is join: <span class="number">44</span></span><br><span class="line">This is join: <span class="number">45</span></span><br><span class="line">This is join: <span class="number">46</span></span><br><span class="line">This is join: <span class="number">47</span></span><br><span class="line">This is join: <span class="number">48</span></span><br><span class="line">This is join: <span class="number">49</span></span><br><span class="line">main: <span class="number">21</span></span><br><span class="line">main: <span class="number">22</span></span><br><span class="line">main: <span class="number">23</span></span><br><span class="line">main: <span class="number">24</span></span><br><span class="line">main: <span class="number">25</span></span><br><span class="line">main: <span class="number">26</span></span><br><span class="line">main: <span class="number">27</span></span><br><span class="line">main: <span class="number">28</span></span><br><span class="line">main: <span class="number">29</span></span><br><span class="line">main: <span class="number">30</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-Java同步关键词解释"><a href="#2-Java同步关键词解释" class="headerlink" title="2.  Java同步关键词解释"></a>2.  Java同步关键词解释</h2><h3 id="2-1-synchronized"><a href="#2-1-synchronized" class="headerlink" title="2.1.  synchronized"></a>2.1.  synchronized</h3><p>属于 JVM 级别加锁，底层实现是： 在编译过程中，在指令级别加入一些标识来实现的。</p><p><strong>1.  锁对象注意点: 必须是锁的同一个对象</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-232550.jpg" alt=""></p><p><strong>2.  锁获取和释放</strong></p><ul><li>锁的获取是由JVM决定的, 用户无法操作</li><li>锁的释放也是由JVM决定的</li><li><code>Synchronized</code> 无法中断正在阻塞队列或者等待队列的线程。</li></ul><p><strong>3.  什么时候会释放</strong></p><ul><li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li><li>线程执行发生异常，此时 JVM 会让线程自动释放锁。</li></ul><p><strong>4.格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加同步格式：</span></span><br><span class="line"><span class="keyword">synchronized</span>(需要一个任意的对象（锁）)&#123;</span><br><span class="line">代码块中放操作共享数据的代码。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.线程执行互斥代码的过程</strong></p><ol><li><p>获得互斥锁</p></li><li><p>清空工作内存</p></li><li><p>从主内存拷贝变量的最新副本到工作内存</p></li><li><p>执行代码</p></li><li><p>将更新后的共享变量的值刷新到主内存</p></li><li><p>释放互斥锁</p><p><code>Lock -&gt; 主内存 -&gt; 工作内存 -&gt; 主内存 -&gt; unlock</code></p></li></ol><h3 id="2-2-Lock"><a href="#2-2-Lock" class="headerlink" title="2.2  Lock"></a>2.2  Lock</h3><p><strong>手动获取或释放锁, 提供了比 synchronized 更多的功能</strong></p><p>Lock 锁是 <strong>Java 代码级别</strong>来实现的，相对于 synchronized 在功能性上，有所加强，主要是，公平锁，轮 询锁，定时锁，可中断锁等，还增加了多路通知机制（Condition），可以用一个锁来管理多 个同步块。另外在使用的时候，必须手动的释放锁。Lock 锁的实现，主要是借助于队列同 步器（我们常常见到的 AQS）来实现。它包括一个 int 变量来表示状态；一个 FIFO 队列，来 存储获取资源的排队线程。</p><p><strong>基本使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一把锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// 需要做同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();     <span class="comment">//获取🔐, 加锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">// 释放🔐</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-lock-和-synchronized-的区别"><a href="#1-lock-和-synchronized-的区别" class="headerlink" title="1. lock 和 synchronized 的区别"></a>1. lock 和 synchronized 的区别</h4><ol><li>Lock 不是 Java 语言内置的，<strong>synchronized 是 Java 语言的关键字，因此是内置特性</strong>。<strong>Lock 是一个类</strong>，通过这个类可以实现同步访问；</li><li>Lock 和 synchronized 有一点非常大的不同，采用 <strong>synchronized 不需要用户去手动释放锁</strong>， 当 synchronized 方法或者 synchronized 代码块执行完之后，系统会自动让线程释放对锁的占 用；而 <strong>Lock 则必须要用户去手动释放锁</strong>，如果没有主动释放锁，就有可能导致出现死锁现 象。</li></ol><h4 id="2-Lock-接口中方法的使用"><a href="#2-Lock-接口中方法的使用" class="headerlink" title="2. Lock 接口中方法的使用"></a>2. Lock 接口中方法的使用</h4><blockquote><p><strong>ReentrantLock 类</strong></p><p>ReentrantLock 是唯一实现了 Lock 接口的类，并且 ReentrantLock 提供了更多的方法，ReentrantLock，意思是“可重入锁”。        </p><p><code>lock()、tryLock()、tryLock(long time, TimeUnit unit)、lockInterruptibly()</code>是用来获取锁的。</p><p><code>unLock()</code>方法是用来释放锁的。</p></blockquote><p><strong>四个获取锁方法的区别</strong></p><ol><li><strong><code>lock()</code>，阻塞方法</strong>，该方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被 其他线程获取，则进行等待。由于在前面讲到如果采用 Lock，必须主动去释放锁，并且在 发生异常时，不会自动释放锁。因此一般来说，使用 Lock 必须在 try{}catch{}块中进行，并 且将释放锁的操作放在 finally 块中进行，以保证锁一定被被释放，防止死锁的发生。</li><li><p><strong><code>tryLock()</code>，非阻塞方法</strong>，该方法是有返回值的，它表示用来尝试获取锁，如果获取成功， 则返回 true，如果获取失败（即锁已被其他线程获取），则返回 false，也就说这个方法无论 如何都会立即返回。在拿不到锁时不会一直在那等待。</p></li><li><p><code>tryLock(long time, TimeUnit unit)</code>，阻塞方法，阻塞给定时长，该方法和 tryLock()方法是 类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还 拿不到锁，就返回 false。如果一开始拿到锁或者在等待期间内拿到了锁，则返回 true。</p></li><li><p><code>lockInterruptibly()</code>这个方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待 获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通 过 lock.lockInterruptibly()想获取某个锁时，假若此时线程 A 获取到了锁，而线程 B 只有在等 待，那么对线程 B 调用 <code>threadB.interrupt()</code>方法能够中断线程 B 的等待过程。</p></li></ol><h3 id="2-3-Lock-与-synchronized-的选择"><a href="#2-3-Lock-与-synchronized-的选择" class="headerlink" title="2.3 Lock 与 synchronized 的选择"></a>2.3 Lock 与 synchronized 的选择</h3><ol><li>Lock 是一个接口，而 synchronized 是 Java 中的关键字，synchronized 是内置的语言实现；</li><li>synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生； 而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因 此使用 Lock 时需要在 finally 块中释放锁；</li><li>Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等 待的线程会一直等待下去，不能够响应中断；</li><li>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</li><li>Lock 可以提高多个线程进行读操作的效率。</li></ol><h3 id="2-4-读写锁"><a href="#2-4-读写锁" class="headerlink" title="2.4 读写锁"></a>2.4 读写锁</h3><ul><li><strong>线程进入读锁的前提条件</strong>：     没有其他线程的写锁, 没有写请求或者有写请求，但调用线程和持有锁的线程是同一个  </li><li><strong>线程进入写锁的前提条件</strong>：     没有其他线程的读锁, 没有其他线程的写锁</li></ul><p><strong>ReentrantReadWriteLock 与 ReentrantLock 都是单独的实现，彼此之间没有继承或实现的关系。</strong></p><h4 id="ReadWriteLock-类"><a href="#ReadWriteLock-类" class="headerlink" title="ReadWriteLock 类"></a>ReadWriteLock 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="comment">// 可以区别对待读、写的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReentrantReadWriteLock-类"><a href="#ReentrantReadWriteLock-类" class="headerlink" title="ReentrantReadWriteLock 类"></a>ReentrantReadWriteLock 类</h4><blockquote><p> ReentrantReadWriteLock 里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和 writeLock()用来获取读锁和写锁。</p></blockquote><p>注意：不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写 锁，则申请写锁的线程会一直等待释放读锁。</p><p>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程 会一直等待释放写锁。</p><h3 id="2-5-死锁"><a href="#2-5-死锁" class="headerlink" title="2.5 死锁"></a>2.5 死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种<strong>互相等待</strong>的现象， 若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起 无法完成任务。</p><p><strong>死锁的发生必须满足</strong>以下四个条件：</p><ul><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p><strong>避免死锁</strong>最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规 定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁</p><h3 id="2-6-Volatile-特殊域变量"><a href="#2-6-Volatile-特殊域变量" class="headerlink" title="2.6 Volatile 特殊域变量"></a>2.6 Volatile 特殊域变量</h3><p>多线程编程，我们要解决的问题集中在三个方面：</p><ol><li><strong>原子性。</strong>最简单的例子就是，i++,在多线程环境下，最终的结果是不确定的，为什么？就 是因为这么一个++操作，被编译为计算机底层指令后，是多个指令来完成的。那么遇到并发 的情况，就会导致彼此“覆盖”的情况。</li><li><strong>可见性。</strong>通俗解释就是，在 A 线程对一个变量做了修改，在 B 线程中，能正确的读取到 修改后的结果。究其原理，是 cpu 不是直接和系统内存通信，而是把变量读取到 L1，L2 等 内部的缓存中，也叫作私有的数据工作栈。修改也是在内部缓存中，但是何时同步到系统内 存是不能确定的，有了这个时间差，在并发的时候，就可能会导致，读到的值，不是最新值。</li><li><strong>指令重排。</strong>这里只说指令重排序，虚拟机在把代码编译为指令后执行，出于优化的目的， 在保证结果不变的情况下，可能会调整指令的执行顺序。</li></ol><p>valotile，能满足上述的可见性和有序性。但是无法保证原子性。</p><p>可见性，是在修改后，强制把对变量的修改同步到系统内存。而其他 cpu 在读取自己的内部 缓存中的值的时候，发现是 valotile 修饰的，会把内部缓存中的值，置为无效，然后从系统 内存读取。</p><p>有序性，是通过内存屏障来实现的。所谓的内存屏障，可以理解为，在某些指令中，插入屏 障指令，用以确保，在向屏障指令后面继续执行的时候，其前面的所有指令已经执行完毕。</p><h2 id="3-Java多线程中常见的面试题"><a href="#3-Java多线程中常见的面试题" class="headerlink" title="3.  Java多线程中常见的面试题"></a>3.  Java多线程中常见的面试题</h2><h4 id="1-sleep-wait-join-yield-四个方法的区别"><a href="#1-sleep-wait-join-yield-四个方法的区别" class="headerlink" title="1. sleep(),wait(),join(),yield()四个方法的区别"></a>1. <code>sleep(),wait(),join(),yield()</code>四个方法的区别</h4><p>总结：</p><p>1）：sleep()，Thread 类中的方法，表示当前线程进入阻塞状态，不释放锁</p><p>2）：wait()，Object 类中的方法，表示线程进入等待状态，释放锁，所以一般能调用这个方 法的都是同步代码块，或者获取了锁的线程代码，通常和 notify()和 notifyAll()方法结合使用</p><p>3）：join()，Thread 类中的方法，假如在 a 线程中调用 b 线程对象的 join()方法，表示当前 a 线程阻塞，直到 b 线程运行结束</p><p>4）：yield()，Thread 类中的方法，表示线程回可执行状态。跟 sleep 方法一样，也不交出锁， 只不过不带时间参数，是指交出 cpu</p><h4 id="2-Thread-和-Runnable-的区别"><a href="#2-Thread-和-Runnable-的区别" class="headerlink" title="2. Thread 和 Runnable 的区别"></a>2. <code>Thread</code> 和 <code>Runnable</code> 的区别</h4><p>总结：</p><p>实现 Runnable 接口比继承 Thread 类所具有的优势：</p><p>1）：适合多个相同的程序代码的线程去处理同一个资源</p><p>2）：可以避免 java 中的单继承的限制</p><p>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</p><p>4）：线程池只能放入实现 Runable 或 callable 类线程，不能直接放入继承 Thread 的类</p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-多线程基本知识&quot;&gt;&lt;a href=&quot;#1-多线程基本知识&quot; class=&quot;headerlink&quot; title=&quot;1. 多线程基本知识&quot;&gt;&lt;/a&gt;1. 多线程基本知识&lt;/h2&gt;&lt;h3 id=&quot;1-1-多线程运行的原理&quot;&gt;&lt;a href=&quot;#1-1-多线程运行的原
      
    
    </summary>
    
      <category term="Java" scheme="https://airpoet.github.io/categories/Java/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Java/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础增强-1 集合反射设计模式排序</title>
    <link href="https://airpoet.github.io/2018/05/29/Java/Java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA-1/"/>
    <id>https://airpoet.github.io/2018/05/29/Java/Java基础增强-1/</id>
    <published>2018-05-29T01:39:15.028Z</published>
    <updated>2018-05-31T01:21:12.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、集合框架"><a href="#1、集合框架" class="headerlink" title="1、集合框架"></a>1、集合框架</h1><h2 id="1-1-、集合框架体系图"><a href="#1-1-、集合框架体系图" class="headerlink" title="1.1  、集合框架体系图"></a>1.1  、集合框架体系图</h2><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-030737.jpg" alt=""></p><h4 id="Java-的集合框架主要分为五大类体系："><a href="#Java-的集合框架主要分为五大类体系：" class="headerlink" title="Java  的集合框架主要分为五大类体系："></a>Java  的集合框架主要分为五大类体系：</h4><p>1、Collection（常用的 List 和 Set，和不常用的 Queue 和 Vector 和 Stack），单元素集合<br>2、Map（常用的 HashMap 和 TreeMap，不常用的 HashTable），Key-Value 映射<br>3、Iterator（迭代器）<br>4、工具类（Collections 和 Arrays）<br>5、Comparable 和 Comparator 比较器</p><h4 id="Java-中的集合和数组的区别"><a href="#Java-中的集合和数组的区别" class="headerlink" title="Java  中的集合和数组的区别:"></a>Java  中的集合和数组的区别:</h4><p>1、数组长度在初始化时指定，意味着只能保存定长的数据。而集合可以保存数量不确定的 数据。同时可以保存具有映射关系的数据（即关联数组，键值对 key-value）。</p><p>2、数组元素即可以是基本类型的值，也可以是对象。集合里只能保存对象（实际上只是保存对象的引用变量），基本数据类型的变量要转换成对应的包装类才能放入集合类中。</p><h4 id="Collection-接口中的方法："><a href="#Collection-接口中的方法：" class="headerlink" title="Collection 接口中的方法："></a>Collection 接口中的方法：</h4><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-031118.jpg" alt=""></p><h4 id="Map-接口中的方法："><a href="#Map-接口中的方法：" class="headerlink" title="Map 接口中的方法："></a>Map 接口中的方法：</h4><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-031258.jpg" alt=""></p><h2 id="1-2、常用集合特性概述"><a href="#1-2、常用集合特性概述" class="headerlink" title="1.2、常用集合特性概述"></a>1.2、常用集合特性概述</h2><h3 id="1-2-1-List-系"><a href="#1-2-1-List-系" class="headerlink" title="1.2.1 List 系"></a>1.2.1 List 系</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-032801.jpg" alt=""></p><p>List 特点：<strong>元素有放入顺序，元素可重复</strong></p><p>List 接口有三个实现类：LinkedList，ArrayList，Vector</p><p>LinkedList：底层基于链表实现，链表内存是散乱的，每一个元素存储本身内存地址的同时还 存储下一个元素的地址。<strong>链表增删快，查找慢</strong></p><p><strong>ArrayList 和 Vector 底层都是基于数组实现的，查询快，增删慢</strong>，区别是 ArrayList 是非线程安全的，效率高；Vector 是基于线程安全的，效率低</p><p><strong>ArrayList 的初始化大小是 10，扩容策略是 1.5 倍原元素数量的大小</strong></p><h4 id="数组-初始容量-扩容-jdk10"><a href="#数组-初始容量-扩容-jdk10" class="headerlink" title="数组 初始容量+扩容 (jdk10)"></a>数组 <strong>初始容量+扩容</strong> (jdk10)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">                <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">            <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">            <span class="keyword">return</span> minCapacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (newCapacity - MAX_ARRAY_SIZE &lt;= <span class="number">0</span>)</span><br><span class="line">            ? newCapacity</span><br><span class="line">            : hugeCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>选择标准：</strong></p><p>如果涉及到“动态数组”、“栈”、“队列”、“链表”等结构，应该考虑用 List，具体的选择哪 个 List，根据下面的标准来取舍。</p><p>1、对于需要快速插入，删除元素，应该使用 LinkedList。（增删改）</p><p>2、对于需要快速随机访问元素，应该使用 ArrayList。（查询）</p><p>3、对于“单线程环境”或者“多线程环境，但 List 仅仅只会被单个线程操作”，此时应该使 用非同步的类(如 ArrayList)。对于“多线程环境，且 List 可能同时被多个线程操作”，此时， 应该使用同步的类(如 Vector)。</p><h4 id="LinkedList-add-E-e"><a href="#LinkedList-add-E-e" class="headerlink" title="LinkedList  add(E e)"></a>LinkedList  add(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># add(E e) 源码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-2-2、Set-系"><a href="#1-2-2、Set-系" class="headerlink" title="1.2.2、Set 系"></a>1.2.2、Set 系</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-033547.jpg" alt=""></p><p><strong>Set</strong> 特点：<strong>元素放入无顺序，元素不可重复</strong></p><p><strong>Set</strong> 接口的实现类：HashSet，TreeSet，LinkedHashSet</p><p><strong>HashSet</strong>（底层由 HashMap 实现）底层通过 hashCode()和 equals()进行去重。</p><h4 id="HashSet-内部判断相等的标准"><a href="#HashSet-内部判断相等的标准" class="headerlink" title="HashSet 内部判断相等的标准"></a>HashSet 内部判断相等的标准</h4><p><em>HashSet 判断两个元素相等的标准</em>：</p><p>​    两个对象通过 equals()方法比较相等，并且两个对象的 hashCode()方法返回值也相等</p><p><strong>HashSet 中判断集合元素相等，</strong>两个对象比较具体分为如下四个情况：</p><ol><li>如果有两个元素通过 equal()方法比较返回 false，并且它们的 hashCode()方法返回不相等，</li></ol><p>HashSet 将会把它们存储在不同的位置。</p><ol start="2"><li>如果有两个元素通过 equal()方法比较返回 true，并且它们的 hashCode()方法返回不相等，</li></ol><p>HashSet 将会把它们存储在不同的位置。</p><ol start="3"><li>如果两个对象通过 equals()方法比较不相等，hashCode()方法比较相等，HashSet 将会把它们存储在相同的位置，在这个位置以链表式结构来保存多个对象。这是因为当向 HashSet 集合中存入一个元素时，HashSet 会调用对象的 hashCode()方法来得到对象的 hashCode 值， 然后根据该 hashCode 值来决定该对象存储在 HashSet 中存储位置。</li><li>如果有两个元素通过 equal()方法比较返回 true，并且它们的 hashCode()方法返回 true，HashSet 将不予添加。</li></ol><p><strong>LinkedHashSet</strong>，是 HashSet 的子类，在插入元素的时候，同时使用链表维持插入元素的顺序</p><p><strong>SortedSet</strong> 接口有一个实现类：TreeSet（底层由平衡二叉树实现）确保集合中的元素都是出于排序状态</p><p>注意 <strong>LinkedHashSet</strong> 和 <em>SortedSet</em> 区别，前者<strong>存插入顺序</strong>，后者<em>存插入之后的顺序</em></p><p><strong>另外:</strong> </p><p>JDK5 : 桶表 + 链表</p><p>JDK8 : 桶表 + 链表 + 二叉树 </p><pre><code>- **二叉树**: 检索深度 &gt; 8 的时候, 转化为二叉树, 减少查询深度</code></pre><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-035232.jpg" alt=""></p><h4 id="HashSet-—-HashMap-的源码实现"><a href="#HashSet-—-HashMap-的源码实现" class="headerlink" title="HashSet — HashMap 的源码实现"></a>HashSet — HashMap 的源码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> * 桶表默认容量 16</span></span><br><span class="line"><span class="comment"> * 控制hashcode 不超16范围, a.hashcode = xx % 16 (hashcode 取模 桶个数)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> * 桶表最大 2^30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容因子: 0.75</span></span><br><span class="line"><span class="comment"> * 扩容: 每次2倍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表: hash算法值相同的时候, 会把值相同的放在一个链表上, 链表上的元素个数</span></span><br><span class="line"><span class="comment"> * 超过8个时, 转化为二叉树, 提升查询效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment"> * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment"> * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h4 id="TreeSet的默认排序"><a href="#TreeSet的默认排序" class="headerlink" title="TreeSet的默认排序"></a>TreeSet的默认排序</h4><ul><li>TreeSet是有序的不可重复的, 有序是指元素值的大小</li><li>数值类型: 按照大小进行升序排序</li><li>字符串类型: 按照字典顺序进行升序排序<ul><li>字符串从左到右, 一位一位的比较</li></ul></li><li>自定义TreeSet类型: 实现 <code>compareTo</code>方法, <strong>返回为0</strong>的情况会默认<strong>覆盖</strong></li></ul><hr><h3 id="1-2-2、Map-系"><a href="#1-2-2、Map-系" class="headerlink" title="1.2.2、Map 系"></a>1.2.2、Map 系</h3><p><strong>Map 特点</strong>：存储的元素是键值对，在 JDK1.8 版本中是 Node，在老版本中是 Entry</p><p><strong>Map 接 口 有 五 个 常用 实 现 类</strong> ： HashMap ， HashTable ， LinkeHashMap ， TreeMap ，</p><p><u>ConcurrentHashMap</u></p><h4 id="1-HashMap-amp-Hashtable-的区别"><a href="#1-HashMap-amp-Hashtable-的区别" class="headerlink" title="1. HashMap &amp; Hashtable 的区别"></a>1. HashMap &amp; Hashtable 的区别</h4><p><strong>HashMap</strong></p><pre><code>1.   非线程安全, 效率高   2.   key不可以重复   3.   key可以为null,  但只能有一个key为null</code></pre><p><strong>Hashtable</strong></p><ol><li>线程安全, 效率低</li><li>key不可以重复</li><li>不可以为null</li></ol><h4 id="2-concurrentHash-简单分析"><a href="#2-concurrentHash-简单分析" class="headerlink" title="2. concurrentHash 简单分析"></a>2. concurrentHash 简单分析</h4><p>是从 JDK1.5 之后提供的一个 HashTable 的替代实现，采 一个 map 中的元素分成很多的 segment，通过 lock 机制可以对每个 segment 加读写锁，从 而提高 map 的效率，底层实现采用数组+链表+红黑树的存储结构</p><ul><li>Java并发包中的,  既是线程安全的, 又不至于效率过低</li><li>怎么实现: <strong>分段锁机制</strong><ul><li>分段锁: 只加载在某一段数据上</li></ul></li><li>MySql: 查询 - 95%,  增删改 - 5%<ul><li><strong>读锁:  共享锁,</strong>  一个线程进行操作的时候不应吸纳另一个线程的结构</li><li><strong>写锁:  排它锁,</strong>  一个线程在进行操作的时候不允许其他任何线程的操作</li></ul></li></ul><h4 id="3-put-amp-get-的流程"><a href="#3-put-amp-get-的流程" class="headerlink" title="3. put &amp; get 的流程"></a>3. put &amp; get 的流程</h4><p><strong>put 的大致流程如下：</strong></p><ol><li>通过 hashcode 方法计算出 key 的 hash 值</li><li>通过 hash%length 计算出存储在 table 中的 index（源码中是使用 hash&amp;(length-1)，这样结 果相同，但是更快）</li><li>如果此时 table[index]的值为空，那么就直接存储，如果不为空那么就链接到这个数所在 的链表的头部。（在 JDK1.8 中，如果链表长度大于 8 就转化成红黑树）</li></ol><p><strong>get 的大致流程如下：</strong></p><ol><li><p>通过 hashcode 计算出 key 的 hash 值</p></li><li><p>通过 hash%length 计算出存储在 table 中的 index（源码中是使用 hash&amp;(length-1)，这样结 果相同，但是更快）</p></li><li>遍历 table[index]所在的链表，只有当 key 与该节点中的 key 的值相同时才取出。</li></ol><h2 id="1-3-掌握重点"><a href="#1-3-掌握重点" class="headerlink" title="1.3 掌握重点"></a>1.3 掌握重点</h2><p><strong>List</strong>:  ArrayList,   LinkList</p><p><strong>Set</strong>:   HashSet,    TreeSet</p><ul><li>需要掌握的方法:  add ,   get,    contains</li></ul><p><strong>Map</strong>:  HashMap, TreeMap  </p><ul><li>需要掌握的方法:    put    get    map的循环遍历    containsKey….</li></ul><blockquote><p>以上的都需要跟下源码</p></blockquote><h2 id="1-4-功能方法"><a href="#1-4-功能方法" class="headerlink" title="1.4 功能方法"></a>1.4 功能方法</h2><h4 id="1-4-1-List-的功能方法"><a href="#1-4-1-List-的功能方法" class="headerlink" title="1.4.1 List 的功能方法"></a>1.4.1 List 的功能方法</h4><p><strong>ArrayList</strong>: 由数组实现的 List。允许对元素进行快速随机访问，但是向 List 中间插入与移 除元素的速度很慢。ListIterator 只应该用来由后向前遍历 ArrayList，而不是用来插入和移除 元素。因为那比 LinkedList 开销要大很多。</p><p><strong>LinkedList</strong> : 对顺序访问进行了优化，向 List 中间插入与删除的开销并不大。随机访问则 相对较慢。(使用 ArrayList 代替。)还具有下列方 法：addFirst(), addLast(), getFirst(), getLast(), removeFirst() 和 removeLast(), 这些方法 (没有在任何接口或基类中定义过)使得 LinkedList 可以当作堆栈、队列和双向队列使用。</p><h4 id="1-4-2-Set的功能方法"><a href="#1-4-2-Set的功能方法" class="headerlink" title="1.4.2 Set的功能方法"></a>1.4.2 Set的功能方法</h4><p><strong>Set</strong> : 存入 Set 的每个元素都必须是唯一的，因为 Set 不保存重复元素。加入 Set 的元素 必须定义 equals()方法以确保对象的唯一性。Set 与 Collection 有完全一样的接口。Set 接口 不保证维护元素的次序。</p><p><strong>HashSet</strong> : 为快速查找设计的 Set。存入 HashSet 的对象必须定义 hashCode()。</p><p>TreeSet : 保存次序的 Set，底层为树结构。使用它可以从 Set 中提取有序的序列。</p><p><strong>LinkedHashSet</strong> : 具有 HashSet 的查询速度，且内部使用链表维护元素的顺序(插入的次 序 。于是在使用迭代器遍历 Set 时，结果会按元素插入的次序显示。</p><h4 id="1-4-3-Map-的功能方法"><a href="#1-4-3-Map-的功能方法" class="headerlink" title="1.4.3 Map 的功能方法"></a>1.4.3 Map 的功能方法</h4><p>Map : 维护“键值对”的关联性，使你可以通过“键”查找“值”</p><p><strong>HashMap</strong> : Map 基于散列表的实现。插入和查询“键值对”的开销是固定的。可以通过 构造器设置容量 capacity 和负载因子 load factor，以调整容器的性能。</p><p><strong>LinkedHashMap</strong> : 类似于 HashMap，但是迭代遍历它时，取得“键值对”的顺序是其插 入次序，或者是最近最少使用(LRU)的次序。只比 HashMap 慢一点。而在迭代访问时发而更 快，因为它使用链表维护内部次序。</p><p><strong>TreeMap</strong> : 基于红黑树数据结构的实现。查看“键”或“键值对”时，它们会被排序(次 序由 Comparabel 或 Comparator 决定)。TreeMap 的特点在 于，你得到的结果是经过排序的。 TreeMap 是唯一的带有 subMap()方法的 Map，它可以返回一个子树。</p><p>WeakHashMap : 弱键(weak key)Map，Map 中使用的对象也被允许释放: 这是为解决特 殊问题设计的。如果没有 map 之外的引用指向某个“键”，则此“键”可以被垃圾收集器回 收。</p><p>IdentifyHashMap : 使用==代替 equals()对“键”作比较的 hash map。专为解决特殊问题 而设计。</p><hr><h1 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h1><h3 id="2-1-反射"><a href="#2-1-反射" class="headerlink" title="2.1 反射"></a>2.1 反射</h3><p><strong>反射</strong>: 将 Java 类中的各个<strong>成分</strong> (属性, 方法, 构造方法) <strong>映射成对应的类</strong></p><ul><li>在运行时判断任意一个对象的所属的类 Class。</li><li>在运行时判断构造任意一个类的对象 Constructor。</li><li>在运行时判断任意一个类所具有的成员变量 Field 和方法 Method。</li><li>在运行时调用任意一个对象的方法。method.invoke(object, args)</li></ul><p><strong>反射的好处</strong></p><ul><li>提高了整个代码的灵活性</li><li>不需要知道细节</li></ul><p>反射用的最多的时候, 就是写框架的时候</p><p><strong>反射中需要掌握3个类:</strong> </p><ul><li>Constructor: 构造器的描述类</li><li>Field: 属性的描述类</li><li>Method: 方法的描述类</li></ul><p><strong>Java 预定义类型</strong></p><p>是否是预定义类型: <code>isPromitive()</code>,  8种基本数据类型 + void 都是预定义类型</p><p>引用类型, 包装类不是预定义类型.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">int</span>.class.isPrimitive());     <span class="comment">// true</span></span><br><span class="line">System.out.println(Integer.class.isPrimitive()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Class"><a href="#2-2-Class" class="headerlink" title="2.2 Class"></a>2.2 Class</h3><p><strong>Class</strong> : 用于<strong>描述所有类的类</strong>,  Class 类描述了类的属性信息，如类名、访问权限、包名、字 段名称列表、方法名称列表等,  <strong>Class就是反射的基础.</strong></p><p><strong>获取Class的3种方式</strong></p><pre><code>1. `Class.forName`(&quot;类名字符串&quot;) (注意：类名字符串必须是全称，包名+类名)- 如果 `.class`已经被加载到内存了, 直接返回- 如果没有的话, 就先加载到内存2. `类名.class`   3. `实例对象.getClass()`</code></pre><h3 id="2-3-Constructor"><a href="#2-3-Constructor" class="headerlink" title="2.3 Constructor"></a>2.3 Constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="comment">// 补充: 可变参数  Class&lt;?&gt;... parameterTypes</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException &#123;&#125; </span><br><span class="line"></span><br><span class="line">================<span class="comment">//使用=============================</span></span><br><span class="line"><span class="comment">////////获取构造方法//////////</span></span><br><span class="line"><span class="comment">// 获取某个类的所有构造方法：</span></span><br><span class="line">Constructor[] constructor = Class.forName(<span class="string">"java.lang.String"</span>).getConstructors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个特殊（特定参数）的构造方法：</span></span><br><span class="line">Constructor constructor = Class.forName(<span class="string">"java.lang.String"</span>).getConstructor(StringBuffer.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">////////创建实例对象//////////</span></span><br><span class="line"><span class="comment">// 通常方式，直接调用构造方法：</span></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"huangbo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射方式：调用实参构造</span></span><br><span class="line">String str = (String)constructor.newInstance(<span class="keyword">new</span> StringBuffer(<span class="string">"huangbo"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射方式：调用空参构造</span></span><br><span class="line">String obj = (String)Class.forName(<span class="string">"java.lanng.String"</span>).newInstance();</span><br><span class="line"></span><br><span class="line">只有两个类拥有 newInstance()方法，分别是 Class 类和 Constructor 类 </span><br><span class="line">Class 类中的 newInstance() 方法是不带参数的，</span><br><span class="line">Constructor 类中的 newInstance()方法是带参数的(Object)，需要提供 必要的参数</span><br></pre></td></tr></table></figure><h3 id="2-4-Field"><a href="#2-4-Field" class="headerlink" title="2.4 Field"></a>2.4 Field</h3><p><code>Field</code>类代表某个类中的一个成员变量，设有一个 obj 对象，Field 对象不是 obj 具体的变量值， 而是指代的是 obj 所属类的哪一个变量，可以通过 <code>Field(对象).get(obj)</code>获取相应的变量值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">================<span class="comment">//使用=============================</span></span><br><span class="line"><span class="comment">// getField 方法只能获取声明为 public 的变量，对于私有变量，可以通过 getDeclaredField()方法获 取 private 变量</span></span><br><span class="line">Field field = obj.getClass().getDeclaredField();</span><br><span class="line"><span class="comment">// 将 private 变量设置为可访问；继承自父类AccessibleObject 的方法才可获取变量值</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>); </span><br><span class="line"><span class="comment">// 获得对象值, 传入对象</span></span><br><span class="line">field.get(obj); </span><br><span class="line"><span class="comment">// 反射替换,设置对象值</span></span><br><span class="line"><span class="comment">// 传入对象,值</span></span><br><span class="line"><span class="comment">// 把 obj 对象的 field 属性的值替换为 newValue</span></span><br><span class="line">field.set(obj,newValue)</span><br></pre></td></tr></table></figure><h3 id="2-5-Method"><a href="#2-5-Method" class="headerlink" title="2.5 Method"></a>2.5 Method</h3><p>Method 类代表某个类中的成员方法</p><p>Method 对象不是具体的方法，而是来代表类中哪一个方法，与对象无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取: 得到类中某一个方法：</span></span><br><span class="line">Method methodCharAt = Class.forName(<span class="string">"java.lang.String"</span>).getMethod(<span class="string">"charAt"</span>,<span class="keyword">int</span>.class)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getMethod 方法用于得到一个方法对象，该方法接受的参数首先要有该方法名（String 类型），</span></span><br><span class="line"><span class="comment">// 然后通过参数列表来区分重载那个方法，参数类型用 Class 对象来表示(如为 int 就用 int.class)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 调用方法：</span></span><br><span class="line"><span class="comment">//普通方式：</span></span><br><span class="line">str.charAt(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//反射方式：</span></span><br><span class="line">methodCharAt.invoke(str,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 以上两种调用方式等价</span></span><br></pre></td></tr></table></figure><h1 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3. 设计模式"></a>3. 设计模式</h1><p>设计模式（Design pattern）代表了面向对象编程中最佳的实践，通常被有经验的面向对象的 软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方 案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式只不过针对某些具体场景提供了一些效率较高的以复杂度换灵活性的手段而已</p><p><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">推荐学习站点</a></p><h3 id="3-1-设计模式-–-六大原则"><a href="#3-1-设计模式-–-六大原则" class="headerlink" title="3.1 设计模式 – 六大原则"></a>3.1 设计模式 – 六大原则</h3><p><strong>总原则：开闭原则</strong>（Open Close Principle）</p><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的 代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的 扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的 具体设计中我们会提到这点。</p><p><strong>六大原则：</strong></p><ol><li><p><strong>单一职责原则</strong> </p><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就 应该把类拆分。</p></li><li><p><strong>里氏替换原则</strong>（Liskov Substitution Principle）</p><p>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p></li><li><p><strong>依赖倒转原则</strong>（Dependence Inversion Principle）</p><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码 时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p></li><li><p><strong>接口隔离原则</strong>（Interface Segregation Principle）</p><p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将 接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p></li><li><p><strong>迪米特法则</strong>（最少知道原则）（Demeter Principle）</p><p>就是说：一个类对自己依赖的类知道的越少越好 。也就是说无论被依赖的类多么复杂，都 应该将逻辑封装在方法的内部，通过 public 方法提供给外部。这样当被依赖的类变化时，才 能最小的影响该类。</p></li><li><p><strong>合成复用原则</strong>（Composite Reuse Principle）</p><p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p></li></ol><h3 id="3-2-设计模式-–-分类"><a href="#3-2-设计模式-–-分类" class="headerlink" title="3.2 设计模式 – 分类"></a>3.2 设计模式 – 分类</h3><p>总体来说设计模式分为三大类：</p><ul><li><strong>创建型模式</strong>，共五种：工厂方法模式、抽象工厂模式、<u><strong>单例模式</strong></u>、建造者模式、原型模式。</li><li><strong>结构型模式</strong>，共七种：适配器模式、<u><strong>装饰器模式</strong></u>、<u><strong>代理模式</strong></u>、外观模式、桥接模式、组合 模式、享元模式。</li><li><strong>行为型模式</strong>，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模 式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><h3 id="3-3-常见设计模式"><a href="#3-3-常见设计模式" class="headerlink" title="3.3 常见设计模式"></a>3.3 常见设计模式</h3><h4 id="3-3-1-单例模式-手写"><a href="#3-3-1-单例模式-手写" class="headerlink" title="3.3.1 单例模式(手写)"></a>3.3.1 单例模式(手写)</h4><p>单例模式（Singleton Pattern）是 Java 中最简单的,也是最最最常用的设计模式之一。这种类 型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>注意: </p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><p><strong>共有六种实现：</strong></p><p>1、懒汉式，线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、懒汉式，线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<strong>双检锁/双重校验锁</strong>（DCL，即 double-checked locking） –面试必备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、登记式/静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">详细请看</a></p><h4 id="3-3-2-装饰器模式-手写"><a href="#3-3-2-装饰器模式-手写" class="headerlink" title="3.3.2 装饰器模式(手写)"></a>3.3.2 装饰器模式(手写)</h4><p><strong>首先看一段代码</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-085510.jpg" alt=""></p><blockquote><p> <strong>代码分析:</strong> </p><ol><li>构造一个缓冲的字符输入流。包装了一个文件字符输入流。</li><li>事实上，BufferedReader 就是用来<strong>增强</strong> FileReader 的读取的功能的。</li><li>FileReader 只有 read()方法， 但是 BufferedReader 中却增加了一个 readLine()的逐行读取 的功能</li><li>所以这就相当于是 BufferedReader 装饰了 FileReader，让 FileReader 变得更强大</li></ol></blockquote><h5 id="装饰器模式概念"><a href="#装饰器模式概念" class="headerlink" title="装饰器模式概念"></a>装饰器模式概念</h5><ul><li>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结 构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</li><li>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下， 提供了额外的功能。</li></ul><h5 id="装饰器模式实现方式"><a href="#装饰器模式实现方式" class="headerlink" title="装饰器模式实现方式"></a>装饰器模式实现方式</h5><pre><code>1. 定义包装类 2. 将要装饰的模式作为参数传入包装类 3. 实现要加强的方法</code></pre><h4 id="3-3-2-代理模式"><a href="#3-3-2-代理模式" class="headerlink" title="3.3.2 代理模式"></a>3.3.2 代理模式</h4><h5 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h5><p>静态代理的缺点很明显：一个代理类只能对一个业务接口的实现类进行包装，如果有多个业 务接口的话就要定义很多实现类和代理类才行。</p><p>…</p><h5 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h5><p><strong>第一种：JDK 动态代理实现</strong></p><p>JDK 动态代理所用到的代理类在程序调用到代理类对象时才由 JVM 真正创建，JVM 根据传 进来的业务实现类对象以及方法名，动态地创建了一个代理类的 class 文件并被字节码引擎 执行，然后通过该代理类对象进行方法调用。我们需要做的，只需指定代理类的预处理、 调用后操作即可。</p><p><strong>只能对实现了接口的类生成代理</strong>，<strong>而不是针对类</strong>，该目标类型实现的接口都将被代理。原理 是通过在运行期间创建一个接口的实现类来完成对目标对象的代理。<strong>具体实现步骤：</strong></p><ol><li>定义一个实现接口 <code>InvocationHandler</code> 的类</li><li>通过构造函数或者静态工厂方法等，注入被代理类</li><li>实现 <code>invoke(Object proxy, Method method, Object[] args)</code>方法</li><li>在主函数中获得被代理类的类加载器</li><li>使用 <code>Proxy.newProxyInstance(classLoader, interfaces, args)</code>产生一个代理对象</li><li>通过代理对象调用各种方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">=============<span class="comment">//实现InvocationHandler====================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shixuanji</span></span><br><span class="line"><span class="comment"> * 动态代理: JDK</span></span><br><span class="line"><span class="comment"> * 1. 实现一个接口 InvocationHandler</span></span><br><span class="line"><span class="comment"> * 2. 将代理对象作为属性传入  代理所有的类</span></span><br><span class="line"><span class="comment"> * 3. 重写 invoke()方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDynamicStudentDao</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object o;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyDynamicStudentDao</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.o = o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *  @param proxy:  代理对象, 基本不用 ???应该是代理对象把, 老师写的被代理对象</span></span><br><span class="line"><span class="comment"> *  @param method: 拦截下来的被代理对象的方法 - 反射中描述方法的类</span></span><br><span class="line"><span class="comment"> *  @param args:   被代理对象业务方法的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">String methodName = method.getName().toString();</span><br><span class="line"><span class="keyword">if</span> (methodName.equals(<span class="string">"insert"</span>)) &#123;</span><br><span class="line"><span class="comment">// xxx</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//ssssss</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 做的事情就是对代理方法的方法的增强</span></span><br><span class="line"><span class="comment">// 增强</span></span><br><span class="line">System.out.println(<span class="string">"开始执行"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务方法调用, 一定要调用被代理对象的</span></span><br><span class="line"><span class="comment">// obj: 对象  </span></span><br><span class="line"><span class="comment">// args:方法的参数</span></span><br><span class="line">Object res = method.invoke(o, args);</span><br><span class="line"><span class="comment">// 增强</span></span><br><span class="line">System.out.println(<span class="string">"执行完了"</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">============== <span class="comment">// 使用========================</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参数1: 被代理对象的类加载器   </span></span><br><span class="line"><span class="comment">* 参数2: 要实现的接口</span></span><br><span class="line"><span class="comment">* 参数3: 代理类对象 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 能.出来什么看 左边接收着</span></span><br><span class="line"><span class="comment">* 运行时看 真正创建的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 目前看来 代理实例只能是接口</span></span><br><span class="line">BaseDAO newProxyInstance = (BaseDAO)Proxy.newProxyInstance(StudentDAO.class.getClassLoader(), </span><br><span class="line">StudentDAO.class.getInterfaces()</span><br><span class="line">, <span class="keyword">new</span> ProxyDynamicStudentDao(<span class="keyword">new</span> StudentDAO()));</span><br><span class="line">newProxyInstance.insert(<span class="keyword">new</span> Teacher());</span><br></pre></td></tr></table></figure><p><strong>第二种：CGLIB 动态代理实现：</strong></p><p><strong>CGLIB 是针对类来实现代理的</strong>，<strong>原理是对指定的业务类生成一个子类，并覆盖其中业务方法 实现代理</strong>。因为采用的是<strong>继承</strong>，所以不能对 final 修饰的类进行代理，final 的方法也不能</p><p>针对类实现代理，对是否实现接口无要求。原理是对指定的类生成一个子类，覆盖其中的方 法，因为是继承，所以被代理的类或方法最好不要声明为 final 类型。<strong>具体实现步骤</strong>：</p><p>1、定义一个实现了 <code>MethodInterceptor</code> 接口的类</p><p>2、实现其 <code>intercept()</code>方法，在其中调用 <code>proxy.invokeSuper()</code></p><h5 id="3-静态代理和动态代理的区别"><a href="#3-静态代理和动态代理的区别" class="headerlink" title="3. 静态代理和动态代理的区别"></a>3. 静态代理和动态代理的区别</h5><p>静态代理：自己编写创建代理类，然后再进行编译，在程序运行前，代理类的.class 文件就 已经存在了。</p><p>动态代理：在实现阶段不用关心代理谁，而在运行阶段（通过反射机制）才指定代理哪一个 对象。</p><h3 id="3-4-重点掌握"><a href="#3-4-重点掌握" class="headerlink" title="3.4 重点掌握"></a>3.4 重点掌握</h3><h4 id="3-4-1-装饰者模式-和-静态代理模式-区别"><a href="#3-4-1-装饰者模式-和-静态代理模式-区别" class="headerlink" title="3.4.1. 装饰者模式 和 静态代理模式 区别"></a>3.4.1. 装饰者模式 和 静态代理模式 区别</h4><p>在代码上的区别:</p><ul><li>一般情况下, 装饰者模式被装饰的对象一般是从外部传入, 装饰的是一类的事务, 只要是某一类的(Class)都可以</li><li>静态代理模式被代理对象的初始化一般是内部创建的, 代理的是一个类的对象.</li></ul><p>从功能上: </p><ul><li>装饰者模式, 用于对被装饰者业务逻辑实现或增强, 对方法名没有要求</li><li>静态代理: 主要用于权限控制, 日志打印, 错误预警等功能</li></ul><h4 id="3-4-2-三种设计模式必须掌握的"><a href="#3-4-2-三种设计模式必须掌握的" class="headerlink" title="3.4.2. 三种设计模式必须掌握的"></a>3.4.2. 三种设计模式必须掌握的</h4><ul><li>单例设计模式</li><li>装饰者模式</li><li>动态代理模式</li></ul><h4 id="3-4-3-手写代码"><a href="#3-4-3-手写代码" class="headerlink" title="3.4.3. 手写代码"></a>3.4.3. 手写代码</h4><ul><li>冒泡排序</li><li>快速排序</li><li>设计模式</li><li>hadoop 的 wordcount</li><li>scala 的 wordcount</li><li>spark 的 wordcount</li></ul><h1 id="4-排序算法"><a href="#4-排序算法" class="headerlink" title="4.  排序算法"></a>4.  排序算法</h1><blockquote><p>核心概念：<strong>算法复杂度、稳定性</strong></p><p><strong>算法复杂度</strong>：算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括 时间资源和内存资源。应用于数学和计算机导论。</p><p><strong>稳定性</strong>：一个排序算法是稳定的，就是当有两个相等记录的关键字 R 和 S，且在原本的列表 中 R 出现在 S 之前，在排序过的列表中 R 也将会是在 S 之前。</p></blockquote><h3 id="4-1-排序分类"><a href="#4-1-排序分类" class="headerlink" title="4.1.  排序分类"></a>4.1.  排序分类</h3><p><strong>按照排序结果是否稳定性分类：</strong></p><ol><li>稳定排序：插入排序，<strong>冒泡排序</strong>，<strong>归并排序</strong>，计数排序，基数排序，桶排序（如果桶内 排序采用的是稳定性排序）</li><li>非稳定排序：选择排序，<strong>快速排序</strong>，堆排序。</li></ol><p><strong>按照排序过程中是否需要额外空间：</strong></p><ol><li>原地排序：插入排序，选择排序，冒泡排序，快速排序，堆排序。</li><li>非原地排序：归并排序，计数排序，基数排序，桶排序。</li></ol><p><strong>按照排序的主要操作分类：</strong></p><ol><li>交换类：冒泡排序、快速排序；此类的特点是通过不断的比较和交换进行排序；</li><li>插入类：简单插入排序、希尔排序；此类的特点是通过插入的手段进行排序；</li><li>选择类：简单选择排序、堆排序；此类的特点是看准了再移动；</li><li>归并类：归并排序；此类的特点是先分割后合并；</li></ol><p><strong>按照是否需要比较分类：</strong></p><ol><li>比较排序，时间复杂度 O(nlogn) ~ O(n^2)，主要有：冒泡排序，选择排序，插入排序， 归并排序，堆排序，快速排序等。</li><li>非比较排序，时间复杂度可以达到 O(n)，主要有：计数排序，基数排序，桶排序等。</li></ol><h3 id="4-2-常见排序的时间复杂度"><a href="#4-2-常见排序的时间复杂度" class="headerlink" title="4.2 常见排序的时间复杂度"></a>4.2 常见排序的时间复杂度</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-30-235952.jpg" alt="Attachment.jpeg"> </p><p><a href="http://v.youku.com/v_show/id_XNjkzODY2NjMy.html" target="_blank" rel="noopener">有趣的排序算法视频</a></p><h3 id="4-3-常见排序算法的核心实现"><a href="#4-3-常见排序算法的核心实现" class="headerlink" title="4.3 常见排序算法的核心实现"></a>4.3 常见排序算法的核心实现</h3><p>4.3.1 冒泡排序</p><p>4.3.2 归并排序</p><p>4.3.3 快速排序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、集合框架&quot;&gt;&lt;a href=&quot;#1、集合框架&quot; class=&quot;headerlink&quot; title=&quot;1、集合框架&quot;&gt;&lt;/a&gt;1、集合框架&lt;/h1&gt;&lt;h2 id=&quot;1-1-、集合框架体系图&quot;&gt;&lt;a href=&quot;#1-1-、集合框架体系图&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Java" scheme="https://airpoet.github.io/categories/Java/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Java/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://airpoet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-5</title>
    <link href="https://airpoet.github.io/2018/05/28/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
    <id>https://airpoet.github.io/2018/05/28/Linux/Linux学习笔记-5/</id>
    <published>2018-05-28T01:27:24.977Z</published>
    <updated>2018-05-29T12:39:44.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Shell操作日期时间"><a href="#1-Shell操作日期时间" class="headerlink" title="1.Shell操作日期时间"></a>1.Shell操作日期时间</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>在类UNIX系统中，日期被存储为一个整数，其大小为自世界标准时间（UTC）1970年1月1日0时0分0秒起流逝的秒数。</p><ol><li><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date(选项)(参数)</span><br></pre></td></tr></table></figure></li><li><p><strong>选项</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；</span><br><span class="line">-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；</span><br><span class="line">-u：显示GMT, 即目前的格林威治时间；</span><br><span class="line">--<span class="built_in">help</span>：在线帮助；</span><br><span class="line">--version：显示版本信息。</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong></p><p>&lt;+时间日期格式&gt;：指定显示时使用的日期时间格式。</p></li><li><p><strong>日期格式字符串列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">%r 时间，12小时制</span><br><span class="line">%s 从1970年1月1日0点到目前经历的秒数</span><br><span class="line">%S 秒（00～59） </span><br><span class="line">%T 时间（24小时制）（hh:mm:ss）</span><br><span class="line">%X 显示时间的格式（％H时％M分％S秒）</span><br><span class="line">%Z 按字母表排序的时区缩写</span><br><span class="line">%a 星期名缩写</span><br><span class="line">%A 星期名全称</span><br><span class="line">%b 月名缩写</span><br><span class="line">%B 月名全称</span><br><span class="line">%c 日期和时间</span><br><span class="line">%d 按月计的日期（01～31）</span><br><span class="line">%D 日期（mm/dd/yy） </span><br><span class="line">%h 和%b选项相同</span><br><span class="line">%j 一年的第几天（001~366）</span><br><span class="line">%m 月份（01～12）</span><br><span class="line">%w 一个星期的第几天（0代表星期天）</span><br><span class="line">%W 一年的第几个星期（00～53，星期一为第一天）</span><br><span class="line">%x 显示日期的格式（mm/dd/yy）</span><br><span class="line">%y 年份的最后两个数字（1999则是99）</span><br><span class="line">%Y 年份（比如1970、1996等）</span><br><span class="line">%C   世纪，通常为省略当前年份的后两位数字</span><br><span class="line">%U  一年中的第几周，以周日为每星期第一天</span><br><span class="line">%e   按月计的日期，添加空格，等于%_d</span><br></pre></td></tr></table></figure></li><li><p>实例</p><p>格式化输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date +<span class="string">"%Y-%m-%d"</span></span><br><span class="line">2009-12-07</span><br></pre></td></tr></table></figure><p>输出昨天日期：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"1 day ago"</span> +<span class="string">"%Y-%m-%d"</span></span><br><span class="line">2012-11-19</span><br></pre></td></tr></table></figure><p>2秒后输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"2 second"</span> +<span class="string">"%Y-%m-%d %H:%M.%S"</span></span><br><span class="line">2012-11-20 14:21.31</span><br></pre></td></tr></table></figure><p>传说中的 1234567890 秒：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"1970-01-01 1234567890 seconds"</span> +<span class="string">"%Y-%m-%d %H:%m:%S"</span></span><br><span class="line">2009-02-13 23:02:30</span><br></pre></td></tr></table></figure><p>普通转格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"2009-12-12"</span> +<span class="string">"%Y/%m/%d %H:%M.%S"</span></span><br><span class="line">2009/12/12 00:00.00</span><br></pre></td></tr></table></figure><p>apache格式转换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"Dec 5, 2009 12:00:37 AM"</span> +<span class="string">"%Y-%m-%d %H:%M.%S"</span></span><br><span class="line">2009-12-05 00:00.37</span><br></pre></td></tr></table></figure><p>格式转换后时间游走：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"Dec 5, 2009 12:00:37 AM 2 year ago"</span> +<span class="string">"%Y-%m-%d %H:%M.%S"</span></span><br><span class="line">2007-12-05 00:00.37</span><br></pre></td></tr></table></figure><p>加减操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">date +%Y%m%d                   //显示前天年月日</span><br><span class="line">date -d <span class="string">"+1 day"</span> +%Y%m%d       //显示前一天的日期</span><br><span class="line">date -d <span class="string">"-1 day"</span> +%Y%m%d       //显示后一天的日期</span><br><span class="line">date -d <span class="string">"-1 month"</span> +%Y%m%d     //显示上一月的日期</span><br><span class="line">date -d <span class="string">"+1 month"</span> +%Y%m%d     //显示下一月的日期</span><br><span class="line">date -d <span class="string">"-1 year"</span> +%Y%m%d      //显示前一年的日期</span><br><span class="line">date -d <span class="string">"+1 year"</span> +%Y%m%d      //显示下一年的日期</span><br></pre></td></tr></table></figure><p>设定时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">date -s                        //设置当前时间，只有root权限才能设置，其他只能查看</span><br><span class="line">date -s 20120523               //设置成20120523，这样会把具体时间设置成空00:00:00</span><br><span class="line">date -s 01:01:01               //设置具体时间，不会对日期做更改</span><br><span class="line">date -s <span class="string">"01:01:01 2012-05-23"</span>  //这样可以设置全部时间</span><br><span class="line">date -s <span class="string">"01:01:01 20120523"</span>    //这样可以设置全部时间</span><br><span class="line">date -s <span class="string">"2012-05-23 01:01:01"</span>  //这样可以设置全部时间</span><br><span class="line">date -s <span class="string">"20120523 01:01:01"</span>    //这样可以设置全部时间</span><br></pre></td></tr></table></figure><p>有时需要检查一组命令花费的时间，举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">start=$(date +%s)</span><br><span class="line">nmap man.linuxde.net &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">end=$(date +%s)</span><br><span class="line">difference=$(( end - start ))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$difference</span> seconds.</span><br></pre></td></tr></table></figure><p>计算活了多少年</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $[($(date +%s -d $[date])-$(date +%s -d <span class="string">"19900318"</span>))/86400/365]</span><br></pre></td></tr></table></figure></li><li><p><strong><code>date -d</code>其它的一些用法.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取下一天的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-day '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d 'next day' '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">另外一种写法：</span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' -d tomorrow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取上一天的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d last-day '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">另外一种写法：</span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' -d yesterday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取下一月的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-month '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取上一月的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d last-month '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取下一年的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-year '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取上一年的时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d last-year '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取上一周的日期时间：</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-week '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-monday '+%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date -d next-thursday '+%Y-%m-%d %H:%M:%S'</span></span><br></pre></td></tr></table></figure><p>那么类似的，其实，last-year，last-month，last-day，last-week，last-hour，last-minute，last-second都有对应的实现。相反的，last对应next，自己可以根据实际情况灵活组织 </p></li><li><p><strong>接下来，我们来看</strong>‘–date’，<strong>它帮我实现任意时间前后的计算，来看具体的例子：</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取一天以后的日期时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' --date='1 day'</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' --date='-1 day ago'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取一天以前的日期时间</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' --date='-1 day'</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S' --date='1 day ago'</span></span><br></pre></td></tr></table></figure><p>上面的例子显示出来了使用的格式，使用精髓在于改变前面的字符串显示格式，改变数据，改变要操作的日期对应字段，除了天也有对应的其他实现：year，month，week，day，hour，minute，second，monday（星期，七天都可） </p></li><li><p>date 能用来显示或设定系统的日期和时间，在显示方面，使用者能设定欲显示的格式，格式设定为一个<strong>加号</strong>后接数个标记，其中可用的标记列表如下：</p><p>使用范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop ~]<span class="comment"># date '+%Y-%m-%d %H:%M:%S'</span></span><br></pre></td></tr></table></figure><p><strong>日期方面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%a : 星期几 (Sun..Sat) </span><br><span class="line">%A : 星期几 (Sunday..Saturday) </span><br><span class="line">%b : 月份 (Jan..Dec) </span><br><span class="line">%B : 月份 (January..December) </span><br><span class="line">%c : 直接显示日期和时间 </span><br><span class="line">%d : 日 (01..31) </span><br><span class="line">%D : 直接显示日期 (mm/dd/yy) </span><br><span class="line">%h : 同 %b </span><br><span class="line">%j : 一年中的第几天 (001..366) </span><br><span class="line">%m : 月份 (01..12) </span><br><span class="line">%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形) </span><br><span class="line">%w : 一周中的第几天 (0..6) </span><br><span class="line">%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形) </span><br><span class="line">%x : 直接显示日期 (mm/dd/yyyy) </span><br><span class="line">%y : 年份的最后两位数字 (00.99) </span><br><span class="line">%Y : 完整年份 (0000..9999)</span><br></pre></td></tr></table></figure><p><strong>时间方面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%%: 打印出%</span><br><span class="line">%n : 下一行</span><br><span class="line">%t : 跳格</span><br><span class="line">%H : 小时(00..23)</span><br><span class="line">%k : 小时(0..23)</span><br><span class="line">%l : 小时(1..12)</span><br><span class="line">%M : 分钟(00..59)</span><br><span class="line">%p : 显示本地AM或PM</span><br><span class="line">%P : 显示本地am或pm</span><br><span class="line">%r : 直接显示时间(12 小时制，格式为 hh:mm:ss [AP]M)</span><br><span class="line">%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数</span><br><span class="line">%S : 秒(00..61)</span><br><span class="line">%T : 直接显示时间(24小时制)</span><br><span class="line">%X : 相当于%H:%M:%S %p</span><br><span class="line">%Z : 显示时区</span><br></pre></td></tr></table></figure></li><li><p>若是不以加号作为开头，则表示要设定时间，而时间格式为 <code>MMDDhhmm[[CC]YY][.ss]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MM 为月份， </span><br><span class="line">DD 为日，</span><br><span class="line">hh 为小时，</span><br><span class="line">mm 为分钟，</span><br><span class="line">CC 为年份前两位数字，</span><br><span class="line">YY 为年份后两位数字，</span><br><span class="line">ss 为秒数</span><br></pre></td></tr></table></figure></li><li><h4 id="有用的小技巧"><a href="#有用的小技巧" class="headerlink" title="有用的小技巧"></a>有用的小技巧</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取相对某个日期前后的日期：</span></span><br><span class="line">cts1 ~ <span class="comment"># date -d 'may 14 -2 weeks'</span></span><br><span class="line">2018年 04月 30日 星期一 00:00:00 CST</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把时间当中无用的0去掉，比如：01:02:25会变成1:2:25</span></span><br><span class="line">cts1 ~ <span class="comment"># date '+%-H:%-M:%-S'</span></span><br><span class="line">19:18:22</span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示文件最后被更改的时间</span></span><br><span class="line">cts1 ~ <span class="comment"># date "+%Y-%m-%d %H:%M:%S" -r install.log</span></span><br><span class="line">2018-05-23 10:11:14</span><br><span class="line"></span><br><span class="line"><span class="comment">## 求两个字符串日期之间相隔的天数</span></span><br><span class="line">[root@hadoop ~]<span class="comment"># </span></span><br><span class="line">expr <span class="string">'('</span> $(date +%s -d <span class="string">"2016-08-08"</span>) - $(date +%s -d <span class="string">"2016-09-09"</span>) <span class="string">')'</span> / 86400</span><br><span class="line">expr `expr $(date +%s -d <span class="string">"2016-08-08"</span>) - $(date +%s -d <span class="string">"2016-09-09"</span>)` / 86400</span><br><span class="line"></span><br><span class="line"><span class="comment">## shell中加减指定间隔单位</span></span><br><span class="line">cts1 ~ <span class="comment">#  A=`date +%Y-%m-%d`</span></span><br><span class="line">cts1 ~ <span class="comment"># B=`date +%Y-%m-%d -d "$A +48 hours"`</span></span><br><span class="line">cts1 ~ <span class="comment"># echo $B</span></span><br><span class="line">2018-05-30</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-文本处理"><a href="#2-文本处理" class="headerlink" title="2. 文本处理"></a>2. 文本处理</h1><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>功能： 统计文件行数、字节、字符数 </p><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c <span class="comment"># 统计字节数，或--bytes或——chars：只显示Bytes数；。</span></span><br><span class="line">-l <span class="comment"># 统计行数，或——lines：只显示列数；。</span></span><br><span class="line">-m <span class="comment"># 统计字符数。这个标志不能与 -c 标志一起使用。</span></span><br><span class="line">-w <span class="comment"># 统计字数，或——words：只显示字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。</span></span><br><span class="line">-L <span class="comment"># 打印最长行的长度。</span></span><br><span class="line">-<span class="built_in">help</span>     <span class="comment"># 显示帮助信息</span></span><br><span class="line">--version <span class="comment"># 显示版本信息</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">wc -l *       <span class="comment"># 统计当前目录下的所有文件行数</span></span><br><span class="line">wc -l *.js    <span class="comment"># 统计当前目录下的所有 .js 后缀的文件行数</span></span><br><span class="line">find  . * | xargs wc -l <span class="comment"># 当前目录以及子目录的所有文件行数 </span></span><br><span class="line">wc test.txt   <span class="comment"># 查看文件的字节数、字数、行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的字节数、字数、行数</span></span><br><span class="line">wc test.txt</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">7     8     70     test.txt</span><br><span class="line">行数 单词数 字节数   文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用wc命令只打印统计文件行数不打印文件名</span></span><br><span class="line">wc -l test.txt </span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">7 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来统计当前目录下的文件数</span></span><br><span class="line">ls -l | wc -l</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计文件字数：</span></span><br><span class="line">cts1 ~ <span class="comment"># wc -w date.txt</span></span><br><span class="line">30 date.txt</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><strong>sort命令</strong> 是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。</p><h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-b：忽略每行前面开始出的空格字符；</span><br><span class="line">-c：检查文件是否已经按照顺序排序；</span><br><span class="line">-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；</span><br><span class="line">-f：排序时，将小写字母视为大写字母；</span><br><span class="line">-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；</span><br><span class="line">-m：将几个排序号的文件进行合并；</span><br><span class="line">-M：将前面3个字母依照月份的缩写进行排序；</span><br><span class="line">-n：依照数值的大小排序；</span><br><span class="line">-o&lt;输出文件&gt;：将排序后的结果存入制定的文件；</span><br><span class="line">-r：以相反的顺序来排序；</span><br><span class="line">-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；</span><br><span class="line">-g：按照常规数值排序</span><br><span class="line">-k：位置1,位置2根据关键字排序，在从第位置1开始，位置2结束</span><br><span class="line"></span><br><span class="line">+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ol><li><p>sort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@[mail text]<span class="comment"># cat sort.txt</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">eee:50:5.5</span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line">[root@mail text]<span class="comment"># sort sort.txt</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">bbb:20:2.2</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">eee:50:5.5</span><br><span class="line">eee:50:5.5</span><br></pre></td></tr></table></figure></li><li><p>忽略相同行使用-u选项或者uniq：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@mail text]<span class="comment"># cat sort.txt</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">eee:50:5.5</span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line">[root@mail text]<span class="comment"># sort -u sort.txt</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">bbb:20:2.2</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">[root@mail text]<span class="comment"># uniq sort.txt</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">eee:50:5.5</span><br></pre></td></tr></table></figure></li><li><p>sort的-n、-r、-k、-t选项的使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@mail text]<span class="comment"># cat sort.txt</span></span><br><span class="line">AAA:BB:CC</span><br><span class="line">aaa:30:1.6</span><br><span class="line">ccc:50:3.3</span><br><span class="line">ddd:20:4.2</span><br><span class="line">bbb:10:2.5</span><br><span class="line">eee:40:5.4</span><br><span class="line">eee:60:5.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#将BB列按照数字从小到大顺序排列：</span></span><br><span class="line">[root@mail text]<span class="comment"># sort -nk 2 -t: sort.txt</span></span><br><span class="line">AAA:BB:CC</span><br><span class="line">bbb:10:2.5</span><br><span class="line">ddd:20:4.2</span><br><span class="line">aaa:30:1.6</span><br><span class="line">eee:40:5.4</span><br><span class="line">ccc:50:3.3</span><br><span class="line">eee:60:5.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#将CC列数字从大到小顺序排列：</span></span><br><span class="line">[root@mail text]<span class="comment"># sort -nrk 3 -t: sort.txt</span></span><br><span class="line">eee:40:5.4</span><br><span class="line">eee:60:5.1</span><br><span class="line">ddd:20:4.2</span><br><span class="line">ccc:50:3.3</span><br><span class="line">bbb:10:2.5</span><br><span class="line">aaa:30:1.6</span><br><span class="line">AAA:BB:CC</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n是按照数字大小排序，-r是以相反顺序，-k是指定需要排序的栏位，-t指定栏位分隔符为冒号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列排序：以:分隔，按第二列数值排倒序，第三列正序</span></span><br><span class="line">[linux@linux ~]$ sort -n -t: -k2,2r -k3 sort.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>-k选项的具体语法格式：</strong> x,x 表示一个范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FStart.CStart Modifie,FEnd.CEnd Modifier</span><br><span class="line">-------Start--------,-------End--------</span><br><span class="line"> FStart.CStart 选项  ,  FEnd.CEnd 选项</span><br></pre></td></tr></table></figure><p>这个语法格式可以被其中的逗号<code>,</code>分为两大部分， <strong>Start</strong> 部分和 <strong>End</strong> 部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说<code>Start</code>部分的<code>FStart</code>和<code>C.Start</code>。<code>C.Start</code>也是可以省略的，省略的话就表示从本域的开头部分开始。<code>FStart.CStart</code>，其中<code>FStart</code>就是表示使用的域，而<code>CStart</code>则表示在<code>FStart</code>域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定<code>FEnd.CEnd</code>，如果你省略<code>.CEnd</code>，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。</p></li><li><p><strong>从公司英文名称的第二个字母开始进行排序：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建此txt文件</span></span><br><span class="line"><span class="comment"># 再排序</span></span><br><span class="line">$ sort -t <span class="string">' '</span> -k 1.2 facebook.txt</span><br><span class="line">baidu 100 5000</span><br><span class="line">sohu 100 4500</span><br><span class="line">google 110 5000</span><br><span class="line">guge 50 3000</span><br></pre></td></tr></table></figure><p><code>-t &#39; &#39;</code>, 首先用<code>&#39; &#39;</code>空格, 把字段分割成了3个域.</p><p>使用了<code>-k 1.2</code>，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。</p></li><li><p><strong>只针对</strong>公司英文名称的第二个字母进行排序，<strong>如果相同的</strong>按照员工工资进行降序排序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t <span class="string">' '</span> -k 1.2,1.2 -nrk 3,3 facebook.txt</span><br><span class="line">baidu 100 5000</span><br><span class="line">google 110 5000</span><br><span class="line">sohu 100 4500</span><br><span class="line">guge 50 3000</span><br></pre></td></tr></table></figure><p>由于只对第二个字母进行排序，所以我们使用了<code>-k 1.2,1.2</code>的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用<code>-k 1.2</code>怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了<code>-k 3,3</code>，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。</p></li></ol><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p><strong>uniq命令</strong> 用于报告或忽略文件中的重复行，一般与sort命令结合使用。</p><h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c或——count：在每列旁边显示该行重复出现的次数；</span><br><span class="line">-d或--repeated：仅显示重复出现的行列；</span><br><span class="line">-f&lt;栏位&gt;或--skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</span><br><span class="line">-s&lt;字符位置&gt;或--skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</span><br><span class="line">-u或——unique：仅显示出一次的行列；</span><br><span class="line">-w&lt;字符位置&gt;或--check-chars=&lt;字符位置&gt;：指定要比较的字符。</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>输入文件：指定要去除的重复行文件。如果不指定此项，则从标准读取数据；</li><li>输出文件：指定要去除重复行后的内容要写入的输出文件。如果不指定此选项，则将内容显示到标准输出设备（显示终端）。</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root]<span class="comment"># cat sort.txt: 原本行</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">eee:50:5.5</span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line">[root]<span class="comment"># uniq sort.txt  : 不展示重复行</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">eee:50:5.5</span><br><span class="line">[cts1:Desktop]</span><br><span class="line"></span><br><span class="line">[cts1:Desktop]</span><br><span class="line">[root]<span class="comment"># sort sort.txt | uniq : 不展示重复行</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">bbb:20:2.2</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line">[cts1:Desktop]</span><br><span class="line">[root]<span class="comment"># uniq -u sort.txt     : 删除重复行</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">bbb:20:2.2</span><br><span class="line">[cts1:Desktop]</span><br><span class="line">[root]<span class="comment"># sort sort.txt | uniq -u : 排序并删除重复行</span></span><br><span class="line">aaa:10:1.1</span><br><span class="line">bbb:20:2.2</span><br><span class="line">ccc:30:3.3</span><br><span class="line">ddd:40:4.4</span><br><span class="line">[cts1:Desktop]</span><br><span class="line">[root]<span class="comment"># sort sort.txt | uniq -c : 展示每行出现的次数</span></span><br><span class="line">      1 aaa:10:1.1</span><br><span class="line">      1 bbb:20:2.2</span><br><span class="line">      1 ccc:30:3.3</span><br><span class="line">      1 ddd:40:4.4</span><br><span class="line">      2 eee:50:5.5</span><br><span class="line">[cts1:Desktop]</span><br><span class="line">[root]<span class="comment"># sort sort.txt | uniq -d : 只展示重复行</span></span><br><span class="line">eee:50:5.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求a.txt和b.txt的差集 </span></span><br><span class="line"><span class="comment">## 首先a b 去掉重复的, 再跟a b去重, 把b其它的部分也去掉</span></span><br><span class="line">cts1 Desktop <span class="comment"># cat a b b | sort | uniq -u</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求b.txt和a.txt的差集  </span></span><br><span class="line"><span class="comment">## 同上</span></span><br><span class="line">cts1 Desktop <span class="comment"># cat b a a | sort | uniq -u</span></span><br><span class="line">e</span><br><span class="line">f</span><br></pre></td></tr></table></figure><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p><strong>cut命令</strong> 用来显示行中的指定部分，删除文件中指定字段。cut经常用来显示文件的内容，类似于下的type命令。</p><p>说明：该命令有两项功能，其一是用来显示文件的内容，它依次读取由参数file所指 明的文件，将它们的内容输出到标准输出上；其二是连接两个或多个文件，如<code>cut fl f2 &gt; f3</code>将把文件fl和几的内容合并起来，然后通过输出重定向符“&gt;”的作用，将它们放入文件f3中。</p><p>当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。</p><h4 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-b：仅显示行中指定直接范围的内容；</span><br><span class="line">-c：仅显示行中指定范围的字符；  </span><br><span class="line">-d：指定字段的分隔符，默认的字段分隔符为“TAB”；  </span><br><span class="line">-f：显示指定字段的内容；</span><br><span class="line">-n：与“-b”选项连用，不分割多字节字符；</span><br><span class="line">--complement：补足被选择的字节、字符或字段；</span><br><span class="line">--out-delimiter=&lt;字段分隔符&gt;：指定输出内容是的字段分割符；</span><br><span class="line">--<span class="built_in">help</span>：显示指令的帮助信息；</span><br><span class="line">--version：显示指令的版本信息。</span><br></pre></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>文件：指定要进行内容过滤的文件。</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>例如有一个学生报表信息，包含No、Name、Mark、Percent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost text]<span class="comment"># cat cut.txt </span></span><br><span class="line">No Name Mark Percent</span><br><span class="line">01 tom 69 91</span><br><span class="line">02 jack 71 87</span><br><span class="line">03 alex 68 98</span><br></pre></td></tr></table></figure><h5 id="f"><a href="#f" class="headerlink" title="-f"></a><code>-f</code></h5><p>使用<code>-f</code> 选项提取指定字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost text]<span class="comment"># cut -d ' ' -f1 cut.txt </span></span><br><span class="line">No</span><br><span class="line">01</span><br><span class="line">02</span><br><span class="line">03</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost text]<span class="comment"># cut -d ' ' -f2,3 test.txt </span></span><br><span class="line">Name Mark</span><br><span class="line">tom 69</span><br><span class="line">jack 71</span><br><span class="line">alex 68</span><br></pre></td></tr></table></figure><h5 id="–complement"><a href="#–complement" class="headerlink" title="–complement"></a><strong>–complement</strong></h5><p>选项提取指定字段之外的列（打印除了第二列之外的列）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cut -d <span class="string">' '</span> -f2 --complement cut.txt</span><br><span class="line">No Mark Percent</span><br><span class="line">01 69 91</span><br><span class="line">02 71 87</span><br><span class="line">03 68 98</span><br></pre></td></tr></table></figure><h5 id="指定字段的字符或者字节范围-amp-例子"><a href="#指定字段的字符或者字节范围-amp-例子" class="headerlink" title="指定字段的字符或者字节范围 &amp; 例子"></a>指定字段的字符或者字节范围 &amp; 例子</h5><p>cut命令可以将一串字符作为列来显示，字符字段的记法：</p><ul><li><strong>N-</strong> ：从第N个字节、字符、字段到结尾；</li><li><strong>N-M</strong> ：从第N个字节、字符、字段到第M个（包括M在内）字节、字符、字段；</li><li><strong>-M</strong> ：从第1个字节、字符、字段到第M个（包括M在内）字节、字符、字段。</li></ul><p>上面是记法，结合下面选项将摸个范围的字节、字符指定为字段：</p><ul><li><strong>-b</strong>  表示字节；</li><li><strong>-c</strong>  表示字符；</li><li><strong>-f</strong>  表示定义字段。</li></ul><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost text]<span class="comment"># cat test.txt </span></span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第1个到第3个字符：</span></span><br><span class="line">cut -c1-3 test.txt </span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印前2个字符：</span></span><br><span class="line">cut -c-2 test.txt </span><br><span class="line">ab</span><br><span class="line">ab</span><br><span class="line">ab</span><br><span class="line">ab</span><br><span class="line">ab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第5个字符开始到结尾：</span></span><br><span class="line">cut -c5- test.txt </span><br><span class="line">efghijklmnopqrstuvwxyz</span><br><span class="line">efghijklmnopqrstuvwxyz</span><br><span class="line">efghijklmnopqrstuvwxyz</span><br><span class="line">efghijklmnopqrstuvwxyz</span><br><span class="line">efghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure><h2 id="grep-文本生成器"><a href="#grep-文本生成器" class="headerlink" title="grep(文本生成器)"></a>grep(文本生成器)</h2><p><strong>grep</strong> （global search regular expression(RE) and print  out the  line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h4 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-a --text  <span class="comment"># 不要忽略二进制数据。</span></span><br><span class="line">-A &lt;显示行数&gt;   --after-context=&lt;显示行数&gt;   <span class="comment"># 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span></span><br><span class="line">-b --byte-offset                           <span class="comment"># 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span></span><br><span class="line">-B&lt;显示行数&gt;   --before-context=&lt;显示行数&gt;   <span class="comment"># 除了显示符合样式的那一行之外，并显示该行之前的内容。</span></span><br><span class="line">-c --count    <span class="comment"># 计算符合范本样式的列数。</span></span><br><span class="line">-C&lt;显示行数&gt; --context=&lt;显示行数&gt;或-&lt;显示行数&gt; <span class="comment"># 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span></span><br><span class="line">-d&lt;进行动作&gt; --directories=&lt;动作&gt;  <span class="comment"># 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span></span><br><span class="line">-e&lt;范本样式&gt; --regexp=&lt;范本样式&gt;   <span class="comment"># 指定字符串作为查找文件内容的范本样式。</span></span><br><span class="line">-E --extended-regexp             <span class="comment"># 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span></span><br><span class="line">-f&lt;范本文件&gt; --file=&lt;规则文件&gt;     <span class="comment"># 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span></span><br><span class="line">-F --fixed-regexp   <span class="comment"># 将范本样式视为固定字符串的列表。</span></span><br><span class="line">-G --basic-regexp   <span class="comment"># 将范本样式视为普通的表示法来使用。</span></span><br><span class="line">-h --no-filename    <span class="comment"># 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span></span><br><span class="line">-H --with-filename  <span class="comment"># 在显示符合范本样式的那一列之前，标示该列的文件名称。</span></span><br><span class="line">-i --ignore-case    <span class="comment"># 忽略字符大小写的差别。</span></span><br><span class="line">-l --file-with-matches   <span class="comment"># 列出文件内容符合指定的范本样式的文件名称。</span></span><br><span class="line">-L --files-without-match <span class="comment"># 列出文件内容不符合指定的范本样式的文件名称。</span></span><br><span class="line">-n --line-number         <span class="comment"># 在显示符合范本样式的那一列之前，标示出该列的编号。</span></span><br><span class="line">-q --quiet或--silent     <span class="comment"># 不显示任何信息。</span></span><br><span class="line">-R/-r  --recursive       <span class="comment"># 此参数的效果和指定“-d recurse”参数相同。</span></span><br><span class="line">-s --no-messages  <span class="comment"># 不显示错误信息。</span></span><br><span class="line">-v --revert-match <span class="comment"># 反转查找。</span></span><br><span class="line">-V --version      <span class="comment"># 显示版本信息。   </span></span><br><span class="line">-w --word-regexp  <span class="comment"># 只显示全字符合的列。</span></span><br><span class="line">-x --line-regexp  <span class="comment"># 只显示全列符合的列。</span></span><br><span class="line">-y <span class="comment"># 此参数效果跟“-i”相同。</span></span><br><span class="line">-o <span class="comment"># 只输出文件中匹配到的部分。</span></span><br></pre></td></tr></table></figure><h4 id="grep中的正则表达式"><a href="#grep中的正则表达式" class="headerlink" title="grep中的正则表达式"></a>grep中的正则表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">^    <span class="comment"># 锚定行的开始 如：'^grep'匹配所有以grep开头的行。    </span></span><br><span class="line">$    <span class="comment"># 锚定行的结束 如：'grep$'匹配所有以grep结尾的行。    </span></span><br><span class="line">.    <span class="comment"># 匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。    </span></span><br><span class="line">*    <span class="comment"># 匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。    </span></span><br><span class="line">.*   <span class="comment"># 一起用代表任意字符。   </span></span><br><span class="line">[]   <span class="comment"># 匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。    </span></span><br><span class="line">[^]  <span class="comment"># 匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span></span><br><span class="line">\    <span class="comment"># 转义</span></span><br><span class="line">\(..\)  <span class="comment"># 标记匹配字符，如'\(love\)'，love被标记为1。    </span></span><br><span class="line">\&lt;      <span class="comment"># 锚定单词的开始，如:'\&lt;grep'匹配包含以grep开头的单词的行。    </span></span><br><span class="line">\&gt;      <span class="comment"># 锚定单词的结束，如'grep\&gt;'匹配包含以grep结尾的单词的行。    </span></span><br><span class="line">x\&#123;m\&#125;  <span class="comment"># 重复字符x，m次，如：'o\&#123;5\&#125;'匹配包含5个o的行。    </span></span><br><span class="line">x\&#123;m,\&#125;   <span class="comment"># 重复字符x,至少m次，如：'o\&#123;5,\&#125;'匹配至少有5个o的行。    </span></span><br><span class="line">x\&#123;m,n\&#125;  <span class="comment"># 重复字符x，至少m次，不多于n次，如：'o\&#123;5,10\&#125;'匹配5--10个o的行。   </span></span><br><span class="line">\w    <span class="comment"># 匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。   </span></span><br><span class="line">\W    <span class="comment"># \w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span></span><br><span class="line">\b    <span class="comment"># 单词锁定符，如: '\bgrep\b'只匹配grep。</span></span><br><span class="line"></span><br><span class="line">增录</span><br><span class="line">.  <span class="comment"># 任意一个字符</span></span><br><span class="line">a* <span class="comment"># 任意多个a(0个或多个)</span></span><br><span class="line">a? <span class="comment"># 0个或1个a</span></span><br><span class="line">a+  <span class="comment"># 一个或多个a</span></span><br><span class="line">[A-Z]</span><br><span class="line">[ABC]</span><br></pre></td></tr></table></figure><h4 id="grep命令常见用法"><a href="#grep命令常见用法" class="headerlink" title="grep命令常见用法"></a>grep命令常见用法</h4><ol><li><p>在文件中搜索一个单词，命令会返回一个包含 <strong>“match_pattern”</strong> 的文本行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep match_pattern file_name</span><br><span class="line">grep <span class="string">"match_pattern"</span> file_name</span><br></pre></td></tr></table></figure></li><li><p>在多个文件中查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"match_pattern"</span> file_1 file_2 file_3 ...</span><br></pre></td></tr></table></figure></li><li><p>输出除  “match_pattern” 之外的所有行  &gt;&gt;   <strong>-v</strong>  选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">"match_pattern"</span> file_name</span><br></pre></td></tr></table></figure></li><li><p>标记匹配颜色  <strong>–color=auto</strong>  选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"match_pattern"</span> file_name --color=auto</span><br><span class="line"></span><br><span class="line">eg: 查找当前目录下所有文件中的 `a`</span><br><span class="line">cts1 Desktop <span class="comment"># grep "\(a\)" ./* --color=auto</span></span><br><span class="line">---</span><br><span class="line">./a:a</span><br><span class="line">./abc.txt:abcdefghijklmnopqrstuvwxyz</span><br><span class="line">./abc.txt:abcdefghijklmnopqrstuvwxyz</span><br><span class="line">./abc.txt:abcdefghijklmnopqrstuvwxyz</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><h4 id="使用正则表达式-E-选项："><a href="#使用正则表达式-E-选项：" class="headerlink" title="使用正则表达式  -E  选项："></a>使用正则表达式  <strong>-E</strong>  选项：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">"[1-9]+"</span></span><br><span class="line">或</span><br><span class="line">egrep <span class="string">"[1-9]+"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>只输出文件中匹配到的部分  -o  选项：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> this is a <span class="built_in">test</span> line. | grep -o -E <span class="string">"[a-z]+\."</span></span><br><span class="line">line.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> this is a <span class="built_in">test</span> line. | egrep -o <span class="string">"[a-z]+\."</span></span><br><span class="line">line.</span><br></pre></td></tr></table></figure></li><li><p>统计文件或者文本中包含匹配字符串的行数  <strong>-c</strong>  选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="string">"text"</span> file_name</span><br></pre></td></tr></table></figure></li><li><p>输出包含匹配字符串的行数  <strong>-n</strong>  选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"text"</span> -n file_name</span><br><span class="line">或</span><br><span class="line">cat file_name | grep <span class="string">"text"</span> -n</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个文件</span></span><br><span class="line">grep <span class="string">"text"</span> -n file_1 file_2</span><br></pre></td></tr></table></figure></li><li><p>打印样式匹配所位于的字符或字节偏移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> gun is not unix | grep -b -o <span class="string">"not"</span></span><br><span class="line">7:not</span><br><span class="line"></span><br><span class="line"><span class="comment">#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项  **-b -o**  一般总是配合使用。</span></span><br></pre></td></tr></table></figure></li><li><p>搜索多个文件并查找匹配文本在哪些文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -l <span class="string">"text"</span> file1 file2 file3...</span><br></pre></td></tr></table></figure></li></ol><h4 id="grep递归搜索文件"><a href="#grep递归搜索文件" class="headerlink" title="grep递归搜索文件"></a>grep递归搜索文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在多级目录中对文本进行递归搜索</span></span><br><span class="line">grep <span class="string">"text"</span> . -r -n</span><br><span class="line"><span class="comment"># .表示当前目录。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略匹配样式中的字符大小写</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> | grep -i <span class="string">"HELLO"</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项 -e 制动多个匹配样式：</span></span><br><span class="line"><span class="built_in">echo</span> this is a text line | grep -e <span class="string">"is"</span> -e <span class="string">"line"</span> -o</span><br><span class="line">is</span><br><span class="line">line</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用 **-f** 选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。</span></span><br><span class="line">cat patfile</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用文件名称匹配, 实际上就是匹配文件中的内容</span></span><br><span class="line"><span class="built_in">echo</span> aaa bbb ccc ddd eee | grep -f patfile -o</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在grep搜索结果中包括或者排除指定文件：</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#只在目录中所有的.php和.html文件中递归搜索字符"main()"</span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --include *.&#123;php,html&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在搜索结果中排除所有README文件</span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --exclude <span class="string">"README"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在搜索结果中排除filelist文件列表里的文件</span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --exclude-from filelist</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用0值字节后缀的grep与xargs：</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 测试文件：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"aaa"</span> &gt; file1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bbb"</span> &gt; file2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"aaa"</span> &gt; file3</span><br><span class="line"></span><br><span class="line">grep <span class="string">"aaa"</span> file* -lZ | xargs -0 rm</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行后会删除file1和file3，grep输出用-Z选项来指定以0值字节作为终结符文件名（\0），xargs -0 读取输入并用0值字节终结符分隔文件名，然后删除匹配文件，-Z通常和-l结合使用。</span></span><br><span class="line"><span class="comment"># 好吧, 暂时我也没懂是啥意思...</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep静默输出：</span></span><br><span class="line">grep -q <span class="string">"test"</span> filename</span><br><span class="line"><span class="comment"># 不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出匹配文本之前或者之后的行：</span></span><br><span class="line"><span class="comment"># 显示匹配某个结果之后的3行，使用 -A 选项：</span></span><br><span class="line">seq 10 | grep <span class="string">"5"</span> -A 3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示匹配某个结果之前的3行，使用 -B 选项：</span></span><br><span class="line">seq 10 | grep <span class="string">"5"</span> -B 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示匹配某个结果的前三行和后三行，使用 -C 选项：</span></span><br><span class="line">seq 10 | grep <span class="string">"5"</span> -C 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"a\nb\nc\na\nb\nc"</span> | grep a -A 1</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">--</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><h4 id="grep其它常用用法"><a href="#grep其它常用用法" class="headerlink" title="grep其它常用用法"></a>grep其它常用用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计出现某个字符串的行的总行数 '-c'</span></span><br><span class="line">cts1 Desktop <span class="comment"># echo "hello" &gt;&gt; hello.sh</span></span><br><span class="line">cts1 Desktop <span class="comment"># grep -c 'hello' hello.sh</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询不包含hello的行, 带有hello的整行都不会被查询到'-v'</span></span><br><span class="line">cts1 Desktop <span class="comment"># grep -v 'hello' hello.sh</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># `.*`的用法, 前后都是 `.*` , 只要包含 parrten 的 整行 都会被查出来</span></span><br><span class="line">grep <span class="string">'.*hello.*'</span> hello.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任何由 'h..p'包含的都会被查出来. 查的当前行, .* 代表任意字符</span></span><br><span class="line">cts1 Desktop <span class="comment"># grep 'h.*p' /etc/passwd</span></span><br><span class="line">gopher:x:13:30:gopher:/var/gopher:/sbin/nologin</span><br><span class="line">rpc:x:32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nolo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达以 ro 开头</span></span><br><span class="line">cts1 Desktop <span class="comment"># grep '^ro' /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达以 t 结尾</span></span><br><span class="line">cts1 Desktop <span class="comment"># grep 't$' /etc/passwd</span></span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># '[Gg]rep'匹配Grep和grep</span></span><br><span class="line"><span class="comment">## 此处是匹配 以 h || r 开头的</span></span><br><span class="line">cts1 Desktop <span class="comment"># </span></span><br><span class="line">grep <span class="string">'^[hr]'</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/zsh</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">rpc:x:32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配非h之外其他的,  和 r 开头的, 也就是匹配 h以外的</span></span><br><span class="line">cts1 Desktop <span class="comment"># </span></span><br><span class="line">grep <span class="string">'^[hr]'</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/zsh</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">rpc:x:32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 h-r 以外的</span></span><br><span class="line">cts1 Desktop <span class="comment"># </span></span><br><span class="line">grep <span class="string">'^[^h-r]'</span> /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="sed-流编辑器"><a href="#sed-流编辑器" class="headerlink" title="sed(流编辑器)"></a>sed(流编辑器)</h2><p>sed叫做流编辑器，在shell脚本和Makefile中作为过滤一使用非常普遍，也就是把前一个程序的输出引入sed的输入，经过一系列编辑命令转换成为另一种格式输出。sed是一种在线编辑器，它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为”模式空间”,接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。 </p><h3 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-n：一般sed命令会把所有数据都输出到屏幕，如果加入-n选项的话，则只会把经过sed命令处理的行输出到屏幕。</span><br><span class="line">-e&lt;script&gt;或--expression=&lt;script&gt;：以选项中的指定的script来处理输入的文本文件； 允许对输入数据应用多条sed命令编辑。</span><br><span class="line">-i：用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出。</span><br><span class="line">-f&lt;script文件&gt;或--file=&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件；</span><br><span class="line">-n或--quiet或——silent：仅显示script处理后的结果；</span><br><span class="line">--version：显示版本信息。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动作:</span></span><br><span class="line">a：追加，在当前行后添加一行或多行。</span><br><span class="line">c：行替换，用c后面的字符串替换原数据行。</span><br><span class="line">i：插入，在当前行前插入一行或多行。</span><br><span class="line">p：打印，输出指定的行。</span><br><span class="line">s：字符串替换，用一个字符串替换另外一个字符串。格式为**\<span class="string">'**行范围s/旧字符串/新字符串/g**\'</span>** (如果不加g的话，则表示只替换每行第一个匹配的串)</span><br></pre></td></tr></table></figure><h3 id="sed元字符集-正则"><a href="#sed元字符集-正则" class="headerlink" title="sed元字符集(正则)"></a>sed元字符集(正则)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**^**  匹配行开始，如：/^sed/匹配所有以sed开头的行。</span><br><span class="line">**$**  匹配行结束，如：/sed$/匹配所有以sed结尾的行。</span><br><span class="line">**.**  匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。</span><br><span class="line">**** * 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。</span><br><span class="line">**[]**  匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  </span><br><span class="line">**[^]**  匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。</span><br><span class="line">**\(..\)**  匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。</span><br><span class="line">**&amp;**  保存搜索字符用来替换其他字符，如s/love/ **&amp;** /，love这成 **love** 。</span><br><span class="line">**\&lt;**  匹配单词的开始，如:/\&lt;love/匹配包含以love开头的单词的行。</span><br><span class="line">**\&gt;**  匹配单词的结束，如/love\&gt;/匹配包含以love结尾的单词的行。</span><br><span class="line">**x\&#123;m\&#125;**  重复字符x，m次，如：/0\&#123;5\&#125;/匹配包含5个0的行。</span><br><span class="line">**x\&#123;m,\&#125;**  重复字符x，至少m次，如：/0\&#123;5,\&#125;/匹配至少有5个0的行。</span><br><span class="line">**x\&#123;m,n\&#125;**  重复字符x，至少m次，不多于n次，如：/0\&#123;5,10\&#125;/匹配5~10个0的行。</span><br></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><ol><li><p><strong>删除: d命令</strong></p><blockquote><p><strong>sed ‘2d’ sed.txt</strong>                            —–删除sed<strong>.txt</strong>文件的第二行。</p><p><strong>sed ‘2,$d’ sed.txt</strong>                            —–删除sed<strong>.txt</strong>文件的第二行到末尾所有行。</p><p><strong>sed ‘$d’ sed.txt</strong>                      —–删除sed<strong>.txt</strong>文件的最后一行。</p><p><strong>sed ‘/test/d ‘ sed.txt</strong>             —–删除sed<strong>.txt</strong>文件所有包含test的行。</p><p><strong>sed ‘/[A-Za-z]/d ‘ sed.txt</strong>    —–删除sed<strong>.txt</strong>文件所有包含字母的行。</p></blockquote></li><li><p><strong>整行替换: c命令</strong></p><blockquote><p>将第二行替换成hello world</p><p><strong>sed \’2c hello world\’ sed.txt</strong></p></blockquote></li><li><p><strong>字符串替换：s命令</strong></p><blockquote><ol><li><p><strong>sed ‘s/hello/hi/g’ sed.txt</strong>                                    </p><p>##  在整行范围内把hello替换为hi。如果没有g标记，则只有每行第一个匹配的hello被替换成hi。</p></li></ol><ol start="2"><li><p><strong>sed ‘s/hello/hi/2’ sed.txt</strong></p><p>##  此种写法表示只替换每行的第2个hello为hi</p></li></ol><ol start="3"><li><p><strong>sed ‘s/hello/hi/2g’ sed.txt</strong></p><p>##  此种写法表示只替换每行的第2个以后的hello为hi（包括第2个）</p></li></ol><ol start="4"><li><p><strong>sed -n ‘s/^hello/hi/p’ sed.txt</strong>                            </p><p>## <strong>(-n)选项和p标志一起使用表示只打印那些发生替换的行</strong>。也就是说，如果某一行开头的hello被替换成hi，就打印它。</p></li></ol><ol start="5"><li><p><strong>sed -n ‘2,4p’ sed.txt</strong></p><p>##  打印输出sed.txt中的第2行和第4行</p></li></ol><ol start="6"><li><p><strong>sed -n ‘s/hello/&amp;-hi/gp’ sed.txt</strong></p><p><strong>sed ‘s/^192.168.0.1/&amp;-localhost/‘ sed.txt</strong>  </p><p><strong>sed ‘s/^192.168.0.1/[&amp;]/‘ sed.txt</strong>       </p><p>##  &amp;符号表示追加一个串到找到的串后, &amp;代表前一个串。</p><p>所有以192.168.0.1开头的行都会被替换成它自已加 -localhost，变成192.168.0.1-localhost。</p><p>第三句表示给IP地址添加中括号</p></li></ol><ol start="7"><li><p><strong>sed -n ‘s/(liu)jialing/\1tao/p’ sed.txt</strong></p><p><strong>sed -n ‘s/(liu)jia(ling)/\1tao\2ss/p’ sed.txt</strong></p><p>##  liu被标记为\1，所以liu会被保留下来（\1 == liu）</p><p>##  ling被标记为\2，所以ling也会被保留下来（\2 == ling）</p><p>##  所以最后的结果就是\1tao\2ss == “liu” + “tao” + “ling” + “ss”</p><p>此处切记：\1代表的是被第一个()包含的内容，\1代表的是被第一个()包含的内容，……</p><p>上面命令的意思就是：被括号包含的字符串会保留下来，然后跟其他的字符串比如tao和ss组成新的字符串liutaolingss</p></li></ol><ol start="8"><li><p><strong>sed ‘s#hello#hi#g’ sed.txt</strong></p><p>##  不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，”#”在这里是分隔符，代替了默认的”/“分隔符。表示把所有hello替换成hi。</p></li></ol><p><u>选定行的范围：逗号</u></p><ol><li><p><strong>sed -n ‘/today/,/hello/p’ sed.txt</strong></p><p>## 所有在模板today和hello所确定的范围内的行都被打印。都找第一个，也就是说，从第一个today到第一个hello</p></li></ol><ol start="2"><li><p><strong>sed -n ‘5,/^hello/p’ sed.txt</strong></p><p><strong>sed -n ‘/^hello/,8p’ sed.txt</strong></p><p>## 打印从第五行开始到第一个包含以hello开始的行之间的所有行。</p></li><li><p><strong>sed ‘/today/,/hello/s/$/www/‘ sed.txt</strong></p><p>## 对于模板today和hello之间的行，每行的末尾用字符串www替换。</p><p><strong>sed ‘/today/,/hello/s/^/www/‘ sed.txt</strong></p><p>## 对于模板today和hello之间的行，每行的开头用字符串www替换。</p></li><li><p><strong>sed ‘/^[A-Za-z]/s/5/five/g’ sed.txt</strong></p><p>## 将以字母开头的行中的数字5替换成five</p></li></ol></blockquote></li></ol><ol start="4"><li><p><strong>多点编辑：e命令</strong> </p><blockquote><ol><li><p><strong>sed -e ‘1,5d’ -e ‘s/hello/hi/‘ sed.txt</strong></p><p>##  (-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用hello替换hi。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p></li><li><p><strong>sed –expression=’s/hello/hi/‘ –expression=’/today/d’ sed.txt</strong></p><p>##  一个比-e更好的命令是–expression。它能给sed表达式赋值。</p></li></ol></blockquote></li><li><p><strong>从文件读入：r命令</strong> </p><blockquote><p><strong>sed ‘/hello/r file’ sed.txt</strong></p><p>##  file里的内容被读进来，显示在与hello匹配的行下面，如果匹配多行，则file的内容将显示在所有匹配行的下面。</p></blockquote></li><li><p><strong>写入文件：w命令</strong> </p><blockquote><p><strong>sed -n ‘/hello/w file’ sed.txt</strong></p><p>##  在huangbo.txt中所有包含hello的行都被写入file里。</p></blockquote></li><li><p><strong>追加命令：a命令</strong> </p><blockquote><p><strong>sed ‘/^hello/a\—&gt;this is a example’ sed.txt</strong>    </p><p>##  ‘—&gt;this is a example’被追加到以hello开头的行(另起一行)后面，sed要求命令a后面有一个反斜杠。</p></blockquote></li><li><p><strong>插入：i命令</strong> </p><blockquote><p><strong>sed ‘/will/i\some thing new ————————-‘ sed.txt</strong></p><p>##  如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。</p></blockquote></li><li><p><strong>下一个：n命令</strong> </p><blockquote><p><strong>sed ‘/hello/{n; s/aa/bb/;}’ sed.txt</strong>            <strong>替换下一行的第一个aa</strong></p><p><strong>sed ‘/hello/{n; s/aa/bb/g;}’ sed.txt</strong>     <strong>替换下一行的全部aa</strong></p><p>##  如果hello被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。</p></blockquote></li><li><p><strong>退出：q命令</strong> </p><blockquote><p><strong>sed ‘10q’ sed.txt</strong></p><p>##  打印完第10行后，退出sed。</p><p>同样的写法： <strong>sed -n ‘1,10p ‘ sed.txt</strong></p></blockquote></li></ol><h2 id="awk-报表生成器"><a href="#awk-报表生成器" class="headerlink" title="awk(报表生成器)"></a>awk(报表生成器)</h2><p>Awk是一个强大的处理文本的编程语言工具，其名称得自于它的创始人Alfred Aho、Peter Weinberger和Brian Kernighan 姓氏的首个字母，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。AWK 提供了极其强大的功能：可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。简单来说awk就是扫描文件中的每一行，查找与命令行中所给定内容相匹配的模式。如果发现匹配内容，则进行下一个编程步骤。如果找不到匹配内容，则继续处理下一行。 </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk [options] <span class="string">'script'</span> var=value file(s)</span><br><span class="line">awk [options] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure><p>… TODO 待补充</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><ol><li><p>假设last -n 5的输出如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># last -n 5</span></span><br><span class="line">root     pts/1        192.168.170.1    Mon May 28 09:28   still logged <span class="keyword">in</span></span><br><span class="line">root     pts/1        192.168.170.1    Sun May 27 20:53 - 07:21  (10:28)</span><br><span class="line">root     pts/0        192.168.170.1    Sun May 27 19:39   still logged <span class="keyword">in</span></span><br><span class="line">reboot   system boot  2.6.32-573.el6.x Sun May 27 19:34 - 14:48  (19:13)</span><br><span class="line">root     pts/1        192.168.170.1    Sat May 26 20:43 - 22:36  (01:53)</span><br></pre></td></tr></table></figure></li><li><p>只显示五个最近登录的账号： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># last -n 5 | awk '&#123;print $1&#125;'</span></span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">reboot</span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是"空白键" 或 "[tab]键",所以$1表示登录用户，$3表示登录用户ip,以此类推</span></span><br></pre></td></tr></table></figure></li><li><p>显示/etc/passwd的账户： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># cat /etc/passwd | awk -F':' '&#123;print $1&#125;'</span></span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种是awk+action的示例，每行都会执行action&#123;print $1&#125;。</span></span><br><span class="line"><span class="comment"># -F指定域分隔符为':'</span></span><br></pre></td></tr></table></figure></li><li><p>显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># cat /etc/passwd | awk -F':' '&#123;print $1"\t"$7&#125;'</span></span><br><span class="line">root/bin/zsh</span><br><span class="line">bin/sbin/nologin</span><br><span class="line">daemon/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p><strong>BEGIN and END</strong> </p><p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># cat /etc/passwd |awk  -F ':'  'BEGIN &#123;print "name,shell"&#125;  &#123;print $1","$7&#125; END &#123;print "blue,/bin/nosh"&#125;'</span></span><br><span class="line">---</span><br><span class="line">name,shell</span><br><span class="line">root,/bin/zsh</span><br><span class="line">bin,/sbin/nologin</span><br><span class="line">...</span><br><span class="line">mysql,/bin/bash</span><br><span class="line">blue,/bin/nosh</span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">root@cts1:~ <span class="comment"># cat /etc/passwd | awk -F ':' 'BEGIN &#123;print "name \t shell"&#125; &#123;print$1"\t"$7&#125; END &#123;print "blue,/bin/bash"&#125;'</span></span><br><span class="line">---</span><br><span class="line">name  shell</span><br><span class="line">root/bin/zsh</span><br><span class="line">bin/sbin/nologin</span><br><span class="line">...</span><br><span class="line">mysql/bin/bash</span><br><span class="line">blue,/bin/bash</span><br></pre></td></tr></table></figure><p>awk工作流程是这样的：先执行BEGIN，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录••••••直到所有的记录都读完，最后执行END操作。 </p></li><li><p><strong>搜索/etc/passwd有root关键字的所有行</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. root@cts1:~ <span class="comment"># awk  -F:  '/root/'  /etc/passwd</span></span><br><span class="line">    ---</span><br><span class="line">    root:x:0:0:root:/root:/bin/zsh</span><br><span class="line">    operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。</span></span><br><span class="line"></span><br><span class="line">2. 搜索支持正则，例如找root开头的: awk -F:  <span class="string">'/^root/'</span>  /etc/passwd</span><br><span class="line"><span class="comment"># 搜索/etc/passwd有root关键字的所有行，并显示对应的shell</span></span><br><span class="line">root@cts1:~ </span><br><span class="line"><span class="comment"># awk  -F ':'  '/root/&#123;print $7&#125;'  /etc/passwd</span></span><br><span class="line">/bin/zsh</span><br><span class="line">/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里指定了action&#123;print $7&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>awk常见内置变量</strong></p><blockquote><p>FILENAME：awk浏览的文件名</p><p>FNR：浏览文件的记录数，也就是行数。awk是以行为单位处理的，所以每行就是一个记录</p><p>NR：awk读取文件每行内容时的行号</p><p>NF：浏览记录的域的个数。可以用它来输出最后一个域</p><p>FS：设置输入域分隔符，等价于命令行-F选项</p><p>OFS：输出域分隔符</p></blockquote><p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># awk  -F ':'  '&#123;print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0&#125;' /etc/passwd</span></span><br><span class="line">---</span><br><span class="line">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/zsh</span><br><span class="line">filename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure><p>使用printf替代print,可以让代码更加简洁，易读 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment">#  awk  -F ':'  '&#123;printf("filename:%s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)&#125;' /etc/passwd</span></span><br><span class="line">---</span><br><span class="line">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/zsh</span><br><span class="line">filename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure><p>指定输入分隔符，指定输出分隔符： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@cts1:~ <span class="comment"># awk 'BEGIN &#123;FS=":"; OFS="\t"&#125; &#123;print $1, $2&#125;' /etc/passwd</span></span><br><span class="line">---</span><br><span class="line">rootx</span><br><span class="line">binx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p><strong>实用例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A：打印最后一列：</span></span><br><span class="line">awk -F: <span class="string">'&#123;print $NF&#125;'</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">'&#123;printf("%s\n",$NF);&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># B：统计文件行数：</span></span><br><span class="line">awk <span class="string">'BEGIN &#123;x=0&#125; &#123;x++&#125; END &#123;print x&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># C：打印9*9乘法表：</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;for(n=0;n++&lt;9;)&#123;for(i=0;i++&lt;n;)printf i"*"n"="i*n" ";print ""&#125;&#125;'</span></span><br><span class="line">awk <span class="string">'BEGIN &#123;for(i=1;i&lt;=9;i++)&#123;for(j=1;j&lt;=i;j++)&#123;printf i"*"j"="i*j" ";&#125;print ""&#125;&#125;'</span></span><br><span class="line">awk <span class="string">'BEGIN &#123;for(i=9;i&gt;=1;i--)&#123;for(j=i;j&gt;=1;j--)&#123;printf i"*"j"="i*j" ";&#125;print ""&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># D: 计算1-100 之和</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sum"</span> | awk <span class="string">'BEGIN &#123;sum=0;&#125; &#123;i=0;while(i&lt;101)&#123;sum+=i;i++&#125;&#125; END &#123;print sum&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">更多详细用法参见官网</a></p></li></ol><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>功能： 搜索文件目录层次结构</p><p>格式： find path -option actions</p><p><strong>find &lt;路径&gt; &lt;选项&gt; [表达式]</strong></p><h3 id="常用可选项："><a href="#常用可选项：" class="headerlink" title="常用可选项："></a>常用可选项：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-name 根据文件名查找，支持(\<span class="string">'\* \'</span> , \<span class="string">'? \'</span>)</span><br><span class="line"></span><br><span class="line">-<span class="built_in">type</span> 根据文件类型查找(f-普通文件，c-字符设备文件，b-块设备文件，l-链接文件，d-目录)</span><br><span class="line"></span><br><span class="line">-perm 根据文件的权限查找，比如 755</span><br><span class="line"></span><br><span class="line">-user 根据文件拥有者查找</span><br><span class="line"></span><br><span class="line">-group 根据文件所属组寻找文件</span><br><span class="line"></span><br><span class="line">-size 根据文件小大寻找文件</span><br><span class="line"> </span><br><span class="line">-o 表达式 或</span><br><span class="line"></span><br><span class="line">-a 表达式 与</span><br><span class="line"></span><br><span class="line">-not 表达式 非</span><br></pre></td></tr></table></figure><h3 id="类型参数列表："><a href="#类型参数列表：" class="headerlink" title="类型参数列表："></a>类型参数列表：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- **f**  普通文件</span><br><span class="line">- **l**  符号连接</span><br><span class="line">- **d**  目录</span><br><span class="line">- **c**  字符设备</span><br><span class="line">- **b**  块设备</span><br><span class="line">- **s**  套接字</span><br><span class="line">- **p**  Fifo</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[linux@linux txt]$ ll   <span class="comment">## 准备的测试文件</span></span><br><span class="line">total 248</span><br><span class="line">-rw-rw-r--. 1 linux linux 235373 Apr 18 00:10 hw.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux      0 Apr 22 05:43 LINUX.pdf</span><br><span class="line">-rw-rw-r--. 1 linux linux      3 Apr 22 05:50 liujialing.jpg</span><br><span class="line">-rw-rw-r--. 1 linux linux      0 Apr 22 05:43 mingxing.pdf</span><br><span class="line">-rw-rw-r--. 1 linux linux     57 Apr 22 04:40 mingxing.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux     66 Apr 22 05:15 sort.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux    214 Apr 18 10:08 test.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux     24 Apr 22 05:27 uniq.txt</span><br><span class="line"></span><br><span class="line">[linux@linux txt]$ find /home/linux/txt/ -name <span class="string">"*.txt"</span>  <span class="comment">## 查找文件名txt结尾的文件</span></span><br><span class="line">/home/linux/txt/uniq.txt</span><br><span class="line">/home/linux/txt/mingxing.txt</span><br><span class="line">/home/linux/txt/test.txt</span><br><span class="line">/home/linux/txt/hw.txt</span><br><span class="line">/home/linux/txt/sort.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">## 忽略大小写查找文件名包含linux</span></span><br><span class="line">[linux@linux txt]$ find /home/linux/txt -iname <span class="string">"*linux*"</span>  </span><br><span class="line">/home/linux/txt/LINUX.pdf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查找文件名结尾是.txt或者.jpg的文件</span></span><br><span class="line">[linux@linux txt]$ find /home/linux/txt/ \( -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.jpg"</span> \)   </span><br><span class="line">/home/linux/txt/liujialing.jpg</span><br><span class="line">/home/linux/txt/uniq.txt</span><br><span class="line">/home/linux/txt/mingxing.txt</span><br><span class="line">/home/linux/txt/test.txt</span><br><span class="line">/home/linux/txt/hw.txt</span><br><span class="line">/home/linux/txt/sort.txt</span><br><span class="line">另一种写法：find /home/linux/txt/ -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式的方式去查找上面条件的文件：</span></span><br><span class="line">[linux@linux txt]$ find /home/linux/txt/ -regex <span class="string">".*\(\.txt\|\.jpg\)$"</span></span><br><span class="line">/home/linux/txt/liujialing.jpg</span><br><span class="line">/home/linux/txt/uniq.txt</span><br><span class="line">/home/linux/txt/mingxing.txt</span><br><span class="line">/home/linux/txt/test.txt</span><br><span class="line">/home/linux/txt/hw.txt</span><br><span class="line">/home/linux/txt/sort.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查找.jpg结尾的文件，然后删掉</span></span><br><span class="line">[linux@linux txt]$ find /home/linux/txt -<span class="built_in">type</span> f -name <span class="string">"*.jpg"</span> -delete</span><br><span class="line">[linux@linux txt]$ ll</span><br><span class="line">total 248</span><br><span class="line">-rw-rw-r--. 1 linux linux 235373 Apr 18 00:10 hw.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux      0 Apr 22 05:43 LINUX.pdf</span><br><span class="line">-rw-rw-r--. 1 linux linux      0 Apr 22 05:43 mingxing.pdf</span><br><span class="line">-rw-rw-r--. 1 linux linux     57 Apr 22 04:40 mingxing.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux     66 Apr 22 05:15 sort.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux    214 Apr 18 10:08 test.txt</span><br><span class="line">-rw-rw-r--. 1 linux linux     24 Apr 22 05:27 uniq.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查找5天以内创建的 .sh 文件, 并显示创建/更改时间</span></span><br><span class="line">find / -name <span class="string">"*sh"</span> -mtime -5 |xargs ls -l</span><br></pre></td></tr></table></figure><h1 id="3-Shell操作字符串"><a href="#3-Shell操作字符串" class="headerlink" title="3.  Shell操作字符串"></a>3.  Shell操作字符串</h1><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>Linux中操作字符串，也是一项必备的技能。其中尤以截取字符串更加频繁，下面为大家介绍几种常用方式，截取字符串</p><p><strong>预先定义一个变量</strong>：WEBSITE=’<a href="http://hadoop//centos/huangbo.html&#39;" target="_blank" rel="noopener">http://hadoop//centos/huangbo.html&#39;</a> </p><ol><li><p><strong>#截取，*任意的,   删除<code>//</code>左边字符串（包括制定的分隔符），保留右边字符串</strong></p><blockquote><p>root@cts1:~ # echo ${WEBSITE#*//}<br>hadoop//centos/huangbo.html</p></blockquote></li><li><p><strong>##截取</strong>，<strong>删除左边字符串（包括指定的分隔符），保留右边字符串</strong>，和上边一个#不同的是，它一直找到最后，而不是像一个#那样找到一个就满足条件退出了。</p><blockquote><p>root@cts1:~ # echo ${WEBSITE##*//}<br>centos/huangbo.html</p></blockquote></li><li><p><strong>%截取，删除右边字符串（包括制定的分隔符），保留左边字符串</strong></p><blockquote><p>root@cts1:~ # echo ${WEBSITE%//*}<br><a href="http://hadoop" target="_blank" rel="noopener">http://hadoop</a></p></blockquote></li><li><p><strong>%%截取，删除右边字符串（包括指定的分隔符），保留左边字符串</strong>，和上边一个%不同的是，它一直找到最前，而不是像一个%那样找到一个就满足条件退出了。</p><blockquote><p>root@cts1:~ # echo ${WEBSITE%%//*}<br>http:</p></blockquote></li><li><p>从左边第几个字符开始，以及截取的字符的个数 </p><blockquote><p>root@cts1:~ # echo ${WEBSITE:2:2}<br>tp</p></blockquote></li><li><p>从左边第几个字符开始，一直到结束 </p><blockquote><p>root@cts1:~ # echo ${WEBSITE:2}<br>tp://hadoop//centos/huangbo.html</p></blockquote></li><li><p>从右边第几个字符开始，以及字符的个数, 从-4开始, 还是往右边截取 </p><blockquote><p>root@cts1:~ # echo ${WEBSITE:0-4:2</p><p>ht</p></blockquote></li><li><p>从右边第几个字符开始，一直到结束 </p><blockquote><p>root@cts1:~ # echo ${WEBSITE:0-4}<br>html</p></blockquote></li><li><p>利用awk进行字符串截取</p><blockquote><p><strong>echo $WEBSITE | awk ‘{print substr($1,2,6)}’</strong> </p><p>ttp://</p></blockquote></li><li><p>利用cut进行字符串截取 </p><blockquote><p>root@cts1:~ # echo $WEBSITE | cut -b 1-4                                                    http</p></blockquote></li><li><p>获取最后几个字符</p><blockquote><p>root@cts1:~ #  echo ${WEBSITE:(-3)}                                                           tml</p></blockquote></li><li><p>截取从倒数第3个字符后的2个字符</p><blockquote><p>root@cts1:~ # echo ${WEBSITE:(-3):2}<br>tm</p></blockquote></li></ol><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><h4 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h4><blockquote><p><strong>${parameter/pattern/string}</strong> </p></blockquote><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量VAR：</span></span><br><span class="line">[linux@linux ~]$ VAR=<span class="string">"hello tom, hello kitty, hello xiaoming"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换第一个hello,  用`/`：</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;VAR/hello/hi&#125;</span></span><br><span class="line">hi tom, hello kitty, hello xiaoming</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换所有hello, 用'//'：</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;VAR//hello/hi&#125;</span></span><br><span class="line">hi tom, hi kitty, hi xiaoming</span><br></pre></td></tr></table></figure><h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><p>在此为大家提供五种方式获取某字符串的长度 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在此为大家提供五种方式获取某字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 使用wc -L命令</span></span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| <span class="built_in">echo</span> <span class="variable">$&#123;WEBSITE&#125;</span> |wc -L    |</span><br><span class="line">|                                                    |</span><br><span class="line">| 35                                                 |</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用expr的方式去计算</span></span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| expr length <span class="variable">$&#123;WEBSITE&#125;</span>  |</span><br><span class="line">|                                                   |</span><br><span class="line">| 35                                                |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 通过awk + length的方式获取字符串长度</span></span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">|<span class="built_in">echo</span> <span class="variable">$&#123;WEBSITE&#125;</span> | awk <span class="string">'&#123;print length($0)&#125;'</span>    |</span><br><span class="line">|                                                                           |</span><br><span class="line">| 35                                                                        |</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 通过awk的方式计算以**\"\"**分隔的字段个数</span></span><br><span class="line">+-------------------------------------------------------------------------+</span><br><span class="line">|  <span class="built_in">echo</span> <span class="variable">$&#123;WEBSITE&#125;</span> |awk -F <span class="string">""</span> <span class="string">'&#123;print NF&#125;'</span>     |</span><br><span class="line">|                                                                         |</span><br><span class="line">| 35                                                                      |</span><br><span class="line">+-------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 通过\#的方式获取字符串（最简单，最常用）</span></span><br><span class="line">+----------------------------------------------+</span><br><span class="line">| <span class="built_in">echo</span> <span class="variable">$&#123;#WEBSITE&#125;</span> |</span><br><span class="line">|                                              |</span><br><span class="line">| 35                                           |</span><br><span class="line">+----------------------------------------------+</span><br></pre></td></tr></table></figure><h1 id="4-脚本自动安装MySql"><a href="#4-脚本自动安装MySql" class="headerlink" title="4. 脚本自动安装MySql"></a>4. 脚本自动安装MySql</h1><h4 id="这里先做个记录-之后会整理一份更详细的文档出来"><a href="#这里先做个记录-之后会整理一份更详细的文档出来" class="headerlink" title="这里先做个记录, 之后会整理一份更详细的文档出来."></a>这里先做个记录, 之后会整理一份更详细的文档出来.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## auto install mysql</span></span><br><span class="line"><span class="comment">## 假如是第二次装，那么要先停掉服务，并且卸载之前的mysql</span></span><br><span class="line">service mysql stop</span><br><span class="line">EXISTS_RPMS=`rpm -qa | grep -i mysql`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;EXISTS_RPMS&#125;</span></span><br><span class="line"><span class="keyword">for</span> RPM <span class="keyword">in</span> <span class="variable">$&#123;EXISTS_RPMS&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        rpm -e --nodeps <span class="variable">$&#123;RPM&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除残留文件</span></span><br><span class="line">rm -fr /usr/lib/mysql</span><br><span class="line">rm -fr /usr/include/mysql</span><br><span class="line">rm -f /etc/my.cnf</span><br><span class="line">rm -fr /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 从服务器获取安装mysql的rpm包</span></span><br><span class="line">wget http://linux/soft/MySQL-client-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">wget http://linux/soft/MySQL-server-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除之前的密码文件，以免产生干扰</span></span><br><span class="line">rm -rf /root/.mysql_secret</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装服务器</span></span><br><span class="line">rpm -ivh MySQL-server-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取到生成的随机密码</span></span><br><span class="line"><span class="comment">##PSWD=`cat /root/.mysql_secret | awk -F ':' '&#123;print substr($4,2,16)&#125;'`</span></span><br><span class="line">PSWD=` grep -v <span class="string">'^$'</span> /root/.mysql_secret | awk -F <span class="string">':'</span> <span class="string">'&#123;print substr($4,2,16)&#125;'</span>`</span><br><span class="line"><span class="comment">##PSWD=$&#123;PWD:1:16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装客户端</span></span><br><span class="line">rpm -ivh MySQL-client-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后删除刚刚下下来的rpm包</span></span><br><span class="line">rm -rf MySQL-client-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rm -rf MySQL-server-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## 提示安装的步骤都完成了。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install mysql server and client is done .!!!!!!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 打印出来刚刚生成的mysql初始密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"random password is:<span class="variable">$&#123;PSWD&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启mysql服务</span></span><br><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动第一次登陆，然后改掉密码</span></span><br><span class="line">[root@hadoop bin]<span class="comment"># mysql -uroot -pZjVIWvOGD18bT7oX</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> PASSWORD=PASSWORD(<span class="string">'root'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在就可以写脚本链接mysql进行操作了</span></span><br><span class="line">[root@hadoop bin]<span class="comment"># vi initMysql.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -proot &lt;&lt; EOF</span><br><span class="line">       GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;</span><br><span class="line">       FLUSH PRIVILEGES;</span><br><span class="line">       use mysql;</span><br><span class="line">       select host, user, password from user;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Shell操作日期时间&quot;&gt;&lt;a href=&quot;#1-Shell操作日期时间&quot; class=&quot;headerlink&quot; title=&quot;1.Shell操作日期时间&quot;&gt;&lt;/a&gt;1.Shell操作日期时间&lt;/h1&gt;&lt;h2 id=&quot;date&quot;&gt;&lt;a href=&quot;#date&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-4</title>
    <link href="https://airpoet.github.io/2018/05/28/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
    <id>https://airpoet.github.io/2018/05/28/Linux/Linux学习笔记-4/</id>
    <published>2018-05-27T23:20:32.044Z</published>
    <updated>2018-05-29T17:00:27.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Linux-shell简介"><a href="#1、Linux-shell简介" class="headerlink" title="1、Linux shell简介"></a>1、Linux shell简介</h1><h2 id="1-1、Shell概述"><a href="#1-1、Shell概述" class="headerlink" title="1.1、Shell概述"></a>1.1、Shell概述</h2><p>Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。</p><p>Shell既是一种命令语言，又是一种程序设计语言：</p><p><strong>作为命令语言</strong>，它交互式地解释和执行用户输入的命令；</p><p><strong>作为程序设计语言</strong>，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p><p>Shell它虽然不是Unix/Linux系统内核的一部分，但它调用了系统核心的大部分功能来执行程序、建立文件并以并行的方式协调各个程序的运行。Shell是用户与内核进行交互操作的一种接口，目前最流行的Shell称为bash Shell（Bourne Again Shell）</p><p><strong>Shell是一门编程语言(解释型的编程语言)</strong>，即shell脚本(就是在用linux的shell命令编程)，Shell脚本程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行</p><p>Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本</p><p><strong>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等</strong>，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器，可以通过<strong>cat /etc/shells</strong>命令查看系统中安装的shell，不同的shell可能支持的命令语法是不相同的</p><p><strong>sh是Unix 标准默认的shell</strong>，由Steve Bourne开发，是Bourne Shell的缩写。</p><p><strong>bash是Linux标准默认的shell</strong>，本教程也基于bash讲解。bash由Brian Fox和Chet Ramey共同完成，是Bourne Again Shell的缩写。</p><p>Shell本身支持的命令并不多，内部命令一共有40个，但是它可以调用其他的程序，每个程序就是一个命令，这使得Shell命令的数量可以无限扩展，其结果就是Shell的功能非常强大，完全能够胜任Linux的日常管理工作，如文本或字符串检索、文件的查找或创建、大规模软件的自动部署、更改系统设置、监控服务器性能、发送报警邮件、抓取网页内容、压缩文件等。</p><h2 id="1-2、Shell基本格式"><a href="#1-2、Shell基本格式" class="headerlink" title="1.2、Shell基本格式"></a>1.2、Shell基本格式</h2><p>代码写在普通文本文件中，通常以.sh结尾，虽然不是强制要求，但希望大家最好这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi helloworld.sh</span><br><span class="line">--------------------------</span><br><span class="line"><span class="meta">#!/bin/bash        </span></span><br><span class="line"><span class="comment">## 表示用哪一种shell解析器来解析执行我们的这个脚本程序，这句话只对自执行有效，对于使用sh helloworld.sh无效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span>     <span class="comment">## 注释也可以写在这里</span></span><br></pre></td></tr></table></figure><p>在这里，我们就写好了一个shell脚本，第一行是固定需要的，表明用哪一种shell解析器来执行我们的这个脚本程序。本质上，shell脚本里面的代码都是就是一些<strong>流程控制语句</strong>加一些<strong>特殊语法</strong>再加<strong>shell**</strong>命令**组成。其中，我们可以当做每一个命令就是shell编程当中的关键字。 </p><h2 id="1-3、Shell执行方式"><a href="#1-3、Shell执行方式" class="headerlink" title="1.3、Shell执行方式"></a>1.3、Shell执行方式</h2><p><strong>1</strong> <strong>、sh</strong> <strong>方式或者bash</strong> <strong>方式</strong></p><blockquote><p><strong>sh helloworld.sh</strong>    </p><p><strong>bash helloworld.sh</strong>   ## 直接指定用系统默认的bash shell解释执行</p></blockquote><p><strong>2</strong> <strong>、source</strong> <strong>方式或者.</strong> <strong>方式</strong></p><p><strong>source命令也称为“点命令”</strong>，也就是一个点符号（.）,是bash的内部命令。</p><p>功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句</p><p><strong>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</strong>。</p><p>用法：</p><blockquote><p><strong>.  helloworld.sh</strong> </p><p><strong>source helloworld.sh</strong>   </p></blockquote><p><strong>3</strong> <strong>、直接执行该脚本文件</strong></p><p>可以有两种方式，不过这两种方式的执行，都需要该文件有执行权限</p><p>所以在执行之前，我们要更改他的执行权限</p><blockquote><p>1、  切换到该文件所在的路径然后执行命令：</p><p> <strong>./helloworld.sh</strong></p><p>2、  直接以绝对路径方式执行</p><p> <strong>/home/linux/hellworld.sh</strong></p></blockquote><h2 id="1-4、Shell注释"><a href="#1-4、Shell注释" class="headerlink" title="1.4、Shell注释"></a>1.4、Shell注释</h2><p><strong>单行注释</strong>：Shell脚本中以#开头的代码就是注释  <code># xxx</code></p><p><strong>多行注释</strong>：Shell脚本中也可以使用多行注释：<code>:&lt;&lt;! xxx !</code></p><h1 id="2、Shell基本语法"><a href="#2、Shell基本语法" class="headerlink" title="2、Shell基本语法"></a>2、Shell基本语法</h1><h2 id="2-1、变量"><a href="#2-1、变量" class="headerlink" title="2.1、变量"></a>2.1、变量</h2><h3 id="2-1-1、系统变量"><a href="#2-1-1、系统变量" class="headerlink" title="2.1.1、系统变量"></a>2.1.1、系统变量</h3><p>Linux Shell中的变量分为“系统变量”和“用户自定义变量”</p><p>系统变量可以通过set命令查看，用户环境变量可以通过env查看：</p><blockquote><p>常用系统变量：\$PWD   \$SHELL     \$USER     $HOME </p></blockquote><h3 id="2-1-2、自定义变量"><a href="#2-1-2、自定义变量" class="headerlink" title="2.1.2、自定义变量"></a>2.1.2、自定义变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.注意, 变量中间不能有空格</span></span><br><span class="line">A=123 </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.变量中间有空格的话要加引号</span></span><br><span class="line">- 双引号中间可以引用变量</span><br><span class="line">   a=zs</span><br><span class="line">        b=<span class="string">"this is <span class="variable">$a</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">        this is zs</span><br><span class="line">- 单引号引用变量会原样输出</span><br><span class="line">        b=<span class="string">'this is $a'</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">        this is <span class="variable">$a</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 3. 要在变量后直接连接字符, 要用&#123;&#125;把变量括起来</span></span><br><span class="line"><span class="variable">$&#123;变量名&#125;</span>其它字符  </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;A&#125;</span>ddd</span><br><span class="line">    helloddd</span><br></pre></td></tr></table></figure><h3 id="2-1-3、变量高级用法"><a href="#2-1-3、变量高级用法" class="headerlink" title="2.1.3、变量高级用法"></a>2.1.3、变量高级用法</h3><blockquote><ol><li><p>撤销变量：unset ABC</p></li><li><p>声明静态变量：readonly ABC= ‘abc’     特点是这种变量是只读的，不能unset</p></li><li><p>在一个 .sh 中. 以绝对路径的形式调另一个 .sh</p><ol><li><p>使用export关键字</p><p><strong>export</strong> <strong>A=”A in a.sh”</strong></p><p><strong>意味着把变量提升为当前shell</strong> <strong>进程中的全局环境变量，可供其他子shell</strong> <strong>程序使用，</strong></p><p><strong>A</strong> <strong>变量就成了a.sh</strong> <strong>脚本所在bash</strong> <strong>进程的全局变量，该进程的所有子进程都能访问到变量A</strong></p></li><li><p>通过 <strong>. /root/bin/b.sh</strong> 或  <strong>source /root/bin/b.sh</strong> 来调用</p></li></ol></li><li><p><strong>总结：</strong>        </p><ol><li><strong>a.sh中直接调用b.sh，会让b.sh在A所在的bash进程的“子进程”空间中执行</strong> </li><li><strong>而子进程空间只能访问父进程中用export定义的变量</strong> </li><li><strong>一个shell进程无法将自己定义的变量提升到父进程空间中去</strong> </li><li><strong>source或者“.”号执行脚本时，会让脚本在调用者所在的shell进程空间中执行</strong> </li></ol></li></ol></blockquote><h3 id="2-1-4、反引号赋值"><a href="#2-1-4、反引号赋值" class="headerlink" title="2.1.4、反引号赋值"></a>2.1.4、反引号赋值</h3><blockquote><p><strong>a=`ls -l /root/bin`</strong>  ##反引号，运行里面的命令，并把结果返回给变量a</p><p>另外一种写法：<code>a=$(ls -l /root/bin)</code></p></blockquote><h3 id="2-1-5、变量有用技巧"><a href="#2-1-5、变量有用技巧" class="headerlink" title="2.1.5、变量有用技巧"></a>2.1.5、变量有用技巧</h3><table><thead><tr><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>${var}</td><td>变量本来的值</td></tr><tr><td>${var:-word}</td><td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值</td></tr><tr><td>${var:+word}</td><td>如果变量 var 被定义，那么返回word，但不改变 var 的值</td></tr><tr><td>${var:=word}</td><td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word</td></tr><tr><td>${var:?message}</td><td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量   var 是否可以被正常赋值。   若此替换出现在Shell脚本中，那么脚本将停止运行</td></tr></tbody></table><h3 id="2-1-6-特殊变量"><a href="#2-1-6-特殊变量" class="headerlink" title="2.1.6  特殊变量"></a>2.1.6  特殊变量</h3><blockquote><p><strong>$?</strong>  <strong>表示上一个命令退出的状态码</strong></p><p><strong>$$</strong>  <strong>表示当前进程编号</strong></p><p><strong>$0</strong> <strong>表示当前脚本名称</strong></p><p><strong>$n</strong> <strong>表示n</strong> <strong>位置的输入参数（n**</strong>代表数字，n&gt;=1<strong> </strong>）**</p><p><strong>$#</strong> <strong>表示参数的个数，常用于循环</strong></p><p><strong>$*</strong>  <strong>和$@ 都表示参数列表</strong> </p></blockquote><p><strong>注意：$*与$@区别</strong> </p><ol><li><p><strong>$*</strong> 和 <strong>$@</strong> 都表示传递给函数或脚本的所有参数** </p></li><li><p><strong>不被双引号” “包含时</strong> </p><p><strong>$*</strong> 和 <strong>$@</strong> 都以\$1 \$2 … \$n 的形式组成参数列表    </p></li><li><p><strong>当它们被双引号”  “包含时</strong></p><ul><li><strong>“$*“ 会将所有的参数作为一个整体，以”\$1 \$2 … \$n”的形式组成一个整串；</strong></li><li><strong>$*</strong> <strong>会将各个参数分开，以”\$1” “\$2” … “\$n” 的形式组成一个参数列表</strong></li></ul></li></ol><h3 id="2-1-7-变量的其他注意点"><a href="#2-1-7-变量的其他注意点" class="headerlink" title="2.1.7 变量的其他注意点"></a>2.1.7 变量的其他注意点</h3><ol><li><p><strong>使用变量</strong></p><p>使用一个定义过的变量, 只需要在变量名前面加 $ 符号</p><p>如果变量后面直接跟上了字符串, 就必须要加花括号</p><p><strong>推荐给所有变量加上花括号, 这个是好的编程习惯</strong></p><p>已定义的<strong>非只读</strong>变量, 可以被重新定义</p></li><li><p><strong>只读变量</strong></p><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">myUrl=<span class="string">"http://www.w3cschool.cc"</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br><span class="line">myUrl=<span class="string">"http://www.runoob.com"</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 会报错</span></span><br><span class="line">zsh: <span class="built_in">read</span>-only variable: myUrl</span><br></pre></td></tr></table></figure></li><li><p>删除变量, 只读变量不能删除, 变量被删除后不能再次使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure></li><li><p>变量类型</p><ul><li><strong>1) 局部变量</strong>  局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>2) 环境变量</strong>  所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>3) shell变量</strong>  shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul></li></ol><h3 id="2-18-字符串"><a href="#2-18-字符串" class="headerlink" title="2.18 字符串"></a>2.18 字符串</h3><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h4><p>查找字符 “<strong>i</strong> 或 <strong>s</strong>“ 的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great company"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> is`  <span class="comment"># 输出 8</span></span><br></pre></td></tr></table></figure><h3 id="2-19-Shell-数组"><a href="#2-19-Shell-数组" class="headerlink" title="2.19  Shell 数组"></a><strong>2.19  Shell 数组</strong></h3><p> bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。 </p><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a><strong>定义数组</strong></h4><p>在Shell中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。 </p><h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h4><p> 获取数组长度的方法与获取字符串长度的方法相同，例如： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、运算符"><a href="#2-2、运算符" class="headerlink" title="2.2、运算符"></a>2.2、运算符</h2><h3 id="2-2-1、算数运算符"><a href="#2-2-1、算数运算符" class="headerlink" title="2.2.1、算数运算符"></a>2.2.1、算数运算符</h3><h4 id="1-用expr"><a href="#1-用expr" class="headerlink" title="1.  用expr"></a>1.  用expr</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式 expr m + n 注意expr运算符间要有空格</span><br><span class="line">例如计算（2＋3）×4 的值</span><br><span class="line">1、分步计算</span><br><span class="line">S=`expr 2 + 3`</span><br><span class="line">expr <span class="variable">$S</span> \* 4       <span class="comment">##   *号需要转义</span></span><br><span class="line">2、一步完成计算</span><br><span class="line">expr `expr 2 + 3 ` \* 4</span><br><span class="line">    <span class="built_in">echo</span> `expr \`expr 2 + 3\` \* 4`</span><br></pre></td></tr></table></figure><p>用<code>expr</code>还可以<strong>计算字符串的长度</strong>，<strong>子字符串出现的位置</strong>，<strong>截取字符串</strong>等等 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cts1 ~ <span class="comment"># name='woshishuaige'</span></span><br><span class="line">cts1 ~ <span class="comment"># expr length name</span></span><br><span class="line">4</span><br><span class="line">cts1 ~ <span class="comment"># expr length $name</span></span><br><span class="line">12</span><br><span class="line">cts1 ~ <span class="comment"># expr index $name shuai</span></span><br><span class="line">3</span><br><span class="line">cts1 ~ <span class="comment"># expr substr $name 6 2</span></span><br><span class="line">sh</span><br></pre></td></tr></table></figure><p>详情请翻阅: expr –help</p><h4 id="2-用"><a href="#2-用" class="headerlink" title="2.  用(())"></a>2.  用<code>(())</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">((1+2))</span><br><span class="line">(((2+3)*4))</span><br><span class="line">count=1</span><br><span class="line">((count++))</span><br><span class="line">((++count))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span></span><br><span class="line"><span class="comment"># 但是要想取到运算结果，需要用$引用</span></span><br><span class="line">a=$((1+2))</span><br></pre></td></tr></table></figure><h4 id="3-用"><a href="#3-用" class="headerlink" title="3.  用\$[]"></a>3.  用\$[]</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SS=$[2+3]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SS</span></span><br><span class="line">SS=$[2*3]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SS</span></span><br><span class="line"><span class="built_in">echo</span> $[(2 + 3)*3]</span><br></pre></td></tr></table></figure><h4 id="4-用let"><a href="#4-用let" class="headerlink" title="4.  用let"></a>4.  用<code>let</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first=1</span><br><span class="line">second=2</span><br><span class="line"><span class="built_in">let</span> third=first+second</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;third&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-用-bc"><a href="#5-用-bc" class="headerlink" title="5.  用  | bc"></a>5.  用  <code>| bc</code></h4><p><strong>以上命令都只对整形数值有效，不适用于浮点数</strong> </p><p>如果有浮点数参与运算，可以将echo与bc命令结合起来使用，代码如下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1.212*3"</span> | bc         <span class="comment">## 简单浮点运算</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"scale=2;3/8"</span> | bc      <span class="comment">##将输出结果设置为2位</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"obase=2;127"</span> | bc     <span class="comment">##输出运算结果的二进制</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"obase=10;ibase=2;101111111"</span> | bc     <span class="comment">##将二进制转换成十进制</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"10^10"</span> | bc          <span class="comment">##求幂指数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sqrt(100)"</span> | bc        <span class="comment">##开平方</span></span><br></pre></td></tr></table></figure><p>除了用bc做尽职转换以外，还可以这样做： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((base<span class="comment">#number))  表示把任意base进制的数number转换成十进制</span></span><br><span class="line">例子：</span><br><span class="line"><span class="built_in">echo</span> $((8<span class="comment">#377))   返回255</span></span><br><span class="line"><span class="built_in">echo</span> $((025))返回21 ， 八进制</span><br><span class="line"><span class="built_in">echo</span> $((0xA4))    返回164 ， 十六进制</span><br></pre></td></tr></table></figure><p>使用bc还可以用来比较浮点数的大小： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop02 bin]<span class="comment"># echo "1.2 &lt; 2" |bc</span></span><br><span class="line">1</span><br><span class="line">[root@hadoop02 bin]<span class="comment"># echo "1.2 &gt; 2" |bc</span></span><br><span class="line">0</span><br><span class="line">[root@hadoop02 bin]<span class="comment"># echo "1.2 == 2.2" |bc</span></span><br><span class="line">0</span><br><span class="line">[root@hadoop02 bin]<span class="comment"># echo "1.2 != 2.2" |bc</span></span><br><span class="line">1</span><br><span class="line">看出规律了嘛？运算如果为真返回 1，否则返回 0，写一个例子：</span><br><span class="line">[root@hadoop02 bin]<span class="comment"># [ $(echo "2.2 &gt; 2" |bc) -eq 1 ] &amp;&amp; echo yes || echo no</span></span><br><span class="line">yes</span><br><span class="line">[root@hadoop02 bin]<span class="comment"># [ $(echo "2.2 &lt; 2" |bc) -eq 1 ] &amp;&amp; echo yes || echo no</span></span><br><span class="line">no</span><br></pre></td></tr></table></figure><h3 id="2-2-2、关系运算符"><a href="#2-2-2、关系运算符" class="headerlink" title="2.2.2、关系运算符"></a>2.2.2、关系运算符</h3><p>下面给出一张关系运算符的列表： </p><table><thead><tr><th><strong>运算符</strong></th><th style="text-align:center"><strong>等同运算符</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td>-eq</td><td style="text-align:center">=</td><td style="text-align:left">检测两个数是否相等，相等返回true</td></tr><tr><td>-ne</td><td style="text-align:center">!=</td><td style="text-align:left">检测两个数是否相等，不相等返回true</td></tr><tr><td>-ge</td><td style="text-align:center">&gt;=</td><td style="text-align:left">检测左边的数是否大等于右边的，如果是，则返回true</td></tr><tr><td>-gt</td><td style="text-align:center">&gt;</td><td style="text-align:left">检测左边的数是否大于右边的，如果是，则返回true</td></tr><tr><td>-le</td><td style="text-align:center">&lt;=</td><td style="text-align:left">检测左边的数是否小于等于右边的，如果是，则返回true</td></tr><tr><td>-lt</td><td style="text-align:center">&lt;</td><td style="text-align:left">检测左边的数是否小于右边的，如果是，则返回true</td></tr></tbody></table><h3 id="2-2-3、布尔运算符"><a href="#2-2-3、布尔运算符" class="headerlink" title="2.2.3、布尔运算符"></a>2.2.3、布尔运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>等同运算符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>!</td><td>!</td><td>非运算，表达式为 true 则返回false，否则返回true</td></tr><tr><td>-a</td><td>&amp;&amp;</td><td>与运算，两个表达式都为true 才返回true</td></tr><tr><td>-o</td><td>\</td><td>\</td><td></td><td>或运算，有一个表达式为true 则返回true</td></tr></tbody></table><h3 id="2-2-4、字符串运算符"><a href="#2-2-4、字符串运算符" class="headerlink" title="2.2.4、字符串运算符"></a>2.2.4、字符串运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回true</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回true</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回true</td></tr><tr><td>-n</td><td>检测字符串长度是否为0，不为0返回true</td></tr><tr><td>str</td><td>检测字符串是否为空，不为空返回true</td></tr></tbody></table><h3 id="2-2-5、文件运算符"><a href="#2-2-5、文件运算符" class="headerlink" title="2.2.5、文件运算符"></a>2.2.5、文件运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-d</td><td>检测文件是否是目录，如果是，则返回true</td></tr><tr><td>-f</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回true</td></tr><tr><td>-e</td><td>检测文件（包括目录）是否存在，如果是，则返回true</td></tr><tr><td>-s</td><td>检测文件是否为空（文件大小是否大于0），不为空返回true</td></tr><tr><td>-r</td><td>检测文件是否可读，如果是，则返回true</td></tr><tr><td>-w</td><td>检测文件是否可写，如果是，则返回true</td></tr><tr><td>-x</td><td>检测文件是否可执行，如果是，则返回true</td></tr><tr><td>-b</td><td>检测文件是否是块设备文件，如果是，则返回true</td></tr><tr><td>-c</td><td>检测文件是否是字符设备文件，如果是，则返回true</td></tr></tbody></table><h2 id="2-3、流程控制"><a href="#2-3、流程控制" class="headerlink" title="2.3、流程控制"></a>2.3、流程控制</h2><h3 id="2-3-1、if"><a href="#2-3-1、if" class="headerlink" title="2.3.1、if"></a>2.3.1、if</h3><h4 id="if-then-elif-then-else-fi"><a href="#if-then-elif-then-else-fi" class="headerlink" title="if.. then ..elif.. then.. else..fi"></a>if.. then ..elif.. then.. else..fi</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if语法格式：</span></span><br><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    statements </span><br><span class="line">[<span class="keyword">elif</span> condition </span><br><span class="line">    <span class="keyword">then</span> statements. ..] </span><br><span class="line">[<span class="keyword">else</span> </span><br><span class="line">    statements ] </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例程序：</span></span><br><span class="line"></span><br><span class="line">[root@hadoop02 bin]<span class="comment"># vi g.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">## read a value for NAME from stdin</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please input your name:"</span> NAME</span><br><span class="line"><span class="comment">## printf '%s\n' $NAME</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$NAME</span> = root ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello <span class="variable">$&#123;NAME&#125;</span>,  welcome !"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$NAME</span> = hadoop ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"hello <span class="variable">$&#123;NAME&#125;</span>,  welcome !"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"I don’t know you !"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 规则解释</span></span><br><span class="line">[ condition ]   (注：condition前后要有空格)</span><br><span class="line"><span class="comment">#非空返回true，可使用$?验证（0为true，&gt;1为false）</span></span><br><span class="line">[ hadoop ]</span><br><span class="line"><span class="comment">#空返回false</span></span><br><span class="line">[  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意[  ]内部的=周边的空格</span></span><br></pre></td></tr></table></figure><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ condition ] &amp;&amp; <span class="built_in">echo</span> OK || <span class="built_in">echo</span> notok</span><br><span class="line"><span class="comment"># 条件满足，执行&amp;&amp;后面的语句；条件不满足，执行||后面的语句</span></span><br></pre></td></tr></table></figure><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-28-152309.png" alt=""></p><h4 id="条件判断组合"><a href="#条件判断组合" class="headerlink" title="条件判断组合"></a>条件判断组合</h4><blockquote><p> 条件判断组合有两种使用方式： <code>[]</code>  和 <code>[[]]</code></p><p>注意它们的区别：</p><p><strong>[[ ]]</strong> <strong>中逻辑组合可以使用 &amp;&amp;  ||</strong> <strong>符号</strong></p><p><strong>[]</strong> <strong>里面逻辑组合可以用  -a   -o</strong> </p></blockquote><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-28-152343.png" alt=""></p><h4 id="常用判断运算符"><a href="#常用判断运算符" class="headerlink" title="常用判断运算符"></a><strong>常用判断运算符</strong></h4><p><strong>1. 字符串比较</strong></p><blockquote><p>= 判断相等<br>!= 判断不相等<br>-z 字符串长度是为0返回true<br>-n 字符串长度是不为0返回true</p></blockquote><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-28-152610.png" alt=""></p><p><strong>2. 整数比较</strong> </p><blockquote><p><strong>-lt</strong> <strong>小于  less than</strong> </p><p><strong>-le</strong> <strong>小于等于</strong></p><p><strong>-eq</strong> <strong>等于</strong></p><p><strong>-gt</strong> <strong>大于 great than</strong></p><p><strong>-ge</strong> <strong>大于等于</strong></p><p><strong>-ne</strong> <strong>不等于</strong></p></blockquote><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-28-152650.png" alt=""></p><p><strong>3.  文件判断</strong></p><blockquote><p>-d 是否为目录</p><p><code>if [ -d /bin ]; then echo ok; else echo notok;fi</code></p><p>-f 是否为文件</p><p><code>if [ -f /bin/ls ]; then echo ok; else echo notok;fi</code></p><p>-e 是否存在</p><p><code>if [ -e /bin/ls ]; then echo ok; else echo notok;fi</code></p></blockquote><h3 id="2-3-2、while"><a href="#2-3-2、while" class="headerlink" title="2.3.2、while"></a>2.3.2、while</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">command</span></span><br><span class="line">   ……</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> ((i&lt;=3))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 3 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假</span></span><br><span class="line"><span class="comment"># 换种方式：循环体会一直执行，直到条件表达式expression为false</span></span><br><span class="line"><span class="comment"># 注意：上述let i++ 可以写成 i=$(($i+1))或者i=$((i+1))</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3、case"><a href="#2-3-3、case" class="headerlink" title="2.3.3、case"></a>2.3.3、case</h3><p>Case语法（通过下面这个例子展示）： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"starting"</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"stoping"</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: &#123;start|stop&#125;"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4、for"><a href="#2-3-4、for" class="headerlink" title="2.3.4、for"></a>2.3.4、for</h3><p><strong>语法格式：</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量</span></span><br></pre></td></tr></table></figure><p><strong>三种方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$N</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> &#123;1..3&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$N</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3</span></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;=2; i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"welcome <span class="variable">$i</span> times"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2-3-5、util"><a href="#2-3-5、util" class="headerlink" title="2.3.5、util"></a>2.3.5、util</h3><p><strong>语法结构</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">until expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">command</span></span><br><span class="line">   ……</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expression一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</span></span><br><span class="line"><span class="comment"># 换种方式说：循环体会一直执行，直到条件表达式expression为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 示例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">## vi util.sh</span></span><br><span class="line">a=0</span><br><span class="line">until [ ! <span class="variable">$a</span> -lt 3 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">   a=`expr <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">----</span><br><span class="line">输出: </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="2-4、数组"><a href="#2-4、数组" class="headerlink" title="2.4、数组"></a>2.4、数组</h2><p>在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value1 ... valuen)</span><br><span class="line">例子：mingxing=(huangbo xuzheng wangbaoqiang)</span><br><span class="line">也可以单独定义：</span><br><span class="line">mingxing[3]=liujialing</span><br><span class="line">读取数组元素的格式是：</span><br><span class="line"><span class="variable">$&#123;array_name[index]&#125;</span></span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组下标： 前面加 `!`</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;!mingxing[@]&#125;</span>  或者</span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;!mingxing[*]&#125;</span></span><br><span class="line">---</span><br><span class="line">输出: </span><br><span class="line">0 1 2 3</span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出数组的所有元素：直接取值</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;mingxing[*]&#125;</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;mingxing[@]&#125;</span></span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的长度：`#` </span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;#mingxing[*]&#125;</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;#mingxing[@]&#125;</span></span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组对接: 添加新的值</span></span><br><span class="line">[linux@linux ~]$ mingxing+=(liuyifei liuyufeng)</span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数组元素，但是会保留数组对应位置，就是该值的下标依然会保留，会空着，之后，还可以填充其他的值进来。</span></span><br><span class="line"><span class="comment"># 删除第一个元素：之后 $&#123;mingxing[0]&#125; 就是空值了</span></span><br><span class="line">[linux@linux ~]$ <span class="built_in">unset</span> mingxing[0]</span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=(192.168.1.1 192.168.1.2 192.168.1.3)</span><br><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;<span class="variable">$&#123;#IP[*]&#125;</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;IP[$i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#第二种方式</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$&#123;IP[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$ip</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的分片：</span></span><br><span class="line"><span class="variable">$&#123;arr[@]:number1:number2&#125;</span></span><br><span class="line">这里number1从下标number1开始取值，number2往后取几个元素，即取到的新的数组的长度</span><br><span class="line">---</span><br><span class="line">cts1 ~ <span class="comment"># arr=(1 2 3 4 5 6 7)</span></span><br><span class="line">cts1 ~ <span class="comment"># echo "&#123;arr[@]:0:3&#125; --- $&#123;arr[@]:0:3&#125; "</span></span><br><span class="line">&#123;arr[@]:0:3&#125; --- 1 2 3</span><br><span class="line">cts1 ~ <span class="comment"># echo "&#123;arr[@]:3:3&#125; --- $&#123;arr[@]:3:3&#125; "</span></span><br><span class="line">&#123;arr[@]:3:3&#125; --- 4 5 6</span><br><span class="line">cts1 ~ <span class="comment"># echo "&#123;arr[@]:4:3&#125; --- $&#123;arr[@]:4:3&#125; "</span></span><br><span class="line">&#123;arr[@]:4:3&#125; --- 5 6 7</span><br></pre></td></tr></table></figure><h2 id="2-5、函数使用"><a href="#2-5、函数使用" class="headerlink" title="2.5、函数使用"></a>2.5、函数使用</h2><p>函数的语法使用示例 : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop02 bin]<span class="comment"># vi i.sh </span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"`date +%Y-%m-%d`"</span></span><br><span class="line">     <span class="comment"># return 2</span></span><br><span class="line">&#125;</span><br><span class="line">hello</span><br><span class="line"><span class="built_in">echo</span> “huangbo” </span><br><span class="line"><span class="comment"># echo $?</span></span><br><span class="line">A=<span class="string">"mazhonghua"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$A</span></span><br><span class="line">---执行结果----</span><br><span class="line">“huangbo”</span><br><span class="line">mazhonghua</span><br></pre></td></tr></table></figure><p>函数的调用方式就是直接写函数名就OK了 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">1、必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先预编译</span><br><span class="line">2、函数返回值，只能通过$? 系统变量获得，可以显示加：<span class="built_in">return</span> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <span class="built_in">return</span>后跟数值n(0-255)</span><br></pre></td></tr></table></figure><p>脚本调试： </p><blockquote><p>使用-x选项跟踪脚本调试shell脚本，能打印出所执行的每一行命令以及当前状态</p><p>sh -x i.sh</p><p>或者在代码中加入：set -x</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cts1 Desktop <span class="comment"># sh -x i.sh</span></span><br><span class="line">+ hello</span><br><span class="line">++ date +%Y-%m-%d</span><br><span class="line">+ <span class="built_in">echo</span> 2018-05-29</span><br><span class="line">2018-05-29</span><br><span class="line">+ <span class="built_in">return</span> 2</span><br><span class="line">+ <span class="built_in">echo</span> $<span class="string">'\342\200\234huangbo\342\200\235'</span></span><br><span class="line">“huangbo”</span><br><span class="line">+ <span class="built_in">echo</span> 0</span><br><span class="line">0</span><br><span class="line">+ A=mazhonghua</span><br><span class="line">+ <span class="built_in">echo</span> mazhonghua</span><br><span class="line">mazhonghua</span><br></pre></td></tr></table></figure><h2 id="2-6、函数参数"><a href="#2-6、函数参数" class="headerlink" title="2.6、函数参数"></a>2.6、函数参数</h2><p>直接上代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim funcWithParam.sh</span><br><span class="line">--------sh文件--------</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># filename=funcWithParam</span></span><br><span class="line"><span class="function"><span class="title">funcWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第一个参数为 <span class="variable">$1</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第二个参数为 <span class="variable">$2</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$10</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$&#123;10&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十一个参数为 <span class="variable">$&#123;11&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"参数总数有 <span class="variable">$#</span> 个!"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"作为一个字符串输出所有参数 $* !"</span></span><br><span class="line">&#125;</span><br><span class="line">funcWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br><span class="line">--------------------</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">cts1 Desktop <span class="comment"># sh funcWithParam.sh</span></span><br><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure><h2 id="2-7、跨脚本调用函数"><a href="#2-7、跨脚本调用函数" class="headerlink" title="2.7、跨脚本调用函数"></a>2.7、跨脚本调用函数</h2><p>编写一个base.sh脚本，里面放放一个test函数 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim base.sh</span><br><span class="line">------</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"hello"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再编写一个other.sh脚本，里面引入base.sh脚本，并且调用test函数： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim other.sh</span><br><span class="line">--------</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> base.sh  <span class="comment">## 引入脚本</span></span><br><span class="line"><span class="built_in">test</span>    <span class="comment">##调用引入脚本当中的test函数</span></span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">cts1 Desktop <span class="comment"># sh other.sh</span></span><br><span class="line">other.sh: line 2: ./base.sh: 权限不够</span><br><span class="line">cts1 Desktop <span class="comment"># chmod 755 other.sh base.sh</span></span><br><span class="line">cts1 Desktop <span class="comment"># ./other.sh</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h1 id="3、Shell综合案例"><a href="#3、Shell综合案例" class="headerlink" title="3、Shell综合案例"></a>3、Shell综合案例</h1><h2 id="3-1、打印9-9乘法表"><a href="#3-1、打印9-9乘法表" class="headerlink" title="3.1、打印9*9乘法表"></a>3.1、打印9*9乘法表</h2><p>示例代码： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span>((i=1;i&lt;=9;++i))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span>((j=1;j&lt;=i;j++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">"<span class="variable">$i</span>*<span class="variable">$j</span>=<span class="variable">$((i*j)</span>)\t"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">-n 不加换行符</span><br><span class="line">-e 解释转义符</span><br><span class="line"><span class="built_in">echo</span> 换行</span><br><span class="line"></span><br><span class="line">效果: </span><br><span class="line">1*1=1</span><br><span class="line">2*1=22*2=4</span><br><span class="line">3*1=33*2=63*3=9</span><br><span class="line">4*1=44*2=84*3=124*4=16</span><br><span class="line">5*1=55*2=105*3=155*4=205*5=25</span><br><span class="line">6*1=66*2=126*3=186*4=246*5=306*6=36</span><br><span class="line">7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span><br><span class="line">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span><br><span class="line">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span><br></pre></td></tr></table></figure><h2 id="3-2、自动部署集群的JDK"><a href="#3-2、自动部署集群的JDK" class="headerlink" title="3.2、自动部署集群的JDK"></a>3.2、自动部署集群的JDK</h2><p><strong>1、</strong>  <strong>需求描述</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公司内有一个N个节点的集群，需要统一安装一些软件（jdk）</span><br><span class="line">需要开发一个脚本，实现对集群中的N台节点批量自动下载、安装jdk</span><br></pre></td></tr></table></figure><p><strong>2、</strong>  <strong>思路</strong></p><p>思考一下：我们现在有一个JDK安装包在一台服务器上。那我们要实现这个目标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、把包传到每台服务器，或者通过本地yum源的方式去服务器取</span><br><span class="line">2、给每台一台机器发送一个安装脚本，并且让脚本自己执行</span><br><span class="line">3.   要写一个启动脚本，用来执行以上两部操作</span><br></pre></td></tr></table></figure><p><strong>3、</strong>  <strong>Expect**</strong>的使用**</p><p><strong>蛋疼点</strong>：假如在没有配置SSH免密登录的前提下，我们要要是scp命令从一台机器拷贝文件夹到另外的机器，会有人机交互过程，那我们怎么让机器自己实现人机交互？</p><p><strong>灵丹妙药</strong>：expect</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>set</td><td>可以设置超时，也可以设置变量</td></tr><tr><td>timeout</td><td>超时等待时间，默认 10s</td></tr><tr><td>spawn</td><td>执行一个命令</td></tr><tr><td>send</td><td>执行交互，相当于手动输入</td></tr><tr><td>expect “”（expect内部命令）</td><td>匹配输出的内容</td></tr><tr><td>exp_continue</td><td>继续执行下面匹配</td></tr></tbody></table><p><strong>思路：</strong>模拟该人机交互过程，在需要交互的情况下，通过我们的检测给输入提前准备好的值即可</p><p><strong>示例：</strong>观看配置SSH免密登录的过程</p><p><strong>实现脚本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vi testExpect.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义一个函数</span></span><br><span class="line"><span class="function"><span class="title">sshcopyid</span></span>()&#123;</span><br><span class="line">        expect -c <span class="string">"</span></span><br><span class="line"><span class="string">                spawn ssh-copy-id <span class="variable">$1</span></span></span><br><span class="line"><span class="string">                expect &#123;</span></span><br><span class="line"><span class="string">                        \"(yes/no)?\" &#123;send \"yes\r\";exp_continue&#125;</span></span><br><span class="line"><span class="string">                        \"password:\" &#123;send \"<span class="variable">$2</span>\r\";exp_continue&#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 调用函数执行</span></span><br><span class="line">sshcopyid <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如果机器没有expect，则请先安装expect</span></span><br><span class="line">yum install -y expect</span><br></pre></td></tr></table></figure><p><strong>4、</strong>  <strong>脚本实现</strong> </p><ol><li><p>启动脚本initInstallJDK.sh </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SERVERS=<span class="string">"192.168.123.201"</span></span><br><span class="line">PASSWORD=hadoop</span><br><span class="line">BASE_SERVER=192.168.123.202</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">auto_ssh_copy_id</span></span>() &#123;</span><br><span class="line">    expect -c <span class="string">"set timeout -1;</span></span><br><span class="line"><span class="string">        spawn ssh-copy-id <span class="variable">$1</span>;</span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">            *(yes/no)* &#123;send -- yes\r;exp_continue;&#125;</span></span><br><span class="line"><span class="string">            *password:* &#123;send -- <span class="variable">$2</span>\r;exp_continue;&#125;</span></span><br><span class="line"><span class="string">            eof &#123;exit 0;&#125;</span></span><br><span class="line"><span class="string">        &#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ssh_copy_id_to_all</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> SERVER <span class="keyword">in</span> <span class="variable">$SERVERS</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        auto_ssh_copy_id <span class="variable">$SERVER</span> <span class="variable">$PASSWORD</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ssh_copy_id_to_all</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> SERVER <span class="keyword">in</span> <span class="variable">$SERVERS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    scp installJDK.sh root@<span class="variable">$SERVER</span>:/root</span><br><span class="line">    ssh root@<span class="variable">$SERVER</span> chmod 755 installJDK.sh</span><br><span class="line">    ssh root@<span class="variable">$SERVER</span> /root/installJDK.sh</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>安装脚本installJDK.sh </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">BASE_SERVER=192.168.123.202</span><br><span class="line">yum install -y wget</span><br><span class="line">wget <span class="variable">$BASE_SERVER</span>/soft/jdk-8u73-linux-x64.tar.gz</span><br><span class="line">tar -zxvf jdk-8u73-linux-x64.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt;EOF</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_73</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ol><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>写脚本注意事项：</p><p>1、开头加解释器： #!/bin/bash，和注释说明。</p><p>2、命名建议规则：变量名大写、局部变量小写，函数名小写，名字体现出实际作用。</p><p>3、默认变量是全局的，在函数中变量 local 指定为局部变量，避免污染其他作用域。</p><p>4、set -e 遇到执行非 0 时退出脚本， set -x 打印执行过程。</p><p>5、写脚本一定先测试再到生产上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、Linux-shell简介&quot;&gt;&lt;a href=&quot;#1、Linux-shell简介&quot; class=&quot;headerlink&quot; title=&quot;1、Linux shell简介&quot;&gt;&lt;/a&gt;1、Linux shell简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、Shell概述&quot;&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-2</title>
    <link href="https://airpoet.github.io/2018/05/27/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://airpoet.github.io/2018/05/27/Linux/Linux学习笔记-2/</id>
    <published>2018-05-27T12:14:48.193Z</published>
    <updated>2018-06-02T09:13:45.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-VI文本编辑器"><a href="#1-VI文本编辑器" class="headerlink" title="1. VI文本编辑器"></a>1. VI文本编辑器</h1><p>学会使用vi编辑器是学习Linux系统的必备技术之一，因为一般的Linux服务器是没有GUI界面的，Linux运维及开发人员基本上都是通过命令行的方式进行文本编辑或程序编写的。vi编辑器是Linux内置的文本编辑器，几乎所有的类unix系统中都内置了vi编辑器，而其它编辑器则不一定，另外很多软件会调用vi编辑进行内容编写，例如crontab定时任务。较之于其它编辑器或GUI编辑器，vi编辑速度是最快的。VIM是它的增强版本，VI有三种基本工作模式，分别是：</p><p><strong>命令模式</strong>（command mode）、或者叫一般模式</p><p><strong>插入模式</strong>（insert mode）、或者叫编辑模式</p><p><strong>底行模式</strong>（last line mode）、或者叫命令行模式</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-124220.jpg" alt=""></p><h3 id="1-最基本用法"><a href="#1-最基本用法" class="headerlink" title="1. 最基本用法"></a>1. 最基本用法</h3><table><thead><tr><th>1、首先会进入“<strong>一般模式</strong>”，此模式只接受各种命令快捷键，不能编辑文件内容</th></tr></thead><tbody><tr><td>2、按<strong>i</strong>键，就会从一般模式进入编辑模式，此模式下，敲入的都是文件内容</td></tr><tr><td>3、编辑完成之后，按<strong>Esc</strong>键退出编辑模式，回到一般模式</td></tr><tr><td>4、再按<strong>：</strong>，进入“底行命令模式”，输入<strong>wq</strong>命令，回车即可保存退出</td></tr></tbody></table><h3 id="2-移动光标-一般模式"><a href="#2-移动光标-一般模式" class="headerlink" title="2. 移动光标 (一般模式)"></a>2. <strong>移动光标</strong> (一般模式)</h3><table><thead><tr><th style="text-align:left">1、       使用上下左右键可以移动光标</th></tr></thead><tbody><tr><td style="text-align:left">2、       使用<strong>h,j,k,l</strong>，依次是向<strong>左，下，上，右</strong>移动</td></tr><tr><td style="text-align:left">3、       <strong>w</strong>：将光标移动到<strong>下一个单词的首字母</strong>处</td></tr><tr><td style="text-align:left">4、       W：利用空格向后移动光标，就是忽略标点</td></tr><tr><td style="text-align:left">5、       <strong>b</strong>：利用word包括标点<strong>向前移动光标</strong>, 与<strong>w</strong>相对应</td></tr><tr><td style="text-align:left">6、       B：利用空格向前移动光标，忽略标点</td></tr><tr><td style="text-align:left">7、       e：将光标移动到下一个word的尾部，包括符号</td></tr><tr><td style="text-align:left">8、       E: 将光标移动到下一个空格分隔字的尾部</td></tr><tr><td style="text-align:left">9、       <strong>(</strong>：移动到<strong>句子开始</strong></td></tr><tr><td style="text-align:left">10、     <strong>)</strong>：移动到<strong>句子结束</strong></td></tr><tr><td style="text-align:left">11、     <strong>0</strong>：移动光标到<strong>本句句首</strong></td></tr><tr><td style="text-align:left">12、    <strong>$</strong>：移动光标到<strong>本行行尾</strong></td></tr><tr><td style="text-align:left">13、    <strong>{</strong>：移动到段落开始</td></tr><tr><td style="text-align:left">14、    <strong>}</strong>：移动到段落结束</td></tr><tr><td style="text-align:left">15、    H：屏幕顶端</td></tr><tr><td style="text-align:left">16、    L：屏幕底端</td></tr><tr><td style="text-align:left">17、    M：移动到屏幕中央位置</td></tr><tr><td style="text-align:left">18、    <strong>gg</strong>：直接跳到文件的<strong>首行行首</strong></td></tr><tr><td style="text-align:left">19、    <strong>G</strong>：直接跳到文件的<strong>末行行首</strong></td></tr><tr><td style="text-align:left">20、    最强光标移动：   <strong>%</strong> : <strong>匹配括号移动</strong>，包括(, {, [.（你需要把光标先移到括号上）   <strong>*</strong>: <strong>匹配光标当前所在的单词</strong>，移动光标到<strong>下一个</strong>匹配单词   <strong>#</strong>: <strong>匹配光标当前所在的单词</strong>，移动光标到<strong>上一个</strong>匹配单词</td></tr></tbody></table><blockquote><p><strong><em>重点总结</em></strong>: </p><ol><li><code>h l</code> : 左右,             <code>j k</code> : 下上.</li><li><code>w</code>: 下一个单词 ,      <code>b</code>: 上一个单词.</li><li><code>0</code>: 本行行首,           <code>$</code>: 本行行尾</li><li><code>(</code>: 句子开始,           <code>)</code>: 句子结束</li><li><code>{</code>: 段落开始            <code>}</code>: 段落结束</li><li><code>gg</code>: 文件行首          <code>G</code>: 文件行尾</li><li><code>%</code>: 下一个括号         <code>*</code>: 下一个单词      <code>#</code>: 上一个单词</li></ol></blockquote><h3 id="3-常用操作-一般模式-gt-gt-插入模式"><a href="#3-常用操作-一般模式-gt-gt-插入模式" class="headerlink" title="3. 常用操作(一般模式 &gt;&gt; 插入模式)"></a>3. 常用操作(一般模式 &gt;&gt; 插入模式)</h3><table><thead><tr><th>单位</th><th>指令1</th><th>指令2</th></tr></thead><tbody><tr><td>当前位  <u>前一位/后一位</u></td><td><code>i</code>:  在光标前一位开始插入</td><td><code>a</code>: 光标后一位开始插入</td></tr><tr><td>当前行  <u>最前/最后</u></td><td><code>I</code>:  在该行的最前面插入</td><td><code>A</code>: 在该行的最后插入</td></tr><tr><td>当前行  <u>上一行/下一行</u></td><td><code>o</code>: 小o, 当前行的下一行插入空行</td><td><code>O</code>: 大o, 当前内容下移一行, 当前行插入空行</td></tr><tr><td>当前行   <del>删除</del></td><td><code>dd</code>:  删除当前行</td><td><code>3dd</code>: ndd, 删除从当前行开始的 n行</td></tr><tr><td>当前行   复制</td><td><code>yy</code>: 复制光标所在行</td><td><code>3yy</code>: 复制从当前行开始的3行</td></tr><tr><td>粘贴</td><td><code>p</code>: 粘贴到光标所在行的下一行</td><td></td></tr><tr><td><strong>撤销</strong></td><td><code>u</code>: undo  撤销操作, 可一直撤销到最前面</td></tr></tbody></table><p><strong><em>重点总结</em></strong>: </p><blockquote><ol><li><code>i</code> :  当前光标前开始插入;      <code>a</code>: 光标后一位开始插入</li><li><code>I</code>:  在该行的最前面插入;       <code>A</code>: 在该行的最后插入</li><li><code>o</code>: 小o, 当前行的下一行插入空行    <code>O</code>: 大o, 当前内容下移一行, 当前行插入空行</li><li><code>dd</code>:  删除当前行                      <code>3dd</code>: ndd, 删除从当前行开始的 n行</li><li><code>yy</code>: 复制光标所在行                <code>3yy</code>: 复制从当前行开始的3行</li><li><code>p</code>: 粘贴到光标所在行的下一行</li><li><code>u</code>: undo  撤销操作, 可一直撤销到最前面</li></ol></blockquote><h3 id="4-查找并替换"><a href="#4-查找并替换" class="headerlink" title="4. 查找并替换"></a>4. 查找并替换</h3><blockquote><p>在底行命令模式中输入</p></blockquote><table><thead><tr><th style="text-align:left">1. 显示行号   <strong>:set  nu</strong></th></tr></thead><tbody><tr><td style="text-align:left">2. <strong>隐藏行号</strong>   <strong>:set  nonu</strong></td></tr><tr><td style="text-align:left">3 .<strong>查找关键字</strong>   <strong>:/you</strong>       ## 效果：查找文件中出现的you，并定位到第一个找到的地方，按 <strong>n</strong>可以定位到下一个匹配位置（按<strong>N</strong>定位到上一个）   查询的时候被匹配上的字符串会被高亮，可以在命令模式下使用<strong>:noh</strong>取消高亮</td></tr><tr><td style="text-align:left">4. <strong>直接跳转到</strong> 3行  <strong>: 3</strong></td></tr></tbody></table><h3 id="5-替换操作"><a href="#5-替换操作" class="headerlink" title="5. 替换操作"></a>5. <strong>替换操作</strong></h3><table><thead><tr><th style="text-align:left"><code>:1 s/sad/bbb</code>      将第一行的第一个sad替换为bbb</th></tr></thead><tbody><tr><td style="text-align:left"><code>:1,5 s/sad/bbb</code>     将第一行到第五行的第一个sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:1,. s/sad/bbb</code>     将第一行到光标行的第一个sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:.,$ s/sad/bbb</code>     将光标行到缓冲区最后一行的sad替换为bbb</td></tr><tr><td style="text-align:left"><code>:s/sad/bbb</code>       查找光标所在行的第一个sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:s/sad/bbb/g</code>     查找光标所在行的所有sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:%s/sad/bbb</code>     查找文件中所有行第一次出现的sad，替换为bbb</td></tr><tr><td style="text-align:left"><code>:%s/sad/bbb/g</code>   查找文件中所有的sad，替换为bbb</td></tr></tbody></table><h3 id="6-屏幕翻滚类命令"><a href="#6-屏幕翻滚类命令" class="headerlink" title="6. 屏幕翻滚类命令"></a>6. 屏幕翻滚类命令</h3><table><thead><tr><th>Ctrl + u：向文件首翻半屏</th></tr></thead><tbody><tr><td>Ctrl + d：向文件尾翻半屏</td></tr><tr><td>Ctrl + f：向文件尾翻一屏</td></tr><tr><td>Ctrl＋b：向文件首翻一屏</td></tr><tr><td>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部</td></tr></tbody></table><h3 id="7-其它的小技巧"><a href="#7-其它的小技巧" class="headerlink" title="7. 其它的小技巧"></a>7. 其它的小技巧</h3><table><thead><tr><th>r         替换光标处一个字符</th></tr></thead><tbody><tr><td>R         进入替换模式，从光标处连续替换</td></tr><tr><td>s         删除当前字符，进入插入模式</td></tr><tr><td>S         删除当前行，进入插入模式   ≈  dd, dd也会删除当前行, 但是不会进入插入模式</td></tr><tr><td>f  s      光标行内向后查找第一个出现的字符s    (<strong>先输f , 再输 s,  向后找 s</strong>)</td></tr><tr><td>F  s      光标行内向前查找第一个出现的字符s   (<strong>先输F , 再输 s,  向前找 s</strong>)</td></tr><tr><td>~         大小写转换，只转换光标处字符</td></tr></tbody></table><h3 id="8-速查网址"><a href="#8-速查网址" class="headerlink" title="8. 速查网址"></a>8. 速查网址</h3><ul><li><a href="https://www.ctolib.com/cheatsheets-Vim-command.html" target="_blank" rel="noopener">vim详解</a></li></ul><hr><h1 id="2-网络管理"><a href="#2-网络管理" class="headerlink" title="2.  网络管理"></a>2.  网络管理</h1><h3 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a><code>ifconfig</code>命令</h3><p>ifconfig命令主要用于配置网络接口，如果不加任何参数，则ifconfig命令用于查看当前所有活动网络接口的状态信息，如下图：</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-141519.png" alt="image-20180527221518692"></p><p><strong>eth0</strong> 表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是<code>00:0C:29:D6:C7:0E</code>。</p><p><strong>inet addr</strong> 用来表示网卡的IP地址，此网卡的IP地址是<code>192.168.179.6</code>，广播地址<code>192.168.170.255</code>，掩码地址<code>Mask:255.255.255.0</code>。</p><p><strong>lo</strong>  是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把  httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p><p><strong>ifconfig其他常用使用</strong></p><table><thead><tr><th>-a         显示所有网络接口，包括停用的</th></tr></thead><tbody><tr><td>-s         短格式显示网络信息，同netstat   -i</td></tr><tr><td>-v         显示详细信息，在网络出错的情况下适用</td></tr><tr><td>interface    指定网络接口</td></tr><tr><td>up         启用网络接口</td></tr><tr><td>down      关闭网络接口</td></tr></tbody></table><p><strong>启动关闭指定网卡&amp; 常用操作：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 up   <span class="comment">#启动网卡</span></span><br><span class="line">ifconfig eth0 down <span class="comment">#关闭网卡</span></span><br><span class="line">ifconfig   <span class="comment">#处于激活状态的网络接口</span></span><br><span class="line">ifconfig -a  <span class="comment">#所有配置的网络接口，不论其是否激活</span></span><br><span class="line">ifconfig eth0  <span class="comment">#显示eth0的网卡信息</span></span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-三种通信模式"><a href="#1-三种通信模式" class="headerlink" title="1. 三种通信模式"></a>1. 三种通信模式</h4><p><strong>Vmware中的虚拟机和宿主机进行通信有三种网络方式</strong>，它们分别是：</p><p><strong>Bridged</strong> <strong>（桥接模式）</strong></p><p><strong>NAT</strong> <strong>（网络地址转换模式）</strong></p><p><strong>Host-Only</strong> <strong>（仅主机模式）</strong></p><ol><li><p><strong>Bridged</strong> <strong>（桥接模式）</strong></p><p>桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致</p></li><li><p><strong>Host-Only</strong> <strong>（仅主机模式）宿主</strong></p><p>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是 Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p></li><li><p><strong>NAT</strong>   <strong>模式</strong></p><p>使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-142820.png" alt=""></p></li></ol><h4 id="2-NAT网络模式的配置"><a href="#2-NAT网络模式的配置" class="headerlink" title="2. NAT网络模式的配置"></a><strong>2. NAT网络模式的配置</strong></h4><p><a href="https://airpoet.github.io/2018/05/25/Linux/Linux学习笔记-3/">见Linux学习笔记3, 第8条: Linux虚拟主机集群测试环境基本搭建</a></p><h4 id="3-其它的常用网络管理命令"><a href="#3-其它的常用网络管理命令" class="headerlink" title="3.  其它的常用网络管理命令"></a>3.  其它的常用网络管理命令</h4><ol><li><p><strong>ping</strong>命令:   常用来测试网络连接是否正常</p><blockquote><p>先确定能ping通 <code>ping www.baidu.com</code></p></blockquote></li><li><p><strong>host</strong>命令:   host命令用来进行DNS查询</p><blockquote><p>然后用host命令可以查看到 <code>host www.baidu.com</code></p><p>然后通过浏览器访问该地址：<code>119.75.213.61</code></p></blockquote></li><li><p><strong>netstat</strong>命令:   netstat命令可以显示网络接口的很多统计信息，包括打开的socket和路由表</p><p>以下是常用命令选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a (all)显示所有选项，默认不显示LISTEN相关</span><br><span class="line"></span><br><span class="line">-t (tcp)仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化成数字</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服務状态</span><br><span class="line"></span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line">-r 显示路由信息，路由表</span><br><span class="line">-e 显示扩展信息，例如uid等</span><br><span class="line">-s 按各个协议进行统计</span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><p>1、列出所有端口，包括监听和未监听的：netstat -a</p><p>2、列出所有TCP端口：netstat -at</p><p>3、列出所有UDP端口：netstat -au</p><p>4、<strong>列出所有监听状态的TCP端口：该命令最重要用来查看哪个程序占用了哪个网络端口号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如查看谁占用了 tcp 的80 端口</span></span><br><span class="line">netstat -nltp | grep 80                                            [23:04:54]</span><br><span class="line">tcp        0      0 :::80                       :::*                        LISTEN      3890/httpd</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-防火墙"><a href="#4-防火墙" class="headerlink" title="4. 防火墙"></a>4. 防火墙</h4><p>防火墙根据配置文件/etc/sysconfig/iptables来控制本机的“出、入”网络访问行为</p><p>其对行为的配置策略有四个策略表</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-150724.png" alt=""></p><ol><li><p><strong>基础必备技能</strong> </p><p>| 查看防火墙状态         | service iptables status    |<br>| ———————- | ————————– |<br>| 开启防火墙             | service iptables start     |<br>| 关闭防火墙             | service iptables stop      |<br>| <strong>关闭防火墙开机自启</strong> | <strong>chkconfig iptables off</strong> |<br>| 设置防火墙开机自启     | chkconfig iptables on      |</p></li><li><p>扩展知识 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、列出iptables规则</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="comment"># 列出iptables规则并显示规则编号</span></span><br><span class="line">iptables -L -n --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、列出iptables nat表规则（默认是filter表）</span></span><br><span class="line">iptables -L -n -t nat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、清除默认规则（注意默认是filter表，如果对nat表操作要加-t nat）</span></span><br><span class="line"><span class="comment">#清除所有规则</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启iptables发现规则依然存在，因为没有保存</span></span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存配置</span></span><br><span class="line">service iptables save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、禁止SSH登陆（如果服务器在机房，一定要小心）</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、删除规则</span></span><br><span class="line">iptables -D INPUT -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、加入一条INPUT规则开放80端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-Linux系统启动级别管理"><a href="#3-Linux系统启动级别管理" class="headerlink" title="3. Linux系统启动级别管理"></a>3. Linux系统启动级别管理</h1><p>使用runlevel命令可以查看系统运行的级别 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runlevel                                                           [23:12:37]</span><br><span class="line">N 3</span><br></pre></td></tr></table></figure><p>修改系统默认启动级别 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  启动级别在这个路径查看</span></span><br><span class="line">vi /etc/inittab</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="comment">#   0 - halt (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#   1 - Single user mode</span></span><br><span class="line"><span class="comment">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span></span><br><span class="line"><span class="comment">#   3 - Full multiuser mode</span></span><br><span class="line"><span class="comment">#   4 - unused</span></span><br><span class="line"><span class="comment">#   5 - X11</span></span><br><span class="line"><span class="comment">#   6 - reboot (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">id:3:initdefault:</span><br></pre></td></tr></table></figure><blockquote><p>id:<strong>3</strong>:initdefault:               ##  配置默认启动级别</p><p>## <strong>通常将默认启动级别设置为：3</strong></p></blockquote><h1 id="4-用户和组"><a href="#4-用户和组" class="headerlink" title="4. 用户和组"></a>4. 用户和组</h1><h3 id="1-用户和组的概念"><a href="#1-用户和组的概念" class="headerlink" title="1. 用户和组的概念"></a>1. 用户和组的概念</h3><p>Linux是一个多任务多用户的操作系统，当我们在使用<code>ls -l</code>命令的时候我们看到如下信息： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x. 2 root root 4096 5月  24 00:15 <span class="built_in">test</span></span><br><span class="line">-rw-r--r--. 1 root root   58 5月  25 11:00 test.sh</span><br><span class="line">-rwxr-xr-x. 1 root root   35 5月  23 23:55 test.txt</span><br></pre></td></tr></table></figure><p>test：表示文件或者目录，具体的文件类型是由该行最前面的那个符号表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 当为[ *d* ]则是目录</span><br><span class="line">- 当为[ *-* ]则是文件；</span><br><span class="line">- 若是[ *l* ]则表示为链接文档(link file)；</span><br><span class="line">- 若是[ *b* ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</span><br><span class="line">- 若是[ *c* ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置);</span><br></pre></td></tr></table></figure><p><strong>drwxrwxr-x</strong> <strong>：该文件的类型和权限信息</strong></p><p><strong><code>2</code></strong> <strong>：链接数，如果是文件则是1</strong> <strong>，</strong> <strong>如果是文件夹则表示该文件夹下的子文件夹个数</strong> </p><p><strong>第一个root </strong>：文件或者目录的所属者**</p><p><strong>第二个root </strong>：所属用户组**</p><p><strong>4096</strong> <strong>：文件或者目录的大小，是目录的话一般都是4096</strong></p><p>5月  24 00:15：文件的最后编辑时间</p><blockquote><p> 通过以上信息得知，每个文件都设计到用户和组的权限问题</p><p>在Linux中，用户是能够获取系统资源的权限的集合，组是权限的容器</p></blockquote><p><strong>Linux</strong> <strong>用户类型</strong> </p><table><thead><tr><th><strong>用户类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>管理员root</td><td>具有使用系统所有权限的用户,其UID 为0</td></tr><tr><td>系统用户</td><td>保障系统运行的用户,一般不提供密码登录系统,其UID为1-499之间</td></tr><tr><td>普通用户</td><td>即一般用户,其使用系统的权限受限,其UID为500-60000之间.</td></tr></tbody></table><p>与Linux用户信息相关的文件有两个：分别是<strong>/etc/passwd</strong>和 <strong>/etc/shadow</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件/etc/passwd文件的内容，选取第一行：</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line">root:用户名</span><br><span class="line">x:密码占位符，密码保存在shadow文件内</span><br><span class="line">0:用户id，UID</span><br><span class="line">0:组id，GID</span><br><span class="line">root:注释信息</span><br><span class="line">/root:用户家目录</span><br><span class="line">/bin/bash:用户默认使用shell</span><br><span class="line"></span><br><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><p><strong>Linux用户组类型</strong></p><table><thead><tr><th><strong>用户组类型</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td>系统组</td><td style="text-align:left">一般加入一些系统用户</td></tr><tr><td>普通用户组</td><td style="text-align:left">可以加入多个用户</td></tr><tr><td>私有组/基本组</td><td style="text-align:left">当创建用户时,如果没有为其指明所属组，则就为其定义一个私有的用户组，起名称与用户名同名，当把其他用户加入到该组中，则其就变成了普通组</td></tr></tbody></table><p>与Linux用户组信息相关的文件有两个：分别是/etc/group和 /etc/gshadow </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件/etc/group文件内容，选取一个普通组行：</span></span><br><span class="line">hadoop:x:500:</span><br><span class="line">hadoop:组名</span><br><span class="line">x:组密码占位符</span><br><span class="line">500:组id</span><br></pre></td></tr></table></figure><h3 id="2-用户操作"><a href="#2-用户操作" class="headerlink" title="2. 用户操作"></a>2. 用户操作</h3><p>Linux中的用户管理主要涉及到用户账号的添加、删除和修改。所有操作都影响/etc/passwd中的文件内容</p><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-c&lt;备注&gt;：修改用户帐号的备注文字；</span><br><span class="line">-d&lt;登入目录&gt;：修改用户登入时的目录；</span><br><span class="line">-e&lt;有效期限&gt;：修改帐号的有效期限；</span><br><span class="line">-f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号；</span><br><span class="line">-g&lt;群组&gt;：修改用户所属的群组；</span><br><span class="line">-G&lt;群组&gt;；修改用户所属的附加群组；</span><br><span class="line">-l&lt;帐号名称&gt;：修改用户帐号名称；</span><br><span class="line"></span><br><span class="line">-L：锁定用户密码，使密码无效；</span><br><span class="line">-U:解除密码锁定。</span><br><span class="line"></span><br><span class="line">-s&lt;shell&gt;：修改用户登入后所使用的shell；</span><br><span class="line">-u&lt;uid&gt;：修改用户ID；</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><blockquote><p> 登录名：指定要修改信息的用户登录名。</p></blockquote><ol><li><p><strong>添加用户</strong></p><blockquote><p><strong>useradd spark</strong></p><p>usermod -G bigdata spark                           ## 设置组, spark用户添加到bigdata组中</p><p>usermod -c “mylove spark” spark              ## -c:  添加备注信息</p><p><strong>一步完成</strong>：<strong>useradd -G bigdata -c “mylove” spark</strong>  # spark用户添加到bigdata组中, 并设置备注为 mylover</p><p><code>useradd -u 508 -g 514 -G 1001 user3</code> 添加用户user3时, 指定用户uid 和 主组-g, 附属组-G, 组必须要先存在</p><p>useradd -u(添加的时候修改用户id) 508 -g 514(<code>-g是添加组</code>, 此组号码必须存在)</p><blockquote><p> <em>指定user4 的家目录</em></p><p><code>useradd -u 520 -g 1000 -d /home/user44 user4</code></p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; 不创建user4的家目录, user5刚创建的时候, 家就被毁了</span><br><span class="line">&gt; &gt; `useradd -u 508 -g 1000 -M user6</span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; 当user6没有家的时候, 这样显示</span><br><span class="line">&gt; &gt; `bash-4.1$ ....</span><br><span class="line">&gt; &gt; 此时应该这样操作</span><br><span class="line">&gt; &gt; cp -v /etc/skel/.b* /home/user6</span><br><span class="line">&gt; &gt; <span class="string">"/etc/skel/.bash_logout"</span> -&gt; <span class="string">"/home/user6/.bash_logout"</span></span><br><span class="line">&gt; &gt; <span class="string">"/etc/skel/.bash_profile"</span> -&gt; <span class="string">"/home/user6/.bash_profile"</span></span><br><span class="line">&gt; &gt; <span class="string">"/etc/skel/.bashrc"</span> -&gt; <span class="string">"/home/user6/.bashrc"</span></span><br><span class="line">&gt; &gt; su user6</span><br><span class="line">&gt; &gt; [user6@cts1 shixuanji]$ </span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; --------</span><br><span class="line">&gt; &gt; 查看进程  ps -au | grep xxx</span><br><span class="line">&gt; &gt; 杀死进程  <span class="built_in">kill</span> -9 xxx</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; <span class="comment"># 不允许用户登录</span></span><br><span class="line">&gt; &gt; useradd -u 523 -g 1000 -s /sbin/nologin user7</span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; <span class="comment"># 修改此用户登录权限为 /bin/bash</span></span><br><span class="line">&gt; &gt; usermod -s /bin/bash user7</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote></blockquote></blockquote></li><li><p><strong>设置密码</strong> </p><blockquote><p><strong>passwd spark</strong></p><p>根据提示设置密码即可</p><p>创建密码工具 mkpasswd</p><blockquote><p>下载： <code>yum -y install expect</code></p></blockquote><p><code>mkpasswd -l 14</code> 创建一个14位数的密码</p><p><code>mkpasswd -l 15 -s 0</code>:  -s是设置特殊符号的长度, 这里是不要特殊符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">### 修改密码</span></span><br><span class="line">&gt; <span class="comment"># 此时只需要输入一遍密码</span></span><br><span class="line">&gt; passwd --stdin user4 </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># 通过管道可以直接更改</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"123"</span> | passwd --stdin user4</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># 通过手动输入回车符 `\n` 来实现2遍确认  -e：激活转义字符。</span></span><br><span class="line">&gt; <span class="built_in">echo</span> -e <span class="string">"123\n123\n"</span> | passwd user4</span><br><span class="line">&gt; </span><br><span class="line">&gt; =======<span class="comment">#额外知识点</span></span><br><span class="line">&gt; <span class="comment"># 使用echo -e选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：</span></span><br><span class="line">&gt;     \a 发出警告声；</span><br><span class="line">&gt;     \b 删除前一个字符；</span><br><span class="line">&gt;     \c 最后不加上换行符号；</span><br><span class="line">&gt;     \f 换行但光标仍旧停留在原来的位置；</span><br><span class="line">&gt;     \n 换行且光标移至行首；</span><br><span class="line">&gt;     \r 光标移至行首，但不换行；</span><br><span class="line">&gt;     \t 插入tab；</span><br><span class="line">&gt;     \v 与\f相同；</span><br><span class="line">&gt;     \ 插入\字符；</span><br><span class="line">&gt;     \nnn 插入nnn（八进制）所代表的ASCII字符；</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p><strong>修改用户</strong> </p><blockquote><p>修改spark登录名为storm：<strong>usermod -l spark storm</strong></p><p>将spark添加到bigdata和root组：<strong>usermod -G root,bigdata spark</strong></p><p>查看spark的组信息：<strong>groups spark</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># usermod : usermodify</span></span><br><span class="line">&gt; <span class="comment"># 使用的参数跟useradd 几乎一样</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; chfn user4 : 修改用户的finger, 电话, 办公室等...</span><br><span class="line">&gt; <span class="comment"># 修改后, 其实这里就是修改的备注选项</span></span><br><span class="line">&gt; $ ☞ grep shixuanji /etc/passwd</span><br><span class="line">&gt; shixuanji:x:500:500:airpoet,sh,110,110:/home/shixuanji:/bin/bash</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment"># 修改备注, 这里又把之前改chfn又改了</span></span><br><span class="line">&gt; $ ☞ usermod -c <span class="string">"哎呀我去"</span> shixuanji</span><br><span class="line">&gt; $ ☞ grep shixuanji /etc/passwd  </span><br><span class="line">&gt; shixuanji:x:500:500:哎呀我去:/home/shixuanji:/bin/bash</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>删除用户</strong></p><blockquote><p><strong>userdel -r spark</strong></p><p>加一个-r就表示把用户及用户的家目录, 信箱地址等都删除</p></blockquote></li><li><p>查看用户的信息</p><blockquote><p><strong>id</strong> 用户名</p></blockquote></li><li><p><strong>root用户以其他用户的权限执行某条命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[~] su -c <span class="string">"touch /tmp/shixuanji.txt"</span> - shixuanji                                                                                   22:32:02</span><br><span class="line">[~] ls -l /tmp/shixuanji.txt                                                                                                         22:32:25</span><br><span class="line">-rw-rw-r--. 1 shixuanji shixuanji 0 5月  29 22:32 /tmp/shixuanji.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-组操作"><a href="#3-组操作" class="headerlink" title="3. 组操作"></a>3. 组操作</h3><p>前面我们知道，组是权限的集合。在linux系统中，每个用户都有一个用户组，没有指定时都默认为私有组，私有组名同用户名一致，建立用户组的好处是系统能对一个用户组中的所有用户的操作权限进行集中管理。组管理涉及组的添加、删除和修改。组的增加、删除和修改实际上就对/etc/group文件的更新 </p><ol><li><p>添加一个叫bigdata的组</p><blockquote><p><strong>groupadd bigdata</strong></p></blockquote></li><li><p>查看系统当前有那些组</p><blockquote><p><strong>cat /etc/group</strong></p></blockquote></li><li><p>将spark用户添加到bigdata组中 </p><blockquote><p><strong>usermod -G bigdata spark</strong></p><p>或者</p><p><strong>gpasswd -a spark bigdata</strong></p></blockquote><p><strong>这两个命令的区分记忆技巧：</strong></p><p><strong>命令是什么，就证明对什么做操作，所以最后的参数就是命令的操作对象，中间的可选项表示要干嘛</strong></p></li><li><p>将spark用户从bigdata组删除 </p><blockquote><p><strong>gpasswd -d spark bigdata</strong> </p></blockquote></li><li><p>将bigdata组名修改为bigspark </p><blockquote><p><strong>groupmod -n bigspark bigdata</strong> </p></blockquote></li><li><p>删除组 </p><blockquote><p><strong>groupdel bigdata</strong> </p></blockquote></li></ol><h3 id="4-为用户配置sudoer权限"><a href="#4-为用户配置sudoer权限" class="headerlink" title="4. 为用户配置sudoer权限"></a>4. 为用户配置sudoer权限</h3><p>普通情况下，使用普通用户进行一些简单的操作就OK，但是普通用户和root用户的区别就在于root用户能对系统做任何事，但是普通用户就不行。处处受限。那么假如在某些情况下，普通用户想拥有更大的权限做更多的事情，虽然有权限限制，但也不是不可以。部分操作还是可以赋予更高的权限让普通用户做一次。这就需要给普通用户配置root权限了。意思就是让普通用户使用root权限去做一些操作，这当然是需要配置的。 </p><blockquote><p>用root编辑 <strong>vi /etc/sudoers</strong></p><p>直接用命令 <code>visudo</code>也可以直接编辑此文件</p><p>在文件的如下位置，为hadoop添加一行即可</p><p>root ALL=(ALL) ALL</p><p>hadoop ALL=(ALL) ALL</p><p>spark ALL=(ALL) ALL</p><p>然后，hadoop用户和spark用户就可以用sudo来执行系统级别的指令</p><p>[hadoop\@hadoop01 ~]\$ <strong>sudo useradd huangxiaoming</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; ~ ➤ su shixuanji   <span class="comment"># 修改了配置文件之后, 用sudo可以访问root</span></span><br><span class="line">&gt; [shixuanji@cts1 root]$ sudo /bin/ls /root</span><br><span class="line">&gt; [sudo] password <span class="keyword">for</span> shixuanji:</span><br><span class="line">&gt; anaconda-ks.cfg  date.txt  Documents  git-2018-05-22  install.log.syslog  Music     Public     Videos</span><br><span class="line">&gt; autojump Desktop   Downloads  install.log     k-vim  Pictures  Templates  wget-log</span><br><span class="line">&gt; [shixuanji@cts1 root]$ ls /root</span><br><span class="line">&gt; ls: 无法打开目录/root: 权限不够</span><br><span class="line">&gt; [shixuanji@cts1 root]$</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>让一个普通用户可以无密码登录到root用户</strong>, 还是修改配置文件 <code></code>/etc/sudoers`</p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-144555.jpg" alt=""></p><p><strong>禁止远程登录</strong></p><p>修改 <code>vi /etc/ssh/sshd_config</code> 此文件中的 <code>#PermitRootLogin yes</code> 为 no</p><p>这样就不能远程 ssh 登录了</p><p><strong>查看系统日志</strong></p><ul><li>查看登录错误之类的日志  <code>tail /var log/secure</code></li></ul><p><strong>有时候, 登录时, 要过几秒才让输入登录密码</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-145439.jpg" alt=""></p><p>修改 <code>/etc/ssh/sshd_config</code>中的<code>UseDNS=no</code>, 就不会去找DNS了</p></blockquote><h4 id="普通用户免密使用sudo-amp-免密登录为root"><a href="#普通用户免密使用sudo-amp-免密登录为root" class="headerlink" title="普通用户免密使用sudo &amp; 免密登录为root"></a>普通用户免密使用sudo &amp; 免密登录为root</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /ect/sudoers</span><br><span class="line"><span class="comment"># 设置不需要使用密码使用sudo</span></span><br><span class="line">apALL=(ALL) NOPASSWD: ALL   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 sudo su - 免密登录到root账户</span></span><br><span class="line">User_Alias USER_SU=ap</span><br><span class="line">Cmnd_Alias SU=/bin/su</span><br><span class="line">USER_SU ALL=(ALL) NOPASSWD: SU</span><br></pre></td></tr></table></figure><h3 id="5-切换用户"><a href="#5-切换用户" class="headerlink" title="5. 切换用户"></a>5. 切换用户</h3><p>在linux的系统使用过程当中，免不了会有多个用户来回切换使用。</p><p>所以在此提供切换用户的使用操作：切换用户使用的命令是 </p><blockquote><p><strong>su（switch user）</strong></p><p>从普通用户切换到root用户 , 需要输密码</p><blockquote><p><strong>su root</strong>   或  </p><p><strong>su</strong> </p></blockquote><p>从root用户切换到普通用户, 不需要输密码</p><blockquote><p><strong>su</strong> xxx </p></blockquote></blockquote><h1 id="5-文件权限"><a href="#5-文件权限" class="headerlink" title="5. 文件权限"></a>5. 文件权限</h1><h3 id="1、linux文件权限的描述格式解读"><a href="#1、linux文件权限的描述格式解读" class="headerlink" title="1、linux文件权限的描述格式解读"></a>1、linux文件权限的描述格式解读</h3><p>Linux用 户分为：拥有者、组群(Group)、其他（other），Linux系统中，预设的情況下，系统中所有的帐号与一般身份使用者，以及root的相关信 息， 都是记录在<code>/etc/passwd</code>文件中。每个人的密码则是记录在<code>/etc/shadow</code>文件下。 此外，所有的组群名称记录在<code>/etc/group</code>內</p><p>linux文件的用户权限的分析图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  -rw-r--r--   1 user  staff   651 Oct 12 12:53 .gitmodules</span><br><span class="line"><span class="comment"># ↑╰┬╯╰┬╯╰┬╯</span></span><br><span class="line"><span class="comment"># ┆ ┆  ┆  ╰┈ 0 其他人</span></span><br><span class="line"><span class="comment"># ┆ ┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ g 属组</span></span><br><span class="line"><span class="comment"># ┆ ╰┈┈┈┈ u 属主</span></span><br><span class="line"><span class="comment"># ╰┈┈ 第一个字母 `d` 代表目录，`-` 代表普通文件</span></span><br></pre></td></tr></table></figure><p>d：标识节点类型（d：文件夹   -：文件  l：链接）</p><p>r：可读   w：可写    x：可执行 </p><table><thead><tr><th></th><th><strong>文件</strong></th><th><strong>文件夹</strong></th></tr></thead><tbody><tr><td><strong>r</strong></td><td><strong>可读取内容</strong></td><td><strong>可以ls</strong></td></tr><tr><td><strong>w</strong></td><td><strong>可修改文件的内容</strong></td><td><strong>可以在其中创建或者删除子节点</strong></td></tr><tr><td><strong>x</strong></td><td><strong>能否运行这个文件</strong></td><td><strong>能否cd**</strong>进入这个目录**</td></tr></tbody></table><h3 id="2、-修改文件权限"><a href="#2、-修改文件权限" class="headerlink" title="2、 修改文件权限"></a>2、 修改文件权限</h3><p><strong>chmod命令</strong>  用来变更文件或目录的权限。在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod(选项)(参数)</span><br><span class="line"></span><br><span class="line">r=读取属性　　//值＝4 </span><br><span class="line">w=写入属性　　//值＝2 </span><br><span class="line">x=执行属性　　//值＝1</span><br></pre></td></tr></table></figure><ol><li><p><strong>选项</strong>：</p><p><code>u</code> User，即文件或目录的拥有者；<br><code>g</code> Group，即文件或目录的所属群组；<br><code>o</code> Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；<br><code>a</code> All，即全部的用户，包含拥有者，所属群组以及其他用户；<br><code>r</code> 读取权限，数字代号为“4”;<br><code>w</code> 写入权限，数字代号为“2”；<br><code>x</code> 执行或切换权限，数字代号为“1”；<br><code>-</code> 不具任何权限，数字代号为“0”；<br><code>s</code> 特殊功能说明：变更文件或目录的权限。</p></li><li><p><strong>参数</strong>:</p><p>权限模式：指定文件的权限模式；<br>文件：要改变权限的文件。</p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>变更 文件/目录 的权限</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改</span></span><br><span class="line">chmod g-rw haha.dat<span class="comment">## 表示将haha.dat对所属组的rw权限取消</span></span><br><span class="line">chmod o-rw haha.dat<span class="comment">## 表示将haha.dat对其他人的rw权限取消</span></span><br><span class="line">chmod u+x haha.dat<span class="comment">## 表示将haha.dat对所属用户的权限增加x</span></span><br><span class="line">chmod a-x haha.dat        <span class="comment">## 表示将haha.dat对所用户取消x权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用数字的方式来修改权限(常用)</span></span><br><span class="line">chmod  664  haha.dat</span><br><span class="line">就会修改成   rw-rw-r--</span><br><span class="line">如果要将一个文件夹的所有内容权限统一修改，则可以-R参数</span><br><span class="line">chmod  -R  770  aaa/</span><br></pre></td></tr></table></figure><p><strong>变更 文件/目录 的拥有者 或 所属组</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;只有root权限能执行&gt;</span></span><br><span class="line">chown angela  aaa<span class="comment">## 改变所属用户</span></span><br><span class="line">chown :angela  aaa<span class="comment">## 改变所属组</span></span><br><span class="line">chown angela:angela aaa/<span class="comment">## 同时修改所属用户和所属组</span></span><br></pre></td></tr></table></figure><h1 id="6-压缩打包"><a href="#6-压缩打包" class="headerlink" title="6. 压缩打包"></a>6. 压缩打包</h1><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。</p><p>gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多处“.gz”扩展名。</p><ol><li><p>语法</p><blockquote><p>gzip (选项) (参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-a或——ascii：使用ASCII文字模式；</span><br><span class="line">-d或--decompress或----uncompress：解开压缩文件；</span><br><span class="line">-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</span><br><span class="line">-h或——<span class="built_in">help</span>：在线帮助；</span><br><span class="line">-l或——list：列出压缩文件的相关信息；</span><br><span class="line">-L或——license：显示版本与版权信息；</span><br><span class="line">-n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；</span><br><span class="line">-N或——name：压缩文件时，保存原来的文件名称及时间戳记；</span><br><span class="line">-q或——quiet：不显示警告信息；</span><br><span class="line">-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line">-S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；</span><br><span class="line">-t或——<span class="built_in">test</span>：测试压缩文件是否正确无误；</span><br><span class="line">-v或——verbose：显示指令执行过程；</span><br><span class="line">-V或——version：显示版本信息；</span><br><span class="line">-&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；</span><br><span class="line">--best：此参数的效果和指定“-9”参数相同；</span><br><span class="line">--fast：此参数的效果和指定“-1”参数相同。</span><br><span class="line">-num 用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件列表：指定要压缩的文件列表。</p></blockquote></li><li><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把test6目录下的每个文件压缩成.gz文件</span></span><br><span class="line">gzip *</span><br><span class="line"><span class="comment"># 把上例中每个压缩的文件解压，并列出详细的信息</span></span><br><span class="line">gzip -dv *</span><br><span class="line"><span class="comment"># 详细显示例1中每个压缩的文件的信息，并不解压</span></span><br><span class="line">gzip -l *</span><br><span class="line"><span class="comment"># 压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</span></span><br><span class="line">gzip -r log.tar</span><br><span class="line"><span class="comment"># 递归的压缩目录</span></span><br><span class="line">gzip -rv test6</span><br><span class="line"><span class="comment"># 这样，所有test下面的文件都变成了.gz，目录依然存在只是目录里面的文件相应变成了.gz.这就是压缩，和打包不同。因为是对目录操作，所以需要加上-r选项，这样也可以对子目录进行递归了。</span></span><br><span class="line"><span class="comment"># 递归地解压目录</span></span><br><span class="line">gzip -dr test6</span><br></pre></td></tr></table></figure></li></ol><h3 id="bzip"><a href="#bzip" class="headerlink" title="bzip"></a>bzip</h3><p><strong>bzip2命令</strong> 用于创建和管理（包括解压缩）“.bz2”格式的压缩包。</p><ol><li><p>语法</p><blockquote><p>bzip2 (选项) (参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-c或——stdout：将压缩与解压缩的结果送到标准输出；</span><br><span class="line">-d或——decompress：执行解压缩；</span><br><span class="line">-f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；</span><br><span class="line">-h或——<span class="built_in">help</span>：在线帮助；</span><br><span class="line">-k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；</span><br><span class="line">-s或——small：降低程序执行时内存的使用量；</span><br><span class="line">-t或——<span class="built_in">test</span>：测试.bz2压缩文件的完整性；</span><br><span class="line">-v或——verbose：压缩或解压缩文件时，显示详细的信息；</span><br><span class="line">-z或——compress：强制执行压缩；</span><br><span class="line">-V或——version：显示版本信息；</span><br><span class="line">--repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；</span><br><span class="line">--repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件：指定要压缩的文件。</p></blockquote></li><li><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 压缩指定文件filename:</span></span><br><span class="line">bzip2 filename  或   bzip2 -z filename</span><br><span class="line"><span class="comment">## 解压指定的文件filename.bz2:</span></span><br><span class="line">bzip2 -d filename.bz2 或  bunzip2 filename.bz2</span><br><span class="line"><span class="comment"># 压缩解压的时候将结果也输出：</span></span><br><span class="line">bzip2 -v filename  </span><br><span class="line">filename:  0.119:1, 67.200 bits/byte, -740.00% saved, 5 <span class="keyword">in</span>, 42 out.</span><br><span class="line"><span class="comment">#  压缩解压的时候，除了生成结果文件，将原来的文件也保存: </span></span><br><span class="line">bzip2 -k filename</span><br><span class="line"><span class="comment">#  解压到标准输出, 输出文件的内容</span></span><br><span class="line">bzip2 -dc filename.bz2</span><br></pre></td></tr></table></figure></li></ol><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>Linux下的归档使用工具，用来打包和备份。</p><p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p><p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><p> <strong>其实最简单的使用 tar 就只要记忆底下的方式即可：</strong> </p><p><strong>tar.gz 格式:</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]</span><br><span class="line">解压并解包： tar -zxvf [原文件名].tar.gz -C [目标目录]</span><br><span class="line">注：z代表用gzip算法来压缩/解压。</span><br></pre></td></tr></table></figure><p><strong>tar.bz2格式</strong>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]</span><br><span class="line">解压并解包： tar -jxvf [原文件名].tar.bz2</span><br><span class="line">注：小写j代表用bzip2算法来压缩/解压。</span><br></pre></td></tr></table></figure><hr><p><strong>其实用不到的话就不用看了, 下面的.</strong></p><ol><li><p>语法</p><blockquote><p>tar(选项)(参数)</p></blockquote></li><li><p>选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-A或--catenate：新增文件到以存在的备份文件；</span><br><span class="line">-B：设置区块大小；</span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line">-d：记录文件的差别；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-t或--list：列出备份文件的内容；</span><br><span class="line">-z或--gzip或--ungzip：通过gzip指令处理备份文件；</span><br><span class="line">-Z或--compress或--uncompress：通过compress指令处理备份文件；</span><br><span class="line">-f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；</span><br><span class="line">-v或--verbose：显示指令执行过程；</span><br><span class="line">-r：添加文件到已经压缩的文件；</span><br><span class="line">-u：添加改变了和现有的文件到已经存在的压缩文件；</span><br><span class="line">-j：支持bzip2解压文件；</span><br><span class="line">-v：显示操作过程；</span><br><span class="line">-l：文件系统边界设置；</span><br><span class="line">-k：保留原有文件不覆盖；</span><br><span class="line">-m：保留文件不被覆盖；</span><br><span class="line">-w：确认压缩文件的正确性；</span><br><span class="line">-p或--same-permissions：用原来的文件权限还原文件；</span><br><span class="line">-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；</span><br><span class="line">-N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；</span><br><span class="line">--exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</span><br></pre></td></tr></table></figure></li><li><p>参数</p><blockquote><p>文件或目录：指定要打包的文件或目录列表。</p><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- z：有gzip属性的</span><br><span class="line">- j：有bz2属性的</span><br><span class="line">- Z：有compress属性的</span><br><span class="line">- v：显示所有过程</span><br><span class="line">- O：将文件解开到标准输出</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><ol><li>zip格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩： zip -r [目标文件名].zip [原文件/目录名]</span><br><span class="line">解压： unzip [原文件名].zip</span><br><span class="line">注：-r参数代表递归</span><br></pre></td></tr></table></figure><ol start="2"><li>tar格式（该格式仅仅打包，不压缩）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打包：tar -cvf [目标文件名].tar [原文件名/目录名]</span><br><span class="line">解包：tar -xvf [原文件名].tar</span><br><span class="line">注：c参数代表create（创建），x参数代表extract（解包），v参数代表verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>tar.gz格式</strong>(方式二常用)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：利用前面已经打包好的tar文件，直接用压缩命令。</span></span><br><span class="line">压缩：gzip [原文件名].tar</span><br><span class="line">解压：gunzip [原文件名].tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：一次性打包并压缩、解压并解包</span></span><br><span class="line">打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]</span><br><span class="line">解压并解包： tar -zxvf [原文件名].tar.gz</span><br><span class="line">注：z代表用gzip算法来压缩/解压。</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>tar.bz2格式</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式一：利用已经打包好的tar文件，直接执行压缩命令：</span><br><span class="line">压缩：bzip2 [原文件名].tar</span><br><span class="line">解压：bunzip2 [原文件名].tar.bz2</span><br><span class="line"></span><br><span class="line">方式二：一次性打包并压缩、解压并解包</span><br><span class="line">打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]</span><br><span class="line">解压并解包： tar -jxvf [原文件名].tar.bz2</span><br><span class="line">注：小写j代表用bzip2算法来压缩/解压。</span><br></pre></td></tr></table></figure><ol start="5"><li>jar格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">压缩：jar -cvf [目标文件名].jar [原文件名/目录名]</span><br><span class="line">解压：jar -xvf [原文件名].jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：如果是打包的是Java类库，并且该类库中存在主类，那么需要写一个META-INF/MANIFEST.MF配置文件，内容如下：</span></span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Created-By: 1.6.0_27 (Sun Microsystems Inc.)</span><br><span class="line">Main-class: the_name_of_the_main_class_should_be_put_here</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后用如下命令打包：</span></span><br><span class="line">jar -cvfm [目标文件名].jar META-INF/MANIFEST.MF [原文件名/目录名] 这样以后就能用“java -jar [文件名].jar”命令直接运行主类中的public static void main方法了。</span><br></pre></td></tr></table></figure><ol start="6"><li>7z格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">压缩：7z a [目标文件名].7z [原文件名/目录名]</span><br><span class="line">解压：7z x [原文件名].7z</span><br><span class="line">注：这个7z解压命令支持rar格式，即：</span><br><span class="line"></span><br><span class="line">7z x [原文件名].rar</span><br></pre></td></tr></table></figure><ol start="7"><li><p>其它例子</p><p><a href="http://wangchujiang.com/linux-command/c/tar.html" target="_blank" rel="noopener">参考网址</a></p></li></ol></li></ol><h1 id="7-Linux开关机和重启"><a href="#7-Linux开关机和重启" class="headerlink" title="7. Linux开关机和重启"></a>7. Linux开关机和重启</h1><blockquote><p>开机：开机键</p><p>关机：shutdown，halt，init 0，poweroff</p><p>重启：reboot，init 6</p></blockquote><blockquote><p>Shutdown命令详解：</p><p>shutdown -h now  ## 立刻关机</p><p>shutdown -h +10  ##  10分钟以后关机                     </p><p>shutdown -h 12:00:00  ##12点整的时候关机</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-VI文本编辑器&quot;&gt;&lt;a href=&quot;#1-VI文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;1. VI文本编辑器&quot;&gt;&lt;/a&gt;1. VI文本编辑器&lt;/h1&gt;&lt;p&gt;学会使用vi编辑器是学习Linux系统的必备技术之一，因为一般的Linux服务器
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-1</title>
    <link href="https://airpoet.github.io/2018/05/26/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://airpoet.github.io/2018/05/26/Linux/Linux学习笔记-1/</id>
    <published>2018-05-26T15:37:15.310Z</published>
    <updated>2018-05-29T13:16:16.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-gt-初识Linux"><a href="#1-gt-初识Linux" class="headerlink" title="1&gt;  初识Linux"></a>1&gt;  初识Linux</h2><h3 id="1-Linux介绍"><a href="#1-Linux介绍" class="headerlink" title="1. Linux介绍"></a>1. Linux介绍</h3><p>Linux系统是一套<strong>免费使用</strong>和<strong>自由传播</strong>的<strong>类UNIX操作系统</strong>（主要用在服务器上），是一个基于<strong>POSIX</strong>和<strong>UNIX</strong>的<strong>多用户</strong>、<strong>多任务</strong>、<strong>支持多线程</strong>和<strong>多CPU</strong>的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了UNIX以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p><strong>UNIX：操作系统，是美国AT&amp;T公司贝尔实验室于1969年完成的操作系统，最早由肯·汤普逊（Ken Thompson），丹尼斯·里奇（Dennis Ritchie）开发</strong>。在1971年首次对外发布，刚好在1971，<strong>丹尼斯·里奇（Dennis Ritchie）发明了C语言</strong>，后来在<strong>1973，Unix被他用C语言重新编写</strong>。Unix前身源自于MultiCS，叫UniCS，后来改名叫Unix。</p><p><strong>POSIX</strong>：可移植操作系统接口（英语：Portable Operating System Interface of UNIX，缩写为POSIX），是<strong>IEEE（电气和电子工程师协会）</strong>为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。</p><p><strong>GNU</strong>：1983年，Richard Stallman（理查德·马修·斯托曼）创立GNU计划。<strong>一套完全自由的操作系统</strong>，其内容软件完全以GPL方式发布。这个操作系统是GNU计划的主要目标（发展出一套完整的开放源代码操作系统来取代Unix），名称来自GNU\’s Not Unix!的递归缩写。</p><p><strong>GPL</strong>：一种GNU通用公共许可协议，为保证GNU软件可以自由的使用、复制、修改和发布，所有的GNU软件都有一份在禁止其他人添加任何限制的情况下授权所有权利给任何人的协议条款，是一个被广泛使用的自由软件许可协议条款，保证终端用户运行、学习、分享（复制）及编辑软件之自由，GPL是自由软件和开源软件的最流行许可证，特色表现：</p><p>•取得软件与原始码：您可以根据自己的需求来执行这个自由软件</p><p>•复制：您可以自由的复制该软件</p><p>•修改：您可以将取得的原始码进行程序修改工作，使之适合您的工作</p><p>•再发行：您可以将您修改过的程序，再度的自由发行，而不会与原先的撰写者冲突</p><p>•回馈：您应该将您修改过的程序代码回馈于社群</p><p><strong>==不同许可证的区别==</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-152543.png" alt=""></p><p>1985年，Richard Stallman又创立了自由软件基金会（Free Software Foundation，FSF）来为GNU计划提供技术、法律以及财政支持。</p><p>1990年，GNU计划开发主要项目有Emacs（文本编辑器）、GCC（GUN Compiler Collection，GNU编译器集合）、Bash等，GCC是一套GNU开发的编程语言编译器。还有开发一些UNIX系统的程序库和工具。</p><p><strong>Linux操作系统诞生于1991年10月5日</strong>（这是第一次正式向外公布时间），与UNIX兼容，并在GPL条款下发布。现在，Linux产生了许多不同的Linux发行版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。</p><p>1992年，Linux与其他GUN软件结合，完全自由的GNU/Linux操作系统正式诞生，简称Linux</p><p><strong>==Linux的基本思想有两点==</strong></p><p><strong>第一，一切都是文件</strong></p><p><strong>第二，每个软件都有确定的用途</strong></p><p>与Unix思想十分相近。</p><h3 id="2-Linux特点"><a href="#2-Linux特点" class="headerlink" title="2. Linux特点"></a>2. Linux特点</h3><p>1、分时的多用户、多任务操作系统</p><p>2、多数网络协议支持、方便的远程管理</p><p>3、强大的内存管理和文件系统管理</p><p>4、大量的可用的软件和免费的软件</p><p>5、优良的稳定性和安全性</p><p>6、良好的可移植性和灵活性</p><p>7、可供选择的厂商多</p><h3 id="3-Linux操作系统架构"><a href="#3-Linux操作系统架构" class="headerlink" title="3. Linux操作系统架构"></a>3. Linux操作系统架构</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-152728.png" alt=""></p><p>补充：linux内核必须加上一个”界面”软件，才能让用户去使用，”界面”分两类：</p><p>a、命令行界面CLI SHELL（有很多种，最流行的一种是bash shell）</p><p>b、图形界面GUI SHELL（也有很多种，目前最流行的有两种：gnome和kde）</p><h3 id="4-Linux内核"><a href="#4-Linux内核" class="headerlink" title="4. Linux内核"></a>4. Linux内核</h3><p>严格来讲，Linux不是一个操作系统，Linux只是一个操作系统中的内核。</p><p>内核建立了计算机软件与硬件之间通讯的平台，内核提供系统服务，比如文件管理、虚拟内存、设备I/O、进程管理等。</p><p>内核官网：<a href="http://www.kernel.org/" target="_blank" rel="noopener">[http://www.kernel.org/]{.underline}</a>。目前最新的内核版本：4.13.5</p><p>要注意区分linux发型版本和linux内核版本。两者不是同一个事物</p><p><strong>下面这位是Linux内核的作者：</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-153055.png" alt=""></p><p><strong>这是Linux的logo</strong></p><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-26-153046.png" alt="logo"></p><h3 id="5-常见发行版"><a href="#5-常见发行版" class="headerlink" title="5.  常见发行版"></a>5.  常见发行版</h3><p><strong>红帽企业系统（RedHat Enterprise Linux, RHEL）</strong></p><p>全球最大的开源技术厂商，全世界内使用最广泛的Linux发布套件，</p><p>提供性能与稳定性极强的Linux套件系统并拥有完善的全球技术支持。</p><p>官网：<a href="http://www.redhat.com" target="_blank" rel="noopener">[http://www.redhat.com]{.underline}</a></p><p><strong>社区企业操作系统（CentOS）</strong></p><p>最初是将红帽企业系统”重新编译/发布”给用户免费使用而广泛使用，</p><p>当前已正式加入红帽公司并继续保持免费（随RHEL更新而更新）。</p><p>官网：<a href="http://www.centos.org/" target="_blank" rel="noopener">[http://www.centos.org/]{.underline}</a></p><p><strong>红帽用户桌面版（Fedora [Linux]）</strong></p><p>最初由红帽公司发起的桌面版系统套件（目前已经不限于桌面版），</p><p>用户可免费体验到最新的技术或工具，而功能成熟后加入到RHEL中。</p><p>官网：<a href="http://fedora.redhat.com" target="_blank" rel="noopener">[http://fedora.redhat.com]{.underline}</a></p><p><strong>国际化组织的开源操作系统（Debian）</strong></p><p>提供超过37500种不同的自由软件且拥有很高的认可度，</p><p>对于各类内核架构支持性良好，稳定性、安全性强更有免费的技术支持。</p><p>官网：<a href="http://www.debian.org/" target="_blank" rel="noopener">[http://www.debian.org/]{.underline}</a></p><p><strong>基于Debian的桌面版（Ubuntu）</strong></p><p>Ubuntu是一款基于Debian派生的产品，对新款硬件具有极强的兼容能力。</p><p>普遍认为Ubuntu与Fedora都是极其出色的LINUX桌面系统。</p><p>官网：<a href="http://www.ubuntulinux.org/" target="_blank" rel="noopener">[http://www.ubuntulinux.org/]{.underline}</a></p><p>当然还有国内的<strong>国防科技大学发行麒麟kylin</strong>和<strong>中科院发行红旗RedFlag</strong></p><h2 id="2-gt-Linux文件系统"><a href="#2-gt-Linux文件系统" class="headerlink" title="2&gt; Linux文件系统"></a>2&gt; Linux文件系统</h2><h3 id="1-CentOS的目录结构"><a href="#1-CentOS的目录结构" class="headerlink" title="1. CentOS的目录结构"></a>1. CentOS的目录结构</h3><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-27-113707.png" alt=""></p><h3 id="2-根目录下每个目录的简单解释"><a href="#2-根目录下每个目录的简单解释" class="headerlink" title="2. 根目录下每个目录的简单解释"></a>2. 根目录下每个目录的简单解释</h3><table><thead><tr><th><strong>/**</strong>：**根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中</th></tr></thead><tbody><tr><td><strong>/bin:/usr/bin:</strong> 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等</td></tr><tr><td><strong>/boot**</strong>：**放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可</td></tr><tr><td><strong>/dev**</strong>：**存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt</td></tr><tr><td><strong>/etc**</strong>：**系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/gateways、/etc/resolv.conf、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。注：/etc/X11存放与x windows有关的设置</td></tr><tr><td><strong>/home**</strong>：**系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据</td></tr><tr><td><strong>/lib:/lib64:/usr/lib:/usr/local/lib**</strong>：**系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules</td></tr><tr><td><strong>/lost+fount**</strong>：**系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found</td></tr><tr><td><strong>/mnt:/media**</strong>：**光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载</td></tr><tr><td><strong>/opt**</strong>：**给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE桌面软件，可以将该软件安装在该目录下。以前的Linux系统中，习惯放置在   /usr/local目录下option</td></tr><tr><td><strong>/proc**</strong>：*<em>此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/</em>等process</td></tr><tr><td><strong>/root**</strong>：**系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下</td></tr><tr><td><strong>/sbin:/usr/sbin:/usr/local/sbin**</strong>：**放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。</td></tr><tr><td><strong>/selinux**</strong>：**selinux软件目录，用于保证系统安全</td></tr><tr><td><strong>/srv**</strong>：**服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内service</td></tr><tr><td><strong>/sys**</strong>：**类似于/proc的特殊文件系统，存放内核数据信息</td></tr><tr><td><strong>/tmp**</strong>：**一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</td></tr><tr><td><strong>/usr**</strong>：<strong>应用程序存放目录，   /usr/bin 存放应用程序    /usr/share 存放共享数据   /usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件   /usr/local:存放软件升级包   /usr/share/doc: 系统说明文件存放目录   /usr/share/man: 程序说明文件存放目录，使用man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间   </strong>usr<strong>**：user share resources/unix share resouces</strong></td></tr><tr><td><strong>/var**</strong>：**放置系统执行过程中经常变化的文件，如：   /var/log：随时更改的日志文件   /var/log/message：所有的登录文件存放目录   /var/spool/mail：邮件存放的目录   /var/run：程序或服务启动</td></tr></tbody></table><h4 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h4><ol><li>用户应该将文件存储在自己的主目录及其子目录下</li><li>系统绝大多数设置都在/etc目录下</li><li>不要修改/或者/usr目录下的任何内容，除非你真的清楚你在做什么，也就是说/目录最好和安装好系统之初保持一致</li><li>大多数工具和应用软件程序都安装在/bin，/sbin，/usr/bin，/usr/sbin，/usr/local/bin</li><li>文件或者目录都有唯一的绝对路径，没有盘符的概念</li></ol><h2 id="3-gt-Linux命令终端"><a href="#3-gt-Linux命令终端" class="headerlink" title="3&gt; Linux命令终端"></a>3&gt; Linux命令终端</h2><h3 id="1-Linux-的命令格式：命令选项-命令参数"><a href="#1-Linux-的命令格式：命令选项-命令参数" class="headerlink" title="1. Linux 的命令格式：命令选项  命令参数"></a>1. Linux 的命令格式：命令选项  命令参数</h3><p>注意：三者之间要空格隔开，其中命令选项分为长格式和短格式。</p><p>短格式用’-‘表示，比如：-l，</p><p>长格式用”–”表示，比如：–help，</p><p>也可以使用组合格式，比如：-a -l 等价于-la或者-al </p><h3 id="2-Linux的默认命令提示符："><a href="#2-Linux的默认命令提示符：" class="headerlink" title="2. Linux的默认命令提示符："></a>2. Linux的默认命令提示符：</h3><p>#：管理员用户</p><p>$：普通用户</p><p>PS:  <strong>Linux以回车键表示命令结束，如果 linux命令需要折行输入，那么可以以 <code>\</code>表示每行结束</strong> </p><h2 id="4-gt-常用命令归纳分类"><a href="#4-gt-常用命令归纳分类" class="headerlink" title="4&gt; 常用命令归纳分类"></a>4&gt; 常用命令归纳分类</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th style="text-align:center">文件管理</th><th style="text-align:left">mkdir, rmdir, mv, rm, cp, touch, cat,   tac, echo, more, less, head, tail, file, find, rename, ln, pwd, scp, alias</th></tr></thead><tbody><tr><td style="text-align:center">磁盘管理</td><td style="text-align:left">ls, cd, du, df, mount, unmounts, fdisk</td></tr><tr><td style="text-align:center">文档处理</td><td style="text-align:left">wc, sort, uniq,   cut, sed, awk, grep, vi, diff</td></tr><tr><td style="text-align:center">用户和组</td><td style="text-align:left">useradd,   usermod, passwd, userdel, groupadd, groupdel, chgrp, su</td></tr><tr><td style="text-align:center">文件传输</td><td style="text-align:left">get, put, wget</td></tr><tr><td style="text-align:center">网络通信</td><td style="text-align:left">telnet, nc, ifconfig, ping, netstat, ip,   host</td></tr><tr><td style="text-align:center">备份压缩</td><td style="text-align:left">gzip, bzip2, bunzip2, tar, zip</td></tr><tr><td style="text-align:center">系统管理</td><td style="text-align:left">exit, kill, last, ps, top, free, pstree,   reboot, halt, shutdown, sudo, who, w, whoami, whereis, which, last, whatis</td></tr><tr><td style="text-align:center">系统设置</td><td style="text-align:left">clear, set, unset, hwclock, time, date,</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:left">history, hostname, nohup, service, init, rpm,   ssh, cal, yum</td></tr></tbody></table><h3 id="网站速查"><a href="#网站速查" class="headerlink" title="网站速查"></a>网站速查</h3><p><a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><p><a href="http://www.jb51.net/linux/" target="_blank" rel="noopener">http://www.jb51.net/linux/</a></p><p><a href="https://jaywcjlove.github.io/linux-command" target="_blank" rel="noopener">https://jaywcjlove.github.io/linux-command</a></p><p><strong>ps: 直接在命令行中, 用 man xx, 也可以查看命令信息</strong></p><h2 id="5-gt-常用文件系统命令详解"><a href="#5-gt-常用文件系统命令详解" class="headerlink" title="5&gt; 常用文件系统命令详解"></a>5&gt; 常用文件系统命令详解</h2><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><table><thead><tr><th><strong>cd</strong>   <em>change   directory</em></th><th>常使用方式：   cd   sourcedir   进入用户主目录   cd ~     进入用户主目录   cd -     返回进入此目录之前所在的目录   cd ..     返回上级目录（若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思）   cd ../..    返回上两级目录</th></tr></thead><tbody><tr><td><strong>pwd</strong>   <em>print working directory</em></td><td><code>pwd</code>     显示当前工作目录</td></tr><tr><td><strong>ls</strong>   <em>list：显示目录内容列表</em></td><td>使用格式：<code>ls</code>  选项  目录或文件名       常用选项   <code>-l</code>：详细信息显示   <code>-a</code>：显示所有子目录和文件的信息，包括隐藏文件   <code>-A</code>：类似于“-a”，但不显示“.”和“..”目录的信息   <code>-R</code>：递归显示内容   <code>-h</code>：以友好方式显示文件大小       例子：   ls -l    ## 列出文件详细信息，   也可以写作 ll   ls -lah    ## 以友好方式显示包括隐藏文件的详细信息</td></tr><tr><td><strong>du</strong>   <em>disk usage：显示每个文件和目录的磁盘使用空间</em></td><td>使用格式：<code>du  选项  目录或文件名</code>     常用选项：   -a：统计时包括所有的文件，而不仅仅只统计目录    -h：以更易读的字节单位（K、M等）显示信息   -s：只统计每个参数所占用空间总的大小       例子：   du -ah    ##</td></tr><tr><td><strong>df</strong>   <em>disk free：显示磁盘相关信息</em></td><td>常用选项：   -h：以更易读的字节单位（K、M等）显示信息   -T：显示分区格式       例子：   df -h      ## 显示磁盘信息，以友好方式   df -T -h     ## 以友好格式显示磁盘信息，并且附加磁盘格式</td></tr></tbody></table><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><table><thead><tr><th style="text-align:left"><strong>touch</strong>   创建空文件   或更新文件时间标记</th><th style="text-align:left">使用格式：   <strong>touch</strong>  <strong>文件名</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>file</strong>   查看文件类型</td><td style="text-align:left">使用格式：   <strong>file</strong>  <strong>文件名</strong>       根据文件内容格式判断文件类型。而不是根据后缀名</td></tr><tr><td style="text-align:left"><strong>mkdir</strong>   创建文件夹   make directory</td><td style="text-align:left">使用格式：<strong>mkdir</strong>  选项  参数       常用选项：   <strong>-p</strong>：已级联的方式创建文件夹       例子：   mkdir   -p /root/ma/niu/zhu/dagou ## 上级目录不存在自动创建上一级目录，常用</td></tr><tr><td style="text-align:left"><strong>cp</strong>   复制文件</td><td style="text-align:left">使用格式：   <strong>cp</strong>    <strong>选项</strong>  <strong>源文件或目录…</strong>  <strong>目标文件或目录</strong>       常用选项：   <strong>-r</strong>：<em>递归</em>复制整个目录树   <strong>-p</strong>：保持源文件的属性不变   <strong>-i</strong>：需要覆盖文件或目录时进行提醒</td></tr><tr><td style="text-align:left"><strong>rm</strong>   删除文件或目录</td><td style="text-align:left">使用格式：<strong>rm</strong>  [选项]  文件或目录       常用选项：   <strong>-f</strong>：强行删除文件或目录，不进行提醒   <strong>-i</strong>：删除文件或目录时提醒用户确认   <strong>-r</strong>：递归删除整个目录树       例子：   rm -rf /root/ma/ ## 不提醒递归删除整个目录，<strong>慎用慎用慎用</strong></td></tr><tr><td style="text-align:left"><strong>mv</strong>   <strong>移动文件</strong>   如果与源文件位置一样，则相当于<strong>重命名</strong></td><td style="text-align:left">使用格式：   <strong>mv</strong>  [选项]…  源文件或目录…  目标文件或目录                                       常用选项：   <strong>-f</strong>：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录   <strong>-u</strong>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作</td></tr><tr><td style="text-align:left"><strong>rmdir</strong>   删除空文件夹</td><td style="text-align:left">常用选项：   <strong>-p</strong>或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；   rmdir  -p  /root/aa/bb/cc/dd/ee   删除文件夹ee，如果删除ee后，dd变为空，则删除dd，依次类推</td></tr><tr><td style="text-align:left"><strong>cat</strong>   连接文件并打印到标准输出设备上</td><td style="text-align:left">常用选项：   <strong>-n</strong>或–number：由1开始对所有输出的行数编号       cat /home/hadoop/data.txt  ## 查看文件内容</td></tr><tr><td style="text-align:left"><strong>tac</strong>   <u>倒序</u>输出文件内容</td><td style="text-align:left">tac /home/hadoop/data.txt</td></tr><tr><td style="text-align:left"><strong>echo</strong>   输出指定的字符串或者变量</td><td style="text-align:left">常用选项：   -e：若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：   \a 发出警告声；   \b 删除前一个字符；   \c 最后不加上换行符号；   \f 换行但光标仍旧停留在原来的位置；   \n 换行且光标移至行首；   \r 光标移至行首，但不换行；   \t 插入tab；   \v 与\f相同；   \ 插入\字符；   \nnn 插入nnn（八进制）所代表的ASCII字符；       例子：   echo ‘ma’        ## 输出ma   echo -e ‘ma\n’    ## 打印ma之后换行   echo -ne ‘ma’ ‘zhonghua’  ## 打印完不换行       echo ‘ma’ &gt; ma.dat  ## 覆盖   echo ‘ma’ &gt;&gt; ma.dat  ## 追加   echo $PWD    ## 输出变量内容</td></tr><tr><td style="text-align:left"><strong>head</strong>   在屏幕上显示指定文件的开头若干行   默认显示10行</td><td style="text-align:left">常用选项：   -n&lt;数字&gt;：指定显示头部内容的行数；                           例子：   head -n 5 install.log  ## 显示该文件前五行内容</td></tr><tr><td style="text-align:left"><strong>tail</strong>   在屏幕上显示指定文件的末尾若干行</td><td style="text-align:left">常用选项：   <strong>-f：显示文件最新追加的内容</strong>   tail -f install.log  ## 显示最新追加的内容        ## 显示文件file的最后10行   <strong>tail -1 file</strong>    ## 显示文件file最后一行的内容   <strong>tail -c 10</strong> file    ## 显示文件file的最后10个字符</td></tr><tr><td style="text-align:left"><strong>more</strong>   显示文件内容，每次显示一屏</td><td style="text-align:left">使用方式：   按Space键：显示文本的下一屏内容。   按Enter键：只显示文本的下一行内容。   按h键：显示帮助屏，该屏上有相关的帮助信息。   按b键：显示上一屏内容。   按q键：退出more命令。</td></tr><tr><td style="text-align:left"><strong>less</strong>   分屏上下翻页浏览文件内容</td><td style="text-align:left">和more使用方式基本类似   按<strong>e</strong>键：向上滚动一行   按<strong>y</strong>键：向下滚动一行   <strong>G</strong>：跳到文件末尾   <strong>gg</strong>：跳到文件首行</td></tr><tr><td style="text-align:left"><strong>ln</strong>   用来为文件创件连接   软链接 -s 和 硬链接</td><td style="text-align:left"><strong>ln</strong> /mnt/cdrom1 /var/www/html/centos/   —&gt;硬链接   <strong>ln -s</strong> /mnt/cdrom2 /var/www/html/centos/  –&gt;软链接-符号链接</td></tr><tr><td style="text-align:left"><strong>alias</strong>   别名</td><td style="text-align:left">查看别名：alias   <strong>定义别名</strong>：<code>alias la=&#39;ll -a</code>   <strong>取消别名</strong>：unalias la</td></tr></tbody></table><h4 id="软-硬-链接相关"><a href="#软-硬-链接相关" class="headerlink" title="软/硬 链接相关"></a>软/硬 链接相关</h4><p><strong>软链接,  ln -s  文件/文件夹  产生的链接</strong></p><ol><li><p>创建文件的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /tmp/yum.log /root/yuntest</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面的链接不指定名字, 就默认用前面的源文件/文件夹名字</span></span><br><span class="line">ln -s /tmp /root </span><br><span class="line">---</span><br><span class="line">lrwxrwxrwx.  1 root root    4 5月  29 20:53 tmp -&gt; /tmp</span><br></pre></td></tr></table></figure></li><li><p>如果软链接是指向目录的话,  是可以直接cd进去的, cd进去的是真实的目录! </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> -P:  查看软链接的真实指向某目录(物理目录)</span><br><span class="line"><span class="built_in">pwd</span> -L:  逻辑目录</span><br></pre></td></tr></table></figure></li></ol><p><strong>硬链接, ln 不加s, 一般不会用</strong></p><ul><li>不能链接目录</li><li>不能跨分区做硬链接</li></ul><h3 id="其它有用的命令"><a href="#其它有用的命令" class="headerlink" title="其它有用的命令"></a>其它有用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">man：显示命令帮助信息</span><br><span class="line">clear：清屏，或者按ctrl + l也行</span><br><span class="line">ctrl + c：退出当前进程</span><br><span class="line">ctrl + z：挂起当前前台进程</span><br><span class="line">whatis：命令是什么</span><br><span class="line">whereis：在标准路径下搜索与名称相关的文件，whereis将所有搜索到的文件都显示</span><br><span class="line"><span class="built_in">which</span>：<span class="built_in">which</span>在设定的搜索路径下进行目录搜索，只显示搜索到的第一个文件</span><br><span class="line">su：切换用户</span><br><span class="line"><span class="built_in">history</span>：显示历史命令</span><br><span class="line">hostname：显示主机名</span><br><span class="line"><span class="built_in">set</span>：查看系统变量</span><br><span class="line">get：下载文件</span><br><span class="line">put：上传文件</span><br><span class="line">sudo：以root用户权限执行一次命令</span><br><span class="line"><span class="built_in">exit</span>：退出登录状态</span><br><span class="line">w：显示当前连接的用户</span><br><span class="line">who：显示当前会话信息</span><br><span class="line">uptime：查看系统运行时间</span><br></pre></td></tr></table></figure><h3 id="使用小技巧-重点"><a href="#使用小技巧-重点" class="headerlink" title="使用小技巧(重点)"></a>使用小技巧(重点)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ctrl + u：清除光标前的命令，相当于剪切   <span class="comment"># !</span></span><br><span class="line">ctrl + k：清除光标后的命令，相当于剪切<span class="comment"># !</span></span><br><span class="line">ctrl + y：粘贴<span class="comment"># !</span></span><br><span class="line">ctrl + t：把光标前面的那个字符往后挪动一位</span><br><span class="line">ctrl + l：清屏</span><br><span class="line">ctrl + a: 移到命令行首<span class="comment"># !</span></span><br><span class="line">ctrl + e: 移到命令行尾<span class="comment"># !</span></span><br><span class="line">ctrl + ← →: 光标移动一个单词   <span class="comment"># !</span></span><br><span class="line">!!：执行上一次命令  <span class="comment"># !</span></span><br><span class="line">!$：上个命令的最后一个单词</span><br><span class="line">ctrl + w：删除光标前一个单词</span><br><span class="line"><span class="built_in">cd</span> data; cat sed.txt：表示先执行<span class="built_in">cd</span>，然后执行cat，工作目录会切换</span><br><span class="line">(<span class="built_in">cd</span> data; cat sed.txt)：跟上个命令相比，不切换工作目录</span><br><span class="line">|：管道符，表示把前面命令内容的输出当做后面命令的输入</span><br><span class="line">&gt;：表示内容覆盖</span><br><span class="line">&gt;&gt;：表示内容追加</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-gt-初识Linux&quot;&gt;&lt;a href=&quot;#1-gt-初识Linux&quot; class=&quot;headerlink&quot; title=&quot;1&amp;gt;  初识Linux&quot;&gt;&lt;/a&gt;1&amp;gt;  初识Linux&lt;/h2&gt;&lt;h3 id=&quot;1-Linux介绍&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记-3</title>
    <link href="https://airpoet.github.io/2018/05/25/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://airpoet.github.io/2018/05/25/Linux/Linux学习笔记-3/</id>
    <published>2018-05-25T00:17:16.157Z</published>
    <updated>2018-05-31T00:07:48.877Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-系统服务管理"><a href="#1-系统服务管理" class="headerlink" title="1. 系统服务管理"></a>1. 系统服务管理</h3><ol><li>检查本机<code>httpd</code>服务是否开启, 使用命令<code>service httpd status</code></li><li>开启/关闭/重启 httpd服务 <code>service httpd start/stop/restart</code></li><li>查看所有的服务状态 <code>service --status-all</code></li><li>过滤出某个服务<code></code>service –status-all | grep httpd`</li><li>防火墙服务  <code>sevice iptables status/stop/start/restart</code></li></ol><p><strong>配置后台服务进程开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启开机自启http进程</span></span><br><span class="line">-&gt;  chkconfig httpd on</span><br><span class="line"><span class="comment"># 查看httpd的开机自启状态</span></span><br><span class="line">-&gt;  chkconfig --list | grep httpd</span><br><span class="line">httpd    0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>缺省系统运行级别</p><ul><li>0 为停机，机器关闭。</li><li>1 为单用户模式，就像Win9x下的安全模式类似。</li><li>2  为多用户模式，但是没有NFS支持。 </li><li>3  为完整的多用户模式，是标准的运行级。</li><li>4 一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本 电脑的电池用尽时，可以切换到这个模式来做一些设置。</li><li>5  就是X11，进到X Window系统了。</li><li>6  为重启，运行init 6机器就会重启。</li></ul><p>Centos中时区</p><ul><li><p>当前正在使用的时d区文件位于 <code>/etc/localtime</code></p></li><li><p>其他时区文件则位于 <code>/usr/share/zoneinfo</code></p></li><li><p>中国时区使用 <code>/usr/share/zoneinfo/Asia/Shanghai</code></p></li><li><p>更改时区 <code>cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</code></p></li><li><p>如果没有  Asia/Shanghai 时区文件，请使用tzselect命令去生成时区文件，生成好的时区文件就在 <code>/usr/share/zoneinfo</code>目录下</p></li></ul><p><strong>修改系统时间</strong></p><ul><li><code>date</code>  : 直接查看时间</li><li><code>date -s</code>  : 手动设置时间</li><li><code>ntpdate time.windows.www</code>  : 同步时间服务器时间</li></ul><h3 id="2-简单磁盘管理"><a href="#2-简单磁盘管理" class="headerlink" title="2. 简单磁盘管理"></a>2. 简单磁盘管理</h3><ul><li><p>df：列出文件系统的整体磁盘使用量</p><ul><li><p>-h  人性化的列出文件的大小等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; <span class="comment"># df -h /dev/sr0</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sr0        3.7G  3.7G     0 100% /media/cdrom</span><br></pre></td></tr></table></figure></li></ul></li><li><p>du：检查磁盘空间使用量</p></li><li><p>fdisk：用于磁盘分区</p></li></ul><h3 id="3-文件的基本属性"><a href="#3-文件的基本属性" class="headerlink" title="3. 文件的基本属性"></a>3. 文件的基本属性</h3><p><strong>前缀的含义</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录的权限</span></span><br><span class="line">-&gt; <span class="comment"># ll -d /var/www/html/localyum</span></span><br><span class="line">ls -ld 也是一样, 查看目录的权限</span><br><span class="line"></span><br><span class="line">drwxr-xr-x.  7 root root  4096 5月  25 07:50 autojump</span><br><span class="line">-rw-r--r--.  1 root root 50434 5月  23 10:11 install.log</span><br><span class="line">lrwxrwxrwx. 1 root root   13 5月  25 21:04 localyum -&gt; /media/cdrom/</span><br></pre></td></tr></table></figure><ul><li>当为[ <em>d</em> ]则是目录</li><li>当为[ <em>-</em> ]则是文件；</li><li>若是[ <em>l</em> ]则表示为链接文档(link file)；</li><li>若是[ <em>b</em> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ <em>c</em> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置);</li></ul><p><strong>r、w、x 对于文件和目录的含义</strong> </p><table><thead><tr><th></th><th>权限</th><th>对文件的含义</th><th>对目录的含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td><td>可以查看文件内容</td><td>可以列出目录中的内容</td></tr><tr><td>w</td><td>写权限</td><td>可以修改文件内容</td><td>可以再目录中创建、删除文件</td></tr><tr><td>x</td><td>执行权限</td><td>可以执行文件</td><td>可以进入目录</td></tr></tbody></table><h3 id="4-软件安装-TODO"><a href="#4-软件安装-TODO" class="headerlink" title="4. 软件安装 TODO"></a>4. 软件安装 TODO</h3><h5 id="1-二进制发布包安装-TODO"><a href="#1-二进制发布包安装-TODO" class="headerlink" title="1. 二进制发布包安装 TODO:"></a>1. 二进制发布包安装 TODO:</h5><p>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/c670ec9b-1d33-41cc-bda9-035ce287553c/" target="_blank" rel="noopener">安装jdk</a> , 安装<code>tomcat</code>也一样  TODO: </p><ol><li>通过 ftp工具把 jdk传到 linux服务器</li><li>创建一个  <code>/var/www/html/soft/jdk8</code> 的软链接, 指向服务器中的安装包 —— 这一步失败了, 先搁置把, 先copy过去.</li><li></li></ol><h5 id="2-源码编译安装-TODO"><a href="#2-源码编译安装-TODO" class="headerlink" title="2. 源码编译安装 TODO:"></a>2. 源码编译安装 TODO:</h5><p>软件以源码工程的形式发布，需要获取到源码工程后用相应开发工具进行编译打包部署</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/98a384b8-94cb-4521-b919-f502c39ef891/" target="_blank" rel="noopener">安装/卸载 redis</a> </p><p><strong>卸载:</strong> </p><ol><li><p>首先查看redis-server是否启动 </p><p><code>ps aux | grep redis</code></p></li><li><p>有的话, 关闭这些进程 </p><p><code>kill -9 进程pid</code></p></li><li><p>删除redis相应的文件夹就可以了。</p><p><code>find / -name redis</code></p></li></ol><p><strong>安装:</strong> </p><ol><li><p>拷贝到/usr/local, 解压, 删掉原安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-3.0.0.tar.gz </span><br><span class="line">rm redis-3.0.0.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>检查运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测一下是否可以安装</span></span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>安装到指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/root/apps/redis install</span><br></pre></td></tr></table></figure></li><li><p>拷贝配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis-3.0.0/redis.conf  /usr/<span class="built_in">local</span>/redis/bin</span><br></pre></td></tr></table></figure></li><li><p>启动</p><ol><li><p>前端模式  <code>bin/redis-server</code></p></li><li><p>后端模式启动 </p><p>修改<code></code>redis.conf<code>配置文件，</code>daemonize yes` 以后端模式启动</p></li></ol></li><li><p>: TODO</p></li></ol><h5 id="3-RPM发布包"><a href="#3-RPM发布包" class="headerlink" title="3. RPM发布包"></a>3. RPM发布包</h5><p>软件已经按照RedHat（Redhat Package Manager）的包管理工具规范RPM进行打包发布，需要获取到相应的软件RPM发布包，然后用rpm命令进行安装</p><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/fc7f21e7-7a67-4133-8c69-4c2c98510f9f/" target="_blank" rel="noopener">Mysql安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm安装命令</span></span><br><span class="line">1、安装包：rpm -ivh 包名</span><br><span class="line">参数：</span><br><span class="line">-i ：安装的意思</span><br><span class="line">-v ：可视化</span><br><span class="line">-h ：显示安装进度</span><br><span class="line">另外在安装一个rpm包时常用的附带参数有：</span><br><span class="line">--force 强制安装，即使覆盖属于其他包的文件也要安装</span><br><span class="line">--nodeps 当要安装的rpm包依赖其他包时，即使其他包没有安装，也要安装这个包</span><br><span class="line"></span><br><span class="line">2、升级包：rpm -Uvh filename</span><br><span class="line">-U 升级</span><br><span class="line"></span><br><span class="line">3、卸载包rpm -e filename （这里的filename是通过rpm的查询功能所查询到的）</span><br><span class="line"></span><br><span class="line">4、查询一个包是否安装：rpm -q  包名（这里的包名，是不带有平台信息以及后缀名的）</span><br><span class="line"></span><br><span class="line">5.查询当前安装的所有rpm包：rpm -qa</span><br><span class="line">查询当前安装的和sql相关的包：rpm -qa | grep <span class="string">'sql'</span></span><br><span class="line">查询sqlite安装路径：rpm -ql sqlite</span><br></pre></td></tr></table></figure><h3 id="5-设置本地-网络yum源"><a href="#5-设置本地-网络yum源" class="headerlink" title="5. 设置本地/网络yum源"></a>5. 设置本地/网络yum源</h3><ol><li><p>首先检查虚拟机的 CD/DVD驱动器是否有挂载iso镜像文件</p></li><li><p>找到挂载源的位置 在 /dev/sr0下, 将其挂载到/mnt下创建的cdrom文件夹下</p><p><code>mount -t iso9660 -o ro /dev/sr0 /media/cdrom</code></p></li><li><p>配置开机挂载 , <code>vi /etc/fstab</code>, 增加一行</p><p><code>/dev/cdrom   /media/cdrom   iso9660 defaults   0 0</code></p></li><li><p>创建软连接, 设置可以通过web访问</p><p><code>ln -s /mnt/cdrom/ /var/www/html/yumsorurce</code></p></li><li><p>修改<code>etc/yum.repos.d</code>中的文件<code>entOS-Media.repo</code>中的<code>enabled=1</code>, 开启从本地寻找, 因为文件中, 原本就配置了<code>baseurl:  file:///media/cdrom/</code>, 而我们自己创建了<code>media/cdrom</code>这个目录, 所以就可以从这里面读取了</p></li><li><p>执行<code>yum repolist</code>, 发现已经能读取出media中的repo了, 大功告成</p><p><code>c6-media     CentOS-6 - Media      6,575</code></p></li><li><p>tips: 个人觉得还是配置个网络源比较好, 比如163/阿里的. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作步骤</span></span><br><span class="line"><span class="comment"># 1.备份原来的Base源</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载网易/阿里源 到/etc/yum.repos.d下, 替换掉原本的</span></span><br><span class="line"><span class="comment"># 网易源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS6-Base-163.repo</span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum使用</span></span><br><span class="line">yum update 􏻦􏻧􏷉􏷊升级系统</span><br><span class="line">yum install -y xxx  直接安装, 不用确认</span><br><span class="line">􏻈yum update ~ 􏻦􏻧􏸻􏹺􏷜 升级指定软件包</span><br><span class="line">yum remove ~ 􏺌􏷎􏸻􏹺􏷜􏷕 卸载指定软件</span><br></pre></td></tr></table></figure></li><li><p>挂载, 配置源的其他说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于挂载</span></span><br><span class="line"><span class="comment"># lrwxrwxrwx. 1 root root           3 5月  25 16:47 cdrom -&gt; sr0</span></span><br><span class="line">cdrom其实是sr0的软链接, 因此直接找sr0即可</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载的基本语法</span></span><br><span class="line">mont -t  iso9660  -o ro(只读) /dev/sr0  /mnt/cdrom</span><br><span class="line">(挂载类型)   (挂载方式)  (挂载源)  (挂载点)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载的语法</span></span><br><span class="line">umount /mnt/cdrom </span><br><span class="line"></span><br><span class="line">如果卸载时遇到 umount: /mnt/cdrom: device is busy.</span><br><span class="line">解决方式:</span><br><span class="line">1. 查找哪个进程在用:  fuser /mnt/cdrom</span><br><span class="line">2. 查找进程: ps -ef | grep 进程号</span><br><span class="line">3. 插死进程: <span class="built_in">kill</span> -9 进程号, 如果是root用户, 可能会断开连接, 需要重连</span><br><span class="line">4. 然后继续 umount, 如果不行, 就强制卸载 umount -f /mnt/cdrom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于etc/yum.repos.d 中文件的说明</span></span><br><span class="line">      CentOS-Base.repo：有网的环境下默认使用这个，这个是第一优先级。因为没网，所以修改文件名，设置成备份文件。这样系统就会使用第二优先级的文件。</span><br><span class="line">      CentOS-Media.repo：没网的环境下使用这个，在上图中会发现他默认配置了4个路径，第4个yumsource是我自己加的。意思是说，如果系统检测yum使用了离线安装，那么会从上到下从这4个路径中查找安装软件。所以我们只要把光盘挂载在这四个目录下的任意一个目录即可。同时，该配置文件默认是不启用的，如果想使用需要修改倒数第二行的enabled为1，否则该文件无效。</span><br><span class="line">      </span><br><span class="line"><span class="comment"># /mnt &amp; /media 目录的区别</span></span><br><span class="line">media：挂载一些移动设备，例如光盘，U盘等。</span><br><span class="line">mnt：  挂载一些硬盘等设备。所以我们的光盘应该挂载在media目录下，从yum给的默认配置文件也能看出。</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-进程相关"><a href="#6-进程相关" class="headerlink" title="6. 进程相关"></a>6. 进程相关</h3><h5 id="1-ps命令"><a href="#1-ps命令" class="headerlink" title="1. ps命令"></a>1. ps命令</h5><p>ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。 </p><p><u>常用选项</u>包括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -</span><br><span class="line">1、-a显示所有用户的进程</span><br><span class="line">2、-u显示用户名和启动时间</span><br><span class="line">3、-x显示所有进程，包括没有控制终端的进程</span><br><span class="line">4、-e显示所有进程，包括没有控制终端的进程，较x选项，信息更为简略</span><br><span class="line">5、-l显示进程详细信息，按长格式显示</span><br></pre></td></tr></table></figure><p><u>常用组合</u></p><table><thead><tr><th><strong>ps -au</strong> 显示所有用户进程，并给出用户名和启动时间等详细信息</th></tr></thead><tbody><tr><td><strong>ps -aux</strong> 显示所有用户进程，包括没有控制终端的进程，并给出用户和和启动埋单等详细信息</td></tr><tr><td><strong>ps -el</strong> 按长格式显示进程详细信息</td></tr></tbody></table><p><img src="http://p6i5vzkfk.bkt.clouddn.com/study/2018-05-29-161852.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上述命令可能出现的字段含义</span></span><br><span class="line">USER: 进程所有者</span><br><span class="line">PID: 进程号</span><br><span class="line">PPID: 进程的父进程ID</span><br><span class="line">%CPU:  CPU占用率</span><br><span class="line">C: 进程的CPU占用率</span><br><span class="line">%MEM: 内存占用率</span><br><span class="line">VSZ: 表示如果一个程序完全驻留在内存的话需要占用多少内存空间;</span><br><span class="line">RSS: 指明了当前实际占用了多少内存;</span><br><span class="line">TTY: 终端的次要装置号码 (minor device number of tty)</span><br><span class="line">F：进程的标志</span><br><span class="line">S：进程的状态</span><br><span class="line">STAT: 该进程程的状态，有以下值</span><br><span class="line">D: 不可中断的静止</span><br><span class="line">R: 正在执行中</span><br><span class="line">S: 静止状态</span><br><span class="line">T: 暂停执行</span><br><span class="line">Z: 不存在但暂时无法消除</span><br><span class="line">W: 没有足够的记忆体分页可分配</span><br><span class="line">&lt;: 高优先序的进程</span><br><span class="line">N: 低优先序的进程</span><br><span class="line">L: 有记忆体分页分配并锁在记忆体内</span><br><span class="line">PRI：进程的优先权</span><br><span class="line">NI：进程的Nice值</span><br><span class="line">ADDR：进程的地址空间</span><br><span class="line">SZ：进程占用内存的大小</span><br><span class="line">WCHAN：进程当前是否在运行</span><br><span class="line">TTY：进程所属终端</span><br><span class="line">START: 进程开始时间</span><br><span class="line">TIME: 执行的运行时间</span><br><span class="line">COMMAND：所执行的指令</span><br><span class="line">CMD：进程的命令</span><br></pre></td></tr></table></figure><h5 id="2-kill-pidof-pkill-命令"><a href="#2-kill-pidof-pkill-命令" class="headerlink" title="2. kill / pidof / pkill 命令"></a>2. kill / pidof / pkill 命令</h5><p>有时候某个进程可能会长期占用CPU资源或无法正常执行或超出运行时间等，此时可能希望人工干预直接将进程杀死，这时候kill命令可以派上用场</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、<span class="built_in">kill</span> pid 直接杀死进程，但不能保证一定能杀死</span><br><span class="line">2、<span class="built_in">kill</span> -9 pid 强制杀死进程</span><br><span class="line">3、pidof命令用于查看某个进程的进程号（例如：pidof mysqld）</span><br><span class="line">4、pkill命令可以按照进程名杀死进程。pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用<span class="built_in">kill</span>来杀掉</span><br></pre></td></tr></table></figure><h5 id="3-进程切换"><a href="#3-进程切换" class="headerlink" title="3. 进程切换"></a>3. 进程切换</h5><p>前台进程指的是进程在执行时会将命令行阻塞，直到进程执行完毕；后台进程指的是进程在执行时不会阻塞当前命令行，而是在系统后台执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、ctrl + c 终止进程</span><br><span class="line">2、ctrl + z 挂起进程</span><br><span class="line">3、fg命令将进程转换到前台执行</span><br><span class="line">4、bg命令将进程转换到后台执行</span><br><span class="line">5、jobs命令查看任务</span><br></pre></td></tr></table></figure><h5 id="4-top命令"><a href="#4-top命令" class="headerlink" title="4. top命令"></a>4. top命令</h5><p>top 命令可以定期显示所有正在运行和实际运行并且更新到列表中，它显示出 CPU 的使用、内存的使用、交换内存、缓存大小、缓冲区大小、过程控制、用户和更多命令。它也会显示内存和 CPU 使用率过高的正在运行的进程。</p><p>按q键退出查看.</p><h5 id="5-pstree命令"><a href="#5-pstree命令" class="headerlink" title="5. pstree命令"></a>5. pstree命令</h5><p>将进程间的关系以树结构的形式展示，能清楚看各进程之间的父子关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pstree ：以树状形式显示进程</span><br><span class="line">pstree -p ： 以树状形式显示进程，并且显示进程号</span><br></pre></td></tr></table></figure><h5 id="6-JPS命令"><a href="#6-JPS命令" class="headerlink" title="6. JPS命令"></a>6. JPS命令</h5><p>JPS命令是JDK提供的一个检查系统是否启动了JVM进程的一个进程。不是linux系统自带的。主要任务就是用来检查java进程的。</p><h3 id="7-计划任务"><a href="#7-计划任务" class="headerlink" title="7. 计划任务"></a>7. 计划任务</h3><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>计划任务在Linux的体现主要分为at和crontab，其中：</p><ul><li><strong>at</strong>：通过at命令安排任务在某一时刻执行一次</li><li><strong>crontab</strong>：通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</li></ul><h5 id="命令服务管理crontab"><a href="#命令服务管理crontab" class="headerlink" title="命令服务管理crontab"></a>命令服务管理crontab</h5><p>在CentOS系统上，crontab服务的名称叫做<strong>crond</strong></p><ol><li><p>安装</p><p><code>yum -y install crontabs</code></p></li><li><p>服务操作说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service crond start <span class="comment">#启动服务</span></span><br><span class="line">service crond stop   <span class="comment">#关闭服务</span></span><br><span class="line">service crond restart <span class="comment">#重启服务</span></span><br><span class="line">service crond reload <span class="comment">#重新载入配置</span></span><br><span class="line">service crond status <span class="comment">#服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crontab服务是否已设置为开机启动，执行命令：</span></span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入开机自动启动：</span></span><br><span class="line">chkconfig --level 35 crond on</span><br></pre></td></tr></table></figure></li></ol><h5 id="crontab功能使用"><a href="#crontab功能使用" class="headerlink" title="crontab功能使用"></a>crontab功能使用</h5><ul><li><p>命令格式    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file</span><br><span class="line">crontab [-u user] [ -e | -l | -r ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab 参数说明：</span></span><br><span class="line">-u user：用来设定某个用户的crontab服务，例如，”-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</span><br><span class="line">file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。</span><br><span class="line">-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</span><br><span class="line">-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</span><br><span class="line">-r：删除定时任务配置，从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</span><br><span class="line">-i：在删除用户的crontab文件时给确认提示。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令示例：</span></span><br><span class="line">crontab file [-u user]<span class="comment">## 用指定的文件替代目前的crontab。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须掌握：</span></span><br><span class="line">crontab -l [-u user]<span class="comment">## 列出用户目前的crontab. </span></span><br><span class="line">crontab -e [-u user]<span class="comment">## 编辑用户目前的crontab.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过crontab添加的计划任务都会存储在/var/spool/cron/目录里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前服务状态</span></span><br><span class="line">service crond status</span><br><span class="line"><span class="comment"># 操作服务</span></span><br><span class="line">/sbin/service crond start    //启动服务</span><br><span class="line">/sbin/service crond stop     //关闭服务</span><br><span class="line">/sbin/service crond restart  //重启服务</span><br><span class="line">/sbin/service crond reload   //重新载入配置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开机启动服务</span></span><br><span class="line">ntsysv  <span class="comment"># 退出时, 按tab切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机自动启动</span></span><br><span class="line">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure></li><li><p>配置说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本格式 : </span></span><br><span class="line">*　　*　　*　　*　　*　　<span class="built_in">command</span> </span><br><span class="line">分　 时　 日　 月　 周　 命令 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个小时的第几分钟执行该任务. 其它的类似</span></span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示  </span><br><span class="line"></span><br><span class="line">第2列表示小时0～23（0表示0点） 7-9表示：8点到10点之间</span><br><span class="line">第3列表示日期1～31 </span><br><span class="line">第4列表示月份1～12 </span><br><span class="line">第5列标识号星期0～6（0表示星期天） </span><br><span class="line">第6列要运行的命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记住几个特殊符号的含义:</span></span><br><span class="line">“*”代表取值范围内的数字,</span><br><span class="line">“/”代表”每”,</span><br><span class="line">“-”代表从某个数字到某个数字,</span><br><span class="line">“,”分开几个离散的数字</span><br></pre></td></tr></table></figure></li><li><p>配置示例 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *　　*　　*　　*　　*　　command </span></span><br><span class="line"><span class="comment"># 分　 时　 日　 月　 周　 命令 </span></span><br><span class="line"></span><br><span class="line">*/1 * * * * date &gt;&gt; /root/date.txt</span><br><span class="line">上面的例子表示每分钟执行一次date命令</span><br><span class="line">可用 tail -f查看</span><br><span class="line"></span><br><span class="line">30 21 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每晚的21:30重启apache</span><br><span class="line"></span><br><span class="line">45 4 1,10,22 * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache</span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart </span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache</span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache</span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache</span><br><span class="line"></span><br><span class="line">* */1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子每一小时重启apache</span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart</span><br><span class="line">上面的例子每月的4号与每周一到周三的11点重启apache</span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/<span class="built_in">local</span>/etc/rc.d/httpd restart </span><br><span class="line">上面的例子一月一号的4点重启apache</span><br></pre></td></tr></table></figure></li><li><p><a href="https://app.yinxiang.com/shard/s37/nl/7399077/5e22b58a-8b06-41e5-ad17-6fe24502cc0d/" target="_blank" rel="noopener">更详细的见这里</a></p></li></ul><h3 id="8-Linux虚拟主机集群测试环境基本搭建"><a href="#8-Linux虚拟主机集群测试环境基本搭建" class="headerlink" title="8. Linux虚拟主机集群测试环境基本搭建"></a>8. Linux虚拟主机集群测试环境基本搭建</h3><blockquote><p> <strong>注意点</strong>:  <strong>首次</strong>使用 NAT 模式装好CentOS之后, 使用<code>ifconfig</code>查看ip,  虚拟机是没有ip的, <strong>需要手动开启ip服务</strong>,  命令是 <code>dhclient</code>, 如果已开启就不能再次开启</p></blockquote><h4 id="1-第一台虚拟主机的静态ip配置-针对于mac环境"><a href="#1-第一台虚拟主机的静态ip配置-针对于mac环境" class="headerlink" title="1. 第一台虚拟主机的静态ip配置(针对于mac环境)"></a>1. 第一台虚拟主机的静态ip配置(针对于mac环境)</h4><ol><li><p>执行<code>ifconfig</code>命令, 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">shixuanji@x:~|⇒  ifconfig</span><br><span class="line">lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384</span><br><span class="line">options=1203&lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&gt;</span><br><span class="line">inet 127.0.0.1 netmask 0xff000000</span><br><span class="line">inet6 ::1 prefixlen 128</span><br><span class="line">inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280</span><br><span class="line">stf0: flags=0&lt;&gt; mtu 1280</span><br><span class="line">EHC29: flags=0&lt;&gt; mtu 0</span><br><span class="line">EHC26: flags=0&lt;&gt; mtu 0</span><br><span class="line">XHC20: flags=0&lt;&gt; mtu 0</span><br><span class="line">en0: flags=8823&lt;UP,BROADCAST,SMART,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 60:03:08:a1:ac:ee</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect (&lt;unknown <span class="built_in">type</span>&gt;)</span><br><span class="line">status: inactive</span><br><span class="line">p2p0: flags=8802&lt;BROADCAST,SIMPLEX,MULTICAST&gt; mtu 2304</span><br><span class="line">ether 02:03:08:a1:ac:ee</span><br><span class="line">media: autoselect</span><br><span class="line">status: inactive</span><br><span class="line">awdl0: flags=8902&lt;BROADCAST,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1484</span><br><span class="line">ether 72:25:b2:c8:2a:03</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: inactive</span><br><span class="line">en1: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=60&lt;TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:00</span><br><span class="line">media: autoselect &lt;full-duplex&gt;</span><br><span class="line">status: inactive</span><br><span class="line">en2: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=60&lt;TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:01</span><br><span class="line">media: autoselect &lt;full-duplex&gt;</span><br><span class="line">status: inactive</span><br><span class="line">bridge0: flags=8822&lt;BROADCAST,SMART,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=63&lt;RXCSUM,TXCSUM,TSO4,TSO6&gt;</span><br><span class="line">ether 32:00:1a:0d:12:00</span><br><span class="line">Configuration:</span><br><span class="line">id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0</span><br><span class="line">maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200</span><br><span class="line">root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0</span><br><span class="line">ipfilter disabled flags 0x2</span><br><span class="line">member: en1 flags=3&lt;LEARNING,DISCOVER&gt;</span><br><span class="line">        ifmaxaddr 0 port 10 priority 0 path cost 0</span><br><span class="line">member: en2 flags=3&lt;LEARNING,DISCOVER&gt;</span><br><span class="line">        ifmaxaddr 0 port 11 priority 0 path cost 0</span><br><span class="line">media: &lt;unknown <span class="built_in">type</span>&gt;</span><br><span class="line">status: inactive</span><br><span class="line">utun0: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 2000</span><br><span class="line">inet6 fe80::2ed8:c28:27b2:f5d2%utun0 prefixlen 64 scopeid 0xd</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">vmnet1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:01</span><br><span class="line">inet 172.16.63.1 netmask 0xffffff00 broadcast 172.16.63.255</span><br><span class="line">vmnet8: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:08</span><br><span class="line">inet 192.168.170.1 netmask 0xffffff00 broadcast 192.168.170.255</span><br><span class="line">en4: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">options=3&lt;RXCSUM,TXCSUM&gt;</span><br><span class="line">ether 00:0e:c6:cc:ae:d7</span><br><span class="line">inet6 fe80::1c60:7fe2:3947:4ec0%en4 prefixlen 64 secured scopeid 0x11</span><br><span class="line">inet 192.168.63.148 netmask 0xffffff00 broadcast 192.168.63.255</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect (100baseTX &lt;full-duplex,flow-control&gt;)</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure></li><li><p><strong>找到最后的<code>vmnet8</code>,   其中的 <code>inet</code> 就是虚拟主机的网段,  配置虚拟主机的静态ip的时候,  就配置此网段内的. 广播地址 <code>broadcast</code>也是虚拟主机NAT的广播地址, 配置时可以不填</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmnet8: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 00:50:56:c0:00:08</span><br><span class="line">inet 192.168.170.1 netmask 0xffffff00 broadcast 192.168.170.255</span><br></pre></td></tr></table></figure></li><li><p><strong>修改虚拟机网卡配置<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>, 做如下配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:D6:C7:0E</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=bebc1b63-4f20-405a-860a-32d0d8211582</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static<span class="comment"># ip类型</span></span><br><span class="line">IPADDR=192.168.170.6<span class="comment"># ip地址, 与 vmnet8 在同一网段</span></span><br><span class="line">NETMASK=255.255.255.0    <span class="comment"># 子网掩码</span></span><br><span class="line">GATEWAY=192.168.170.2    <span class="comment"># 网关, 跟 ip在同一网段</span></span><br><span class="line">DNS1=192.168.170.2<span class="comment"># 与 ip 同一网段 </span></span><br><span class="line">DNS2=8.8.8.8    <span class="comment"># google的 dns</span></span><br></pre></td></tr></table></figure></li><li><p>重启网络服务</p><p><code>service network restart</code></p></li></ol><h4 id="2-复制原本的虚拟主机"><a href="#2-复制原本的虚拟主机" class="headerlink" title="2. 复制原本的虚拟主机"></a>2. 复制原本的虚拟主机</h4><ol><li>复制虚拟主机1到2</li><li><p>按照原虚拟主机的root用户名&amp;密码登录2</p><h4 id="3-修改新机网卡"><a href="#3-修改新机网卡" class="headerlink" title="3. 修改新机网卡"></a>3. 修改新机网卡</h4></li><li><p>修改网卡<code>vi /etc/udev/rules.d/70-persistent-net.rules</code>, 删除<code>eth0</code>所在的整个段落, 把下面的<code>eth1</code>改为<code>eth0</code>, 保存退出</p></li><li>修改网卡配置<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>, 如果有<code>UUID, HARDDR</code>, 删掉,  <code>IPADDR</code>改为与原虚拟主机不同的地址, 但要在同一网段, <code>BOOTPROTO</code>改为<code>static</code><h4 id="4-修改新机hostname"><a href="#4-修改新机hostname" class="headerlink" title="4. 修改新机hostname"></a>4. 修改新机hostname</h4></li></ol><p>​        修改<strong><em>hostname</em></strong>,  <code>vi /etc/sysconfig/network</code>, 把<code>HOSTNAME</code>改为要修改的名字</p><h4 id="5-免密登录"><a href="#5-免密登录" class="headerlink" title="5. 免密登录"></a>5. 免密登录</h4><ol><li>新机生成自己公钥 <code>ssh-keygen</code>, 注意: 如果原本主机中已经生成, 此处在提示<code>verwrite (y/n)?</code>的时候要选择y, 才会重新生成覆盖</li><li><p>把新主机公钥发送给其它机器 <code>ssh-copy-id root@xxx(其它主机ip)</code>, 此命令相当于 下面2条命令的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt; authorized_keys</span><br><span class="line">scp -r authorized_keys root@192.168.123.202:/root/.ssh/</span><br></pre></td></tr></table></figure></li><li><p>其他主机也把公钥发给新主机, 此时就可以实现主机间的免密登录了.</p></li></ol><h4 id="6-功能增强-可选"><a href="#6-功能增强-可选" class="headerlink" title="6. 功能增强(可选)"></a>6. 功能增强(可选)</h4><ol><li>可以在 每台机器中设置<strong><em>host</em></strong>别名, <code>vi /etc/hosts</code>,  加上<code>xxx.xxx.xx.xxx  cts1/2/3...</code>, 这样在访问其他主机时, 可以直接用别名替代域名</li><li>如果是用的<code>zsh</code>的<strong><em>shell</em></strong>,  可以在所有主机的 <code>~.zshrc</code>中, 添加<code>alias login1=&#39;ssh root@cts1&#39; &gt;&gt; ~/.zshrc</code>, 这样可以直接 用 <code>login1</code>登录到对应的主机.</li></ol><hr><h3 id="9-安装-使用-zsh-amp-oh-my-zsh-amp-相关插件"><a href="#9-安装-使用-zsh-amp-oh-my-zsh-amp-相关插件" class="headerlink" title="9. 安装, 使用 zsh &amp; oh-my-zsh &amp;相关插件"></a>9. 安装, 使用 zsh &amp; oh-my-zsh &amp;相关插件</h3><h4 id="主骨架安装-amp-介绍"><a href="#主骨架安装-amp-介绍" class="headerlink" title="主骨架安装&amp;介绍"></a>主骨架安装&amp;介绍</h4><ol><li><p>安装zsh套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh -y</span><br></pre></td></tr></table></figure></li><li><p>安装 oh-my-zsh套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>zsh 的一些基本配置操作, <a href="#zsh常用插件安装">常用插件安装见这里!</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看oh-my-zsh 的主题</span></span><br><span class="line">ls ~/.oh-my-zsh/themes</span><br><span class="line"></span><br><span class="line">------<span class="comment">#这里都是 .zshrc中的配置------</span></span><br><span class="line"><span class="comment"># 可以更改为random, 这样会随机显示, 很有乐趣, 直接输入zsh也会切换</span></span><br><span class="line">vi ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"random"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加plugin, 按照对应方式安装</span></span><br><span class="line">plugins=(git ... ... )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加alias 到 ~/.zshrc</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> zshconfig=<span class="string">'vi ~/.zshrc'</span></span><br><span class="line"><span class="built_in">alias</span> vimconfig=<span class="string">'vi ~/.vimrc'</span></span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"><span class="comment"># 设置当前用户使用zsh为默认的shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 oh-my-zsh</span></span><br><span class="line">uninstall_oh_my_zsh zsh</span><br></pre></td></tr></table></figure></li><li><p><strong>zsh 的一些骚气操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 兼容 bash, 这个就不用说了</span><br><span class="line">2. 输入某条命令, 比如 cat, 然后用上下键, 可以翻阅所有执行过的命令</span><br><span class="line">3. 各种补全, 输入任何命令, 按 2下 tab键, 下面会出现所有可能的补全, 可以 tab, 或 上下左右切换.</span><br><span class="line">4. 比如要杀掉进程java, 原来是需要  ps aux | grep java, 查进程的 PID，然后<span class="built_in">kill</span> PID; 现在只需要 <span class="built_in">kill</span> java, 然后按下 tab, java会被替换为 对应的 PID, 点回车, <span class="built_in">kill</span> !</span><br><span class="line">5. 目录浏览和跳转, 输入 d, 可以列出在这个回话中访问过的目录列表, 再输入列表前的序号, 即可直接跳转.</span><br><span class="line">6. 在当前目录下输入 .. 或 ... , 或者直接输入目录名, 都可以直接跳转, 甚至都不需要使用 <span class="built_in">cd</span>命令了.</span><br><span class="line">7. 通配符搜索：ls -l */.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find，文件太多就歇菜了.</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">zsh主题介绍</a>, <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">zsh插件介绍</a></p></li></ol><hr><h4 id="zsh常用插件安装"><a href="#zsh常用插件安装" class="headerlink" title="zsh常用插件安装"></a><strong>zsh常用插件安装</strong></h4><h5 id="安装-zsh-autosuggestions"><a href="#安装-zsh-autosuggestions" class="headerlink" title="安装 zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener">安装 <code>zsh-autosuggestions</code></a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">方式1: </span><br><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到.zshrc, 这样就不用每次source了</span></span><br><span class="line">添加 <span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh 到 .zshrc 尾部</span><br><span class="line">plugins=() 中添加上 zsh-autosuggestions, 用空格隔开即可</span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">方式2: 官方建议</span><br><span class="line"><span class="comment"># 少了添加source到 ~/.zshrc这一步, 猜想是会按照默认的路径加载? ==&gt; 是的, 是可行的, 建议这个</span></span><br><span class="line"><span class="comment"># 猜想, oh-my-zsh会自动对安装到 ~/.oh-my-zsh/custom&#125;/plugins/ 此路径下的插件source, 就不需要手动在 ~/.zshrc中添加source了, 其它的插件就先不折腾了, 以后有机会再试试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.Add the plugin to the list of plugins for Oh My Zsh to load:</span></span><br><span class="line">plugins=(zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.Start a new terminal session.</span></span><br></pre></td></tr></table></figure><h5 id="安装-autojump"><a href="#安装-autojump" class="headerlink" title="安装 autojump"></a><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">安装 <code>autojump</code></a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/joelthelion/autojump.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装脚本</span></span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成在~/下面有.autojump目录, 在.zshrc中加一句</span></span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在plugins=(git zsh-autosuggestions autojump) 加上autojump, 与前者用空格隔开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来可以愉悦的使用 j 了</span></span><br></pre></td></tr></table></figure><h5 id="安装-zsh-syntax-highlighting"><a href="#安装-zsh-syntax-highlighting" class="headerlink" title="安装 zsh-syntax-highlighting "></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener">安装 <strong><code>zsh-syntax-highlighting</code></strong> </a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到 ~/.zshrc 目录, 克隆仓库</span></span><br><span class="line"><span class="comment"># 这里默认的是主目录, 当然可以下载到其它目录</span></span><br><span class="line"><span class="comment"># ps: 在那个目录, git clone就会下载到哪个目录</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># source the script 到 ~/.zshrc</span></span><br><span class="line"><span class="comment"># 这个在哪个目录下echo的, 就会把当前目录拼到前面?? 结果好像是这样</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在plugins=(git zsh-autosuggestions autojump zsh-syntax-highlighting) zsh-syntax-highlighting, 与前者用空格隔开</span></span><br><span class="line"><span class="comment"># 其实这里不加好像也没事, 还是加上为好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前 shell生效</span></span><br><span class="line"><span class="comment"># 看这个文件在哪个目录, 在哪个目录就source 哪个目录, 立即生效</span></span><br><span class="line"><span class="built_in">source</span> ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-系统服务管理&quot;&gt;&lt;a href=&quot;#1-系统服务管理&quot; class=&quot;headerlink&quot; title=&quot;1. 系统服务管理&quot;&gt;&lt;/a&gt;1. 系统服务管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;检查本机&lt;code&gt;httpd&lt;/code&gt;服务是否开启, 使用命令&lt;cod
      
    
    </summary>
    
      <category term="Linux" scheme="https://airpoet.github.io/categories/Linux/"/>
    
      <category term="学习笔记" scheme="https://airpoet.github.io/categories/Linux/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="原创" scheme="https://airpoet.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="技术" scheme="https://airpoet.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://airpoet.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
